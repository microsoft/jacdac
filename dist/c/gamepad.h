// Autogenerated C header file for Gamepad
#ifndef _JACDAC_SPEC_GAMEPAD_H
#define _JACDAC_SPEC_GAMEPAD_H 1

#define JD_GAMEPAD_SERVICE_CLASS 0x1deaa06e

// enum Button (uint16_t)
#define JD_GAMEPAD_BUTTON_LEFT 0x1
#define JD_GAMEPAD_BUTTON_UP 0x2
#define JD_GAMEPAD_BUTTON_RIGHT 0x3
#define JD_GAMEPAD_BUTTON_DOWN 0x4
#define JD_GAMEPAD_BUTTON_A 0x5
#define JD_GAMEPAD_BUTTON_B 0x6
#define JD_GAMEPAD_BUTTON_MENU 0x7
#define JD_GAMEPAD_BUTTON_MENU_ALT 0x8
#define JD_GAMEPAD_BUTTON_RESET 0x9
#define JD_GAMEPAD_BUTTON_EXIT 0xa

/** No args. Indicates number of players supported and which buttons are present on the controller. */
#define JD_GAMEPAD_CMD_ANNOUNCE JD_CMD_ANNOUNCE
// Report: 
typedef struct jd_gamepad_announce_report {
    uint8_t flags;
    uint8_t num_players;
    uint16_t button_present;  // Button
} jd_gamepad_announce_report_t;


/**
 * Indicates which buttons are currently active (pressed).
 * `pressure` should be `0xff` for digital buttons, and proportional for analog ones.
 */
#define JD_GAMEPAD_REG_BUTTONS JD_REG_READING
typedef struct jd_gamepad_buttons {
    uint16_t button;  // Button
    uint8_t player_index;
    uint8_t pressure; // ratio
} jd_gamepad_buttons_t;


/** Emitted when button goes from inactive to active. */
#define JD_GAMEPAD_EV_DOWN 0x1
typedef struct jd_gamepad_down {
    uint16_t button;  // Button
    uint16_t player_index;
} jd_gamepad_down_t;


/** Emitted when button goes from active to inactive. */
#define JD_GAMEPAD_EV_UP 0x2
typedef struct jd_gamepad_up {
    uint16_t button;  // Button
    uint16_t player_index;
} jd_gamepad_up_t;


#endif
