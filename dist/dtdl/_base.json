{
    "@type": "Interface",
    "@id": "dtmi:jacdac:_base;1",
    "name": "base",
    "displayName": "Common registers and commands",
    "description": "This file describes common register and command codes.\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).",
    "contents": [
        {
            "@type": "Command",
            "name": "announce",
            "@id": "dtmi:jacdac:_base:command:announce;1",
            "description": "Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it."
        },
        {
            "@type": "Unsupportedreport",
            "name": "announce",
            "@id": "dtmi:jacdac:_base:report:announce;1",
            "description": "Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it."
        },
        {
            "@type": "Command",
            "name": "get_register",
            "@id": "dtmi:jacdac:_base:command:get_register;1",
            "description": "Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register."
        },
        {
            "@type": "Unsupportedreport",
            "name": "get_register",
            "@id": "dtmi:jacdac:_base:report:get_register;1",
            "description": "Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register."
        },
        {
            "@type": "Command",
            "name": "set_register",
            "@id": "dtmi:jacdac:_base:command:set_register;1",
            "description": "Registers number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register."
        },
        {
            "@type": "Unsupportedreport",
            "name": "event",
            "@id": "dtmi:jacdac:_base:report:event;1",
            "description": "Event from sensor or a broadcast service."
        },
        {
            "@type": "Command",
            "name": "calibrate",
            "@id": "dtmi:jacdac:_base:command:calibrate;1",
            "description": "Request to calibrate a sensor. The report indicates the calibration is done."
        },
        {
            "@type": "Unsupportedreport",
            "name": "calibrate",
            "@id": "dtmi:jacdac:_base:report:calibrate;1",
            "description": "Request to calibrate a sensor. The report indicates the calibration is done."
        },
        {
            "@type": "Command",
            "name": "description",
            "@id": "dtmi:jacdac:_base:command:description;1",
            "description": "Request human-readable description of service."
        },
        {
            "@type": "Unsupportedreport",
            "name": "description",
            "@id": "dtmi:jacdac:_base:report:description;1",
            "description": "Request human-readable description of service."
        },
        {
            "@type": "Property",
            "name": "intensity",
            "@id": "dtmi:jacdac:_base:rw:intensity;1",
            "description": "This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).",
            "schema": "integer",
            "writable": true
        },
        {
            "@type": "Property",
            "name": "value",
            "@id": "dtmi:jacdac:_base:rw:value;1",
            "description": "The primary value of actuator (eg. servo pulse length, or motor duty cycle).",
            "schema": "integer",
            "writable": true
        },
        {
            "@type": "Property",
            "name": "max_power",
            "@id": "dtmi:jacdac:_base:rw:max_power;1",
            "description": "Limit the power drawn by the service, in mA.",
            "schema": "integer",
            "writable": true
        },
        {
            "@type": "Property",
            "name": "stream_samples",
            "@id": "dtmi:jacdac:_base:rw:stream_samples;1",
            "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
            "schema": "integer",
            "writable": true
        },
        {
            "@type": [
                "Property",
                "TimeSpan"
            ],
            "name": "streaming_interval",
            "@id": "dtmi:jacdac:_base:rw:streaming_interval;1",
            "description": "Period between packets of data when streaming in milliseconds.",
            "unit": "millisecond",
            "schema": "integer",
            "writable": true
        },
        {
            "@type": "Telemetry",
            "name": "reading",
            "@id": "dtmi:jacdac:_base:ro:reading;1",
            "description": "Read-only value of the sensor, also reported in streaming.",
            "schema": "integer"
        },
        {
            "@type": "Property",
            "name": "low_threshold",
            "@id": "dtmi:jacdac:_base:rw:low_threshold;1",
            "description": "Thresholds for event generation for event generation for analog sensors.",
            "schema": "integer",
            "writable": true
        },
        {
            "@type": "Property",
            "name": "high_threshold",
            "@id": "dtmi:jacdac:_base:rw:high_threshold;1",
            "description": "Thresholds for event generation for event generation for analog sensors.",
            "schema": "integer",
            "writable": true
        }
    ],
    "@context": "dtmi:dtdl:context;2"
}