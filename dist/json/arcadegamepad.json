{
  "name": "Arcade Gamepad",
  "status": "experimental",
  "shortId": "arcadegamepad",
  "camelName": "arcadeGamepad",
  "shortName": "arcadeGamepad",
  "extends": [
    "_base",
    "_sensor"
  ],
  "notes": {
    "short": "A gamepad with direction and action buttons for one player.\nIf a device has multiple controllers, it should have multiple gamepad services, using consecutive service identifiers."
  },
  "classIdentifier": 501915758,
  "enums": {
    "Button": {
      "name": "Button",
      "storage": 1,
      "members": {
        "Left": 1,
        "Up": 2,
        "Right": 3,
        "Down": 4,
        "A": 5,
        "B": 6,
        "Menu": 7,
        "Select": 8,
        "Reset": 9,
        "Exit": 10
      }
    }
  },
  "packets": [
    {
      "kind": "const",
      "name": "instance_name",
      "identifier": 265,
      "description": "A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "identifierName": "instance_name",
      "packFormat": "s",
      "derived": "_base"
    },
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 259,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "event",
      "name": "status_code_changed",
      "identifier": 4,
      "description": "Notifies that the status code of the service changed.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code_changed",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "rw",
      "name": "streaming_samples",
      "identifier": 3,
      "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        }
      ],
      "internal": true,
      "identifierName": "streaming_samples",
      "packFormat": "u8",
      "derived": "_sensor"
    },
    {
      "kind": "rw",
      "name": "streaming_interval",
      "identifier": 4,
      "description": "Period between packets of data when streaming in milliseconds.",
      "fields": [
        {
          "name": "_",
          "unit": "ms",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true,
          "defaultValue": 100,
          "typicalMin": 1,
          "typicalMax": 60000
        }
      ],
      "identifierName": "streaming_interval",
      "packFormat": "u32",
      "derived": "_sensor"
    },
    {
      "kind": "const",
      "name": "streaming_preferred_interval",
      "identifier": 258,
      "description": "Preferred default streaming interval for sensor in milliseconds.",
      "fields": [
        {
          "name": "_",
          "unit": "ms",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "internal": true,
      "optional": true,
      "identifierName": "streaming_preferred_interval",
      "packFormat": "u32",
      "derived": "_sensor"
    },
    {
      "kind": "ro",
      "name": "buttons",
      "identifier": 257,
      "description": "Indicates which buttons are currently active (pressed).\n`pressure` should be `0xff` for digital buttons, and proportional for analog ones.",
      "fields": [
        {
          "name": "button",
          "unit": "",
          "type": "Button",
          "storage": 1,
          "startRepeats": true
        },
        {
          "name": "pressure",
          "unit": "/",
          "shift": 8,
          "type": "u0.8",
          "storage": 1
        }
      ],
      "identifierName": "reading",
      "packFormat": "r: u8 u0.8"
    },
    {
      "kind": "const",
      "name": "available_buttons",
      "identifier": 384,
      "description": "Indicates number of players supported and which buttons are present on the controller.",
      "fields": [
        {
          "name": "button",
          "unit": "",
          "type": "Button",
          "storage": 1,
          "startRepeats": true
        }
      ],
      "packFormat": "r: u8"
    },
    {
      "kind": "event",
      "name": "down",
      "identifier": 1,
      "description": "Emitted when button goes from inactive to active.",
      "fields": [
        {
          "name": "button",
          "unit": "",
          "type": "Button",
          "storage": 1
        }
      ],
      "identifierName": "active",
      "packFormat": "u8"
    },
    {
      "kind": "event",
      "name": "up",
      "identifier": 2,
      "description": "Emitted when button goes from active to inactive.",
      "fields": [
        {
          "name": "button",
          "unit": "",
          "type": "Button",
          "storage": 1
        }
      ],
      "identifierName": "inactive",
      "packFormat": "u8"
    }
  ],
  "tags": [
    "button"
  ]
}