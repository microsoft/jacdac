{
  "name": "Buzzer",
  "status": "experimental",
  "shortId": "buzzer",
  "camelName": "buzzer",
  "shortName": "buzzer",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "A simple buzzer."
  },
  "classIdentifier": 458731991,
  "enums": {},
  "packets": [
    {
      "kind": "const",
      "name": "instance_name",
      "identifier": 265,
      "description": "A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "identifierName": "instance_name",
      "packFormat": "s",
      "derived": "_base"
    },
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 259,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "event",
      "name": "status_code_changed",
      "identifier": 4,
      "description": "Notifies that the status code of the service changed.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code_changed",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "rw",
      "name": "volume",
      "identifier": 1,
      "description": "The volume (duty cycle) of the buzzer.",
      "fields": [
        {
          "name": "_",
          "unit": "/",
          "shift": 8,
          "type": "u0.8",
          "storage": 1,
          "defaultValue": 1
        }
      ],
      "identifierName": "intensity",
      "packFormat": "u0.8"
    },
    {
      "kind": "command",
      "name": "play_tone",
      "identifier": 128,
      "description": "Play a PWM tone with given period and duty for given duration.\nThe duty is scaled down with `volume` register.\nTo play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\nto send `P = 1000000 / F` and `D = P * V / 2`.",
      "fields": [
        {
          "name": "period",
          "unit": "us",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "duty",
          "unit": "us",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "duration",
          "unit": "ms",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16 u16 u16"
    }
  ],
  "tags": [
    "sound"
  ]
}