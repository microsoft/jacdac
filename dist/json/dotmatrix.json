{
  "name": "Dot Matrix",
  "status": "rc",
  "shortId": "dotmatrix",
  "camelName": "dotMatrix",
  "shortName": "dotMatrix",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "A rectangular dot matrix display, made of monochrome LEDs or Braille pins."
  },
  "classIdentifier": 286070091,
  "enums": {
    "Variant": {
      "name": "Variant",
      "storage": 1,
      "members": {
        "LED": 1,
        "Braille": 2
      }
    }
  },
  "constants": {},
  "packets": [
    {
      "kind": "report",
      "name": "command_not_implemented",
      "identifier": 3,
      "description": "This report may be emitted by a server in response to a command (action or register operation)\nthat it does not understand.\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\nNote that it's possible to get an ACK, followed by such an error report.",
      "fields": [
        {
          "name": "service_command",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "packet_crc",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "identifierName": "command_not_implemented",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "const",
      "name": "instance_name",
      "identifier": 265,
      "description": "A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",
      "fields": [
        {
          "name": "_",
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "identifierName": "instance_name",
      "packFormat": "s",
      "derived": "_base"
    },
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 259,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",
      "fields": [
        {
          "name": "code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "event",
      "name": "status_code_changed",
      "identifier": 4,
      "description": "Notifies that the status code of the service changed.",
      "fields": [
        {
          "name": "code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code_changed",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "rw",
      "name": "dots",
      "identifier": 2,
      "description": "The state of the screen where dot on/off state is\nstored as a bit, column by column. The column should be byte aligned.\n\nFor example, if the display has no more than 8 rows in each column, then each byte contains bits corresponding\nto a single column. Least-significant bit is on top.\nIf display has 10 rows, then each column is represented by two bytes.\nThe top-most 8 rows sit in the first byte (with the least significant bit being on top),\nand the remainign 2 row sit in the second byte.\n\nThe following C expression can be used to check if a given `column, row` coordinate is set:\n`dots[column * column_size + (row >> 3)] & (1 << (row & 7))`, where\n`column_size` is `(number_of_rows + 7) >> 3` (note that if number of rows is 8 or less then `column_size` is `1`),\nand `dots` is of `uint8_t*` type.\n\nThe size of this register is `number_of_columns * column_size` bytes.",
      "fields": [
        {
          "name": "_",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true
        }
      ],
      "identifierName": "value",
      "packFormat": "b"
    },
    {
      "kind": "rw",
      "name": "brightness",
      "identifier": 1,
      "description": "Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off.",
      "fields": [
        {
          "name": "_",
          "unit": "/",
          "shift": 8,
          "type": "u0.8",
          "storage": 1
        }
      ],
      "optional": true,
      "identifierName": "intensity",
      "packFormat": "u0.8"
    },
    {
      "kind": "const",
      "name": "rows",
      "identifier": 385,
      "description": "Number of rows on the screen",
      "fields": [
        {
          "name": "_",
          "unit": "#",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16"
    },
    {
      "kind": "const",
      "name": "columns",
      "identifier": 386,
      "description": "Number of columns on the screen",
      "fields": [
        {
          "name": "_",
          "unit": "#",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16"
    },
    {
      "kind": "const",
      "name": "variant",
      "identifier": 263,
      "description": "Describes the type of matrix used.",
      "fields": [
        {
          "name": "_",
          "type": "Variant",
          "storage": 1
        }
      ],
      "optional": true,
      "identifierName": "variant",
      "packFormat": "u8"
    }
  ],
  "tags": [],
  "group": "Display"
}