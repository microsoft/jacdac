{
  "name": "Gamepad",
  "status": "rc",
  "shortId": "gamepad",
  "camelName": "gamepad",
  "shortName": "gamepad",
  "extends": [
    "_base",
    "_sensor"
  ],
  "notes": {
    "short": "A two axis directional joystick with optional buttons."
  },
  "classIdentifier": 277836886,
  "enums": {
    "Buttons": {
      "name": "Buttons",
      "storage": 4,
      "isFlags": true,
      "members": {
        "Left": 1,
        "Up": 2,
        "Right": 4,
        "Down": 8,
        "A": 16,
        "B": 32,
        "Menu": 64,
        "Select": 128,
        "Reset": 256,
        "Exit": 512,
        "X": 1024,
        "Y": 2048
      }
    },
    "Variant": {
      "name": "Variant",
      "storage": 1,
      "members": {
        "Thumb": 1,
        "ArcadeBall": 2,
        "ArcadeStick": 3,
        "Gamepad": 4
      }
    }
  },
  "constants": {},
  "packets": [
    {
      "kind": "report",
      "name": "command_not_implemented",
      "identifier": 3,
      "description": "This report may be emitted by a server in response to a command (action or register operation)\nthat it does not understand.\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\nNote that it's possible to get an ACK, followed by such an error report.",
      "fields": [
        {
          "name": "service_command",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "packet_crc",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "identifierName": "command_not_implemented",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "const",
      "name": "instance_name",
      "identifier": 265,
      "description": "A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",
      "fields": [
        {
          "name": "_",
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "identifierName": "instance_name",
      "packFormat": "s",
      "derived": "_base"
    },
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 259,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",
      "fields": [
        {
          "name": "code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "event",
      "name": "status_code_changed",
      "identifier": 4,
      "description": "Notifies that the status code of the service changed.",
      "fields": [
        {
          "name": "code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code_changed",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "rw",
      "name": "streaming_samples",
      "identifier": 3,
      "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
      "fields": [
        {
          "name": "_",
          "unit": "#",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        }
      ],
      "internal": true,
      "identifierName": "streaming_samples",
      "packFormat": "u8",
      "derived": "_sensor"
    },
    {
      "kind": "rw",
      "name": "streaming_interval",
      "identifier": 4,
      "description": "Period between packets of data when streaming in milliseconds.",
      "fields": [
        {
          "name": "_",
          "unit": "ms",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true,
          "defaultValue": 100,
          "typicalMin": 1,
          "typicalMax": 60000
        }
      ],
      "identifierName": "streaming_interval",
      "packFormat": "u32",
      "derived": "_sensor"
    },
    {
      "kind": "const",
      "name": "streaming_preferred_interval",
      "identifier": 258,
      "description": "Preferred default streaming interval for sensor in milliseconds.",
      "fields": [
        {
          "name": "_",
          "unit": "ms",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "internal": true,
      "optional": true,
      "identifierName": "streaming_preferred_interval",
      "packFormat": "u32",
      "derived": "_sensor"
    },
    {
      "kind": "ro",
      "name": "direction",
      "identifier": 257,
      "description": "If the joystick is analog, the directional buttons should be \"simulated\", based on joystick position\n(`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).\nIf the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).\nThe primary button on the joystick is `A`.",
      "fields": [
        {
          "name": "buttons",
          "type": "Buttons",
          "storage": 4
        },
        {
          "name": "x",
          "unit": "/",
          "shift": 15,
          "type": "i1.15",
          "storage": -2
        },
        {
          "name": "y",
          "unit": "/",
          "shift": 15,
          "type": "i1.15",
          "storage": -2
        }
      ],
      "volatile": true,
      "identifierName": "reading",
      "packFormat": "u32 i1.15 i1.15"
    },
    {
      "kind": "const",
      "name": "variant",
      "identifier": 263,
      "description": "The type of physical joystick.",
      "fields": [
        {
          "name": "_",
          "type": "Variant",
          "storage": 1
        }
      ],
      "optional": true,
      "identifierName": "variant",
      "packFormat": "u8"
    },
    {
      "kind": "const",
      "name": "buttons_available",
      "identifier": 384,
      "description": "Indicates a bitmask of the buttons that are mounted on the joystick.\nIf the `Left`/`Up`/`Right`/`Down` buttons are marked as available here, the joystick is digital.\nEven when marked as not available, they will still be simulated based on the analog joystick.",
      "fields": [
        {
          "name": "_",
          "type": "Buttons",
          "storage": 4
        }
      ],
      "packFormat": "u32"
    },
    {
      "kind": "event",
      "name": "buttons_changed",
      "identifier": 3,
      "description": "Emitted whenever the state of buttons changes.",
      "fields": [
        {
          "name": "buttons",
          "type": "Buttons",
          "storage": 4
        }
      ],
      "identifierName": "change",
      "packFormat": "u32"
    }
  ],
  "tags": [
    "8bit",
    "padauk"
  ],
  "group": "Button"
}