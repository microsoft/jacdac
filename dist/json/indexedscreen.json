{
  "name": "Indexed screen",
  "status": "experimental",
  "shortId": "indexedscreen",
  "camelName": "indexedScreen",
  "shortName": "indexedScreen",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "A screen with indexed colors.\n\nThis is often run over an SPI connection, not regular single-wire JACDAC."
  },
  "classIdentifier": 385496805,
  "enums": {},
  "packets": [
    {
      "kind": "const",
      "name": "instance_name",
      "identifier": 265,
      "description": "A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "identifierName": "instance_name",
      "packFormat": "s",
      "derived": "_base"
    },
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 259,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "event",
      "name": "status_code_changed",
      "identifier": 4,
      "description": "Notifies that the status code of the service changed.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code_changed",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "command",
      "name": "start_update",
      "identifier": 129,
      "description": "Sets the update window for subsequent `set_pixels` commands.",
      "fields": [
        {
          "name": "x",
          "unit": "px",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "y",
          "unit": "px",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "width",
          "unit": "px",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "height",
          "unit": "px",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16 u16 u16 u16"
    },
    {
      "kind": "command",
      "name": "set_pixels",
      "identifier": 131,
      "description": "Set pixels in current window, according to current palette.\nEach \"line\" of data is aligned to a byte.",
      "fields": [
        {
          "name": "pixels",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true
        }
      ],
      "packFormat": "b"
    },
    {
      "kind": "rw",
      "name": "brightness",
      "identifier": 1,
      "description": "Set backlight brightness.\nIf set to `0` the display may go to sleep.",
      "fields": [
        {
          "name": "_",
          "unit": "/",
          "shift": 8,
          "type": "u0.8",
          "storage": 1
        }
      ],
      "identifierName": "intensity",
      "packFormat": "u0.8"
    },
    {
      "kind": "rw",
      "name": "palette",
      "identifier": 128,
      "description": "The current palette.\nThe color entry repeats `1 << bits_per_pixel` times.\nThis register may be write-only.",
      "fields": [
        {
          "name": "blue",
          "unit": "",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true,
          "startRepeats": true
        },
        {
          "name": "green",
          "unit": "",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        },
        {
          "name": "red",
          "unit": "",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        },
        {
          "name": "padding",
          "unit": "",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        }
      ],
      "packFormat": "r: u8 u8 u8 u8"
    },
    {
      "kind": "const",
      "name": "bits_per_pixel",
      "identifier": 384,
      "description": "Determines the number of palette entries.\nTypical values are 1, 2, 4, or 8.",
      "fields": [
        {
          "name": "_",
          "unit": "bit",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        }
      ],
      "packFormat": "u8"
    },
    {
      "kind": "const",
      "name": "width",
      "identifier": 385,
      "description": "Screen width in \"natural\" orientation.",
      "fields": [
        {
          "name": "_",
          "unit": "px",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16"
    },
    {
      "kind": "const",
      "name": "height",
      "identifier": 386,
      "description": "Screen height in \"natural\" orientation.",
      "fields": [
        {
          "name": "_",
          "unit": "px",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16"
    },
    {
      "kind": "rw",
      "name": "width_major",
      "identifier": 129,
      "description": "If true, consecutive pixels in the \"width\" direction are sent next to each other (this is typical for graphics cards).\nIf false, consecutive pixels in the \"height\" direction are sent next to each other.\nFor embedded screen controllers, this is typically true iff `width < height`\n(in other words, it's only true for portrait orientation screens).\nSome controllers may allow the user to change this (though the refresh order may not be optimal then).\nThis is independent of the `rotation` register.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "bool",
          "storage": 1
        }
      ],
      "packFormat": "u8"
    },
    {
      "kind": "rw",
      "name": "up_sampling",
      "identifier": 130,
      "description": "Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\nSome displays may allow changing this (which will also result in changes to `width` and `height`).\nTypical values are 1 and 2.",
      "fields": [
        {
          "name": "_",
          "unit": "px",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        }
      ],
      "packFormat": "u8"
    },
    {
      "kind": "rw",
      "name": "rotation",
      "identifier": 131,
      "description": "Possible values are 0, 90, 180 and 270 only.\nWrite to this register do not affect `width` and `height` registers,\nand may be ignored by some screens.",
      "fields": [
        {
          "name": "_",
          "unit": "Â°",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16"
    }
  ],
  "tags": []
}