{
  "name": "LED Display",
  "status": "rc",
  "shortId": "leddisplay",
  "camelName": "ledDisplay",
  "shortName": "ledDisplay",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "A controller for small displays of individually controlled RGB LEDs.",
    "long": "## Light programs\n\nRealistically, with 1 mbit Jacdac, we can transmit under 2k of data per animation frame (at 20fps).\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\ninstallations and it would completely clog the network.\n\nThus, this service handles displays with 64 or less LEDs.\nUse the [LED strip service](/services/ledstrip) for longer light strips."
  },
  "classIdentifier": 369743088,
  "enums": {
    "LightType": {
      "name": "LightType",
      "storage": 1,
      "members": {
        "WS2812B_GRB": 0,
        "APA102": 16,
        "SK9822": 17
      }
    },
    "Variant": {
      "name": "Variant",
      "storage": 1,
      "members": {
        "Strip": 1,
        "Ring": 2,
        "Stick": 3,
        "Jewel": 4,
        "Matrix": 5
      }
    }
  },
  "constants": {
    "max_pixels_length": {
      "value": 64,
      "hex": false
    }
  },
  "packets": [
    {
      "kind": "report",
      "name": "command_not_implemented",
      "identifier": 3,
      "description": "This report may be emitted by a server in response to a command (action or register operation)\nthat it does not understand.\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\nNote that it's possible to get an ACK, followed by such an error report.",
      "fields": [
        {
          "name": "service_command",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "packet_crc",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "identifierName": "command_not_implemented",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "const",
      "name": "instance_name",
      "identifier": 265,
      "description": "A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",
      "fields": [
        {
          "name": "_",
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "identifierName": "instance_name",
      "packFormat": "s",
      "derived": "_base"
    },
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 259,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",
      "fields": [
        {
          "name": "code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "event",
      "name": "status_code_changed",
      "identifier": 4,
      "description": "Notifies that the status code of the service changed.",
      "fields": [
        {
          "name": "code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code_changed",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "rw",
      "name": "pixels",
      "identifier": 2,
      "description": "For short LED strips, less than `max_pixels_length`, a buffer of 24bit RGB color entries for each LED.",
      "fields": [
        {
          "name": "_",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true
        }
      ],
      "identifierName": "value",
      "packFormat": "b"
    },
    {
      "kind": "rw",
      "name": "brightness",
      "identifier": 1,
      "description": "Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.",
      "fields": [
        {
          "name": "_",
          "unit": "/",
          "shift": 8,
          "type": "u0.8",
          "storage": 1,
          "defaultValue": 0.05
        }
      ],
      "identifierName": "intensity",
      "packFormat": "u0.8"
    },
    {
      "kind": "ro",
      "name": "actual_brightness",
      "identifier": 384,
      "description": "This is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.",
      "fields": [
        {
          "name": "_",
          "unit": "/",
          "shift": 8,
          "type": "u0.8",
          "storage": 1
        }
      ],
      "packFormat": "u0.8"
    },
    {
      "kind": "ro",
      "name": "light_type",
      "identifier": 385,
      "description": "Specifies the type of light strip connected to controller.\nControllers which are sold with lights should default to the correct type\nand could not allow change.",
      "fields": [
        {
          "name": "_",
          "type": "LightType",
          "storage": 1
        }
      ],
      "packFormat": "u8"
    },
    {
      "kind": "ro",
      "name": "num_pixels",
      "identifier": 386,
      "description": "Specifies the number of pixels in the strip.\nControllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.",
      "fields": [
        {
          "name": "_",
          "unit": "#",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16"
    },
    {
      "kind": "ro",
      "name": "num_columns",
      "identifier": 387,
      "description": "If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.",
      "fields": [
        {
          "name": "_",
          "unit": "#",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "packFormat": "u16"
    },
    {
      "kind": "rw",
      "name": "max_power",
      "identifier": 7,
      "description": "Limit the power drawn by the light-strip (and controller).",
      "fields": [
        {
          "name": "_",
          "unit": "mA",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true,
          "defaultValue": 200
        }
      ],
      "identifierName": "max_power",
      "packFormat": "u16"
    },
    {
      "kind": "const",
      "name": "variant",
      "identifier": 263,
      "description": "Specifies the shape of the light strip.",
      "fields": [
        {
          "name": "_",
          "type": "Variant",
          "storage": 1
        }
      ],
      "optional": true,
      "identifierName": "variant",
      "packFormat": "u8"
    }
  ],
  "tags": [],
  "group": "Light"
}