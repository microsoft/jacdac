[{"classIdentifier":536870897,"shortId":"_system","source":"# Common registers and commands\n\n    camel: system\n\nThis file describes common register and command codes.\n\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).\n\n## Commands\n\nCommand codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.\n\n    command announce @ 0x00 { }\n    report { ... }\n\nEnumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.\n\n    command get_register @ 0x1000 {}\n    report { ... }\n\nRegisters number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.\n\n    command set_register @ 0x2000 { ... }\n\nRegisters number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.\n\n    report event @ 0x01 {\n        event_id: u32\n        event_argument: u32\n    }\n\nEvent from sensor or a broadcast service. \n\n    command calibrate @ 0x02 { }\n    report { }\n\nRequest to calibrate a sensor. The report indicates the calibration is done.\n\n## Registers\n\nRegister codes are subdivided as follows:\n* Registers `0x001-0x07f` - r/w common to all services\n* Registers `0x080-0x0ff` - r/w defined per-service\n* Registers `0x100-0x17f` - r/o common to all services\n* Registers `0x180-0x1ff` - r/o defined per-service\n* Registers `0x200-0xeff` - custom, defined per-service\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.\n\n    rw intensity: u32 @ 0x01\n\nThis is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\n\n    rw value: i32 @ 0x02\n\nThe primary value of actuator (eg. servo pulse length, or motor duty cycle).\n\n    rw max_power = 500: u16 mA {typical_max = 500} @ 0x07\n\nLimit the power drawn by the service, in mA.\n\n    rw streaming_samples: u8 @ 0x03\n\nAsks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).\n\n    rw streaming_interval = 100: u32 ms @ 0x04\n\nPeriod between packets of data when streaming in milliseconds.\n\n    ro reading: i32 @ 0x101\n\nRead-only value of the sensor, also reported in streaming.\n\n    const min_reading: i32 @ 0x104\n\nThe lowest value that can be reported by the sensor.\n\n    const max_reading: i32 @ 0x105\n\nThe highest value that can be reported by the sensor.\n\n    ro reading_error: u32 @ 0x106\n\nThe real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\nsend a report in the same frame of the ``reading`` report.\n\n    const reading_resolution: u32 @ 0x108\n\nSmallest, yet distinguishable change in reading.\n\n    enum ReadingThreshold: u8 {\n        Neutral = 1\n        Low = 2\n        High = 3\n    }\n    rw low_threshold: i32 @ 0x05\n\nThreshold when reading data gets low and triggers a ``low``.\n\n    rw high_threshold: i32 @ 0x06\n\nThresholds when reading data gets high and triggers a ``high`` event.\n\n    const streaming_preferred_interval: u32 ms @ 0x102\n\nPreferred default streaming interval for sensor in milliseconds.\n\n    const variant: u32 @ 0x107\n\nThe hardware variant of the service.\nFor services which support this, there's an enum defining the meaning.\n\n    enum StatusCodes: u16 {\n        Ready = 0\n\n        Initializing = 1\n        Calibrating = 2\n\n        Sleeping = 3\n        WaitingForInput = 4\n\n        CalibrationNeeded = 100\n    }\n    ro status_code? @ 0x103 {\n        code: StatusCodes\n        vendor_code: u16\n    }\n\nReports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet.\n\n    const instance_name?: string @ 0x109\n\nA friendly name that describes the role of this service instance in the device.\n\n## Events\n\nEvents codes are 8-bit and are subdivided as follows:\n* Events `0x00-0x7f` - common to all services\n* Events `0x80-0xff` - defined per-service\n\n    event active @ 0x01 { }\n\nNotifies that the service has been activated (eg. button pressed, network connected, etc.)\n\n    event inactive @ 0x02 { }\n\nNotifies that the service has been dis-activated.\n\n    event change @ 0x03 { }\n\nNotifies that the some state of the service changed.\n\n    event status_code_changed @ 0x04 {\n        code: StatusCodes\n        vendor_code: u16\n    }\n\nNotifies that the status code of the service changed.\n\n    event low @ 0x05 {}\n\nNotifies that the low threshold has been crossed\n\n    event high @ 0x06 {}\n\nNotifies that the high threshold has been crossed\n\n    event neutral @ 0x07 {}\n\nNotifies that the threshold is back between ``low`` and ``high``.\n"},{"classIdentifier":536870899,"shortId":"_base","source":"# Base service\n\n    camel: base\n\nBase class for all services.\n\n## Registers\n\n    const instance_name?: string @ instance_name\n\nA friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\n\n    ro status_code? @ status_code {\n        code: u16\n        vendor_code: u16\n    }\n\nReports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.\n\n## Events\n\n    event status_code_changed? @ status_code_changed {\n        code: u16\n        vendor_code: u16\n    }\n\nNotifies that the status code of the service changed.\n"},{"classIdentifier":536870898,"shortId":"_sensor","source":"# Sensor\n\n    camel: sensor\n\nBase class for sensors.\n\n## Registers\n\n    rw internal streaming_samples: u8 @ streaming_samples\n\nAsks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).\n\n    rw streaming_interval = 100: u32 ms {typical_min = 1, typical_max = 60000} @ streaming_interval\n\nPeriod between packets of data when streaming in milliseconds.\n\n    const internal streaming_preferred_interval?: u32 ms @ streaming_preferred_interval\n\nPreferred default streaming interval for sensor in milliseconds.\n"},{"classIdentifier":521405449,"shortId":"accelerometer","source":"# Accelerometer\n\n    identifier: 0x1f140409\n    extends: _sensor\n    tags: movement\n\nA 3-axis accelerometer.\n\n## Registers\n\n    ro forces @ reading {\n        x: i12.20 g\n        y: i12.20 g\n        z: i12.20 g\n    }\n\nIndicates the current forces acting on accelerometer.\n\n    ro forces_error?: i12.20 g @ reading_error\n\nError on the reading value.\n\n    rw max_force?: i12.20 g @ 0x80\n\nConfigures the range forces detected.\nRead-back after setting to get current value.\n\n## Events\n\nAll events are debounced.\n\n    event tilt_up @ 0x81\n    event tilt_down @ 0x82\n    event tilt_left @ 0x83\n    event tilt_right @ 0x84\n\nEmitted when accelerometer is tilted in the given direction.\n\n    event face_up @ 0x85\n    event face_down @ 0x86\n\nEmitted when accelerometer is laying flat in the given direction.\n\n    event freefall @ 0x87\n\nEmitted when total force acting on accelerometer is much less than 1g.\n\n    event shake @ 0x8b\n\nEmitted when forces change violently a few times.\n\n    event force_2g @ 0x8c\n    event force_3g @ 0x88\n    event force_6g @ 0x89\n    event force_8g @ 0x8a\n\nEmitted when force in any direction exceeds given threshold.\n"},{"classIdentifier":409316809,"shortId":"analogbutton","source":"# Analog Button\n\n    identifier: 0x1865adc9\n    extends: _sensor\n    tags: button\n\nA capacitive or pressure sensitive push-button.\n\n## Registers\n\n    ro pressure: u0.16 / @ reading\n\nIndicates the current pressure (``force``) on the button.\n\n    rw inactive_threshold: u0.16 / @ low_threshold\n    \nIndicates the lower threshold for ``inactive`` events.\n\n    rw active_threshold: u0.16 / @ high_threshold\n    \nIndicates the threshold for ``active`` events.\n\n    enum Variant: u8 {\n        Pressure = 1\n        Capacitive = 2\n    }\n    const variant?: Variant @ variant\n\nThe type of physical button.\n\n## Events\n\n    event active @ active\n\nEmitted when button goes from inactive (pressure less than threshold) to active.\n\n    event inactive @ inactive\n\nEmitted when button goes from active (pressure higher than threshold) to inactive.\n"},{"classIdentifier":501915758,"shortId":"arcadegamepad","source":"# Arcade Gamepad\n\n    identifier: 0x1deaa06e\n    extends: _sensor\n    tags: button\n\nA gamepad with direction and action buttons for one player.\nIf a device has multiple controllers, it should have multiple gamepad services, using consecutive service identifiers.\n\n## Registers\n\n    enum Button : u8 {\n        Left = 1\n        Up = 2\n        Right = 3\n        Down = 4\n        A = 5\n        B = 6\n        Menu = 7\n        Select = 8\n        Reset = 9        \n        Exit = 10\n    }\n    ro buttons @ reading {\n    repeats:\n        button: Button\n        pressure: u0.8 /\n    }\n\nIndicates which buttons are currently active (pressed).\n`pressure` should be `0xff` for digital buttons, and proportional for analog ones.\n\n    const available_buttons @ 0x180 {\n    repeats:\n        button: Button\n    }\n\nIndicates number of players supported and which buttons are present on the controller.\n\n## Events\n\n    event down @ active {\n        button: Button\n    }\n\nEmitted when button goes from inactive to active.\n\n    event up @ inactive {\n        button: Button\n    }\n\nEmitted when button goes from active to inactive.\n"},{"classIdentifier":533083654,"shortId":"arcadesound","source":"# Arcade sound\n\n    identifier: 0x1fc63606\n\nA sound playing device.\n\nThis is typically run over an SPI connection, not regular single-wire JACDAC.\n\n## Commands\n\n    command play @ 0x80 {\n        samples: bytes\n    }\n\nPlay samples, which are single channel, signed 16-bit little endian values.\n\n## Registers\n\n    rw sample_rate = 44100: u22.10 Hz @ 0x80\n\nGet or set playback sample rate (in samples per second).\nIf you set it, read it back, as the value may be rounded up or down.\n\n    const buffer_size: u32 B @ 0x180\n\nThe size of the internal audio buffer.\n\n    ro buffer_pending: u32 B @ 0x181\n\nHow much data is still left in the buffer to play.\nClients should not send more data than `buffer_size - buffer_pending`,\nbut can keep the `buffer_pending` as low as they want to ensure low latency\nof audio playback.\n"},{"classIdentifier":477339244,"shortId":"barcodereader","source":"# Barcode reader\n\n    identifier: 0x1c739e6c\n\nA device that reads various barcodes, like QR codes. For the web, see [BarcodeDetector](https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector).\n\n## Registers\n\n    rw enabled: bool @ intensity\n    \nTurns on or off the detection of barcodes.\n\n    enum Format: u8 {\n        Aztec = 1\n        Code128 = 2\n        Code39 = 3\n        Code93 = 4\n        Codabar = 5\n        DataMatrix = 6\n        Ean13 = 8\n        Ean8 = 9\n        ITF = 10\n        Pdf417 = 11\n        QrCode = 12\n        UpcA = 13\n        UpcE = 14\n    }\n    const formats? @ 0x180 {\n        repeats:\n            format: Format;  \n    }\n    \nReports the list of supported barcode formats, as documented in https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API.\n\n## Events\n\n    event detect @ active {\n        format: Format\n        data: string\n    }\n    \nRaised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\nIn case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.\n"},{"classIdentifier":504462570,"shortId":"barometer","source":"# Barometer\n\n    identifier: 0x1e117cea\n    extends: _sensor\n    tags: environment\n\nA sensor measuring air pressure of outside environment.\n\n## Registers\n\nDefault streaming interval is 1s.\n\n    ro pressure: u22.10 hPa { absolute_min = 300, absolute_max = 1100, typical_min = 940, typical_max = 1040, preferred_interval=60000 } @ reading\n\nThe air pressure.\n\n    ro pressure_error: u22.10 hPa @ reading_error\n\nThe real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.\n"},{"classIdentifier":449414863,"shortId":"bitradio","source":"# bit:radio\n\n    identifier: 0x1ac986cf\n    camel: bitRadio\n\nSupport for sending and receiving packets using the [Bit Radio protocol](https://github.com/microsoft/pxt-common-packages/blob/master/libs/radio/docs/reference/radio.md), typically used between micro:bit devices.\n\n## Registers\n\n    rw enabled: bool @ intensity\n\nTurns on/off the radio antenna.\n\n    rw group: u8 @ 0x80\n\nGroup used to filter packets\n\n    rw transmission_power = 6: u8 { absolute_min=1, absolute_max=7 } @ 0x81\n\nAntenna power to increase or decrease range.\n\n    rw frequency_band=7: u8 { absolute_max=83 } @ 0x82\n\nChange the transmission and reception band of the radio to the given channel.\n\n## Commands\n\n    command send_string @ 0x80 {\n        message: string\n    }\n\nSends a string payload as a radio message, maximum 18 characters.\n\n    command send_number @ 0x81 {\n        value: f64\n    }\n\nSends a double precision number payload as a radio message\n\n    command send_value @ 0x82 {\n        value: f64\n        name: string\n    }\n\nSends a double precision number and a name payload as a radio message\n\n    command send_buffer @ 0x83 {\n        data: bytes\n    }\n\nSends a payload of bytes as a radio message\n\n## Events\n\n    event string_received @ 0x80 {\n        time: u32 ms\n        device_serial_number: u32\n        rssi: i8 dB\n        padding: u8[1]\n        message: string\n    }\n\nRaised when a string packet is received\n\n    event number_received @ 0x81 {\n        time: u32 ms\n        device_serial_number: u32\n        rssi: i8 dB\n        padding: u8[3]\n        value: f64\n        name: string\n    }\n\nRaised when a number packet is received\n\n    event buffer_received @ 0x82 {\n        time: u32 ms\n        device_serial_number: u32\n        rssi: i8 dB\n        padding: u8[1]\n        data: bytes\n    }\n\nRaised when a buffer packet is received\n"},{"classIdentifier":536516936,"shortId":"bootloader","source":"# Bootloader\n\n    identifier: 0x1ffa9948\n\nAllows flashing (reprogramming) devices over Jacdac.\n\n## Commands\n\n    command info @ announce { }\n    report {\n        service_class: u32\n        page_size: u32 B\n        flashable_size: u32 B\n        firmware_identifier: u32\n    }\n\nThe `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.\n\n    command set_session @ 0x81 {\n        session_id: u32\n    }\n    report {\n        session_id: u32\n    }\n\nThe flashing host should generate a random id, and use this command to set it.\n\n    enum Error : u32 {\n        NoError = 0\n        PacketTooSmall = 1\n        OutOfFlashableRange = 2\n        InvalidPageOffset = 3\n        NotPageAligned = 4\n    }\n    command page_data @ 0x80 {\n        page_address: u32\n        page_offset: u16\n        chunk_no: u8\n        chunk_max: u8\n        session_id: u32\n        reserved0: u32\n        reserved1: u32\n        reserved2: u32\n        reserved3: u32\n        page_data: bytes { max_bytes = 208}\n    }\n    report {\n        session_id: u32\n        page_error: Error\n        page_address: u32\n    }\n\nUse to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.\n"},{"classIdentifier":343122531,"shortId":"button","source":"# Button\n\n    identifier: 0x1473a263\n    extends: _sensor\n    tags: button\n\nA push-button, which returns to inactive position when not operated anymore.\n\n## Registers\n\n    ro pressed: bool @ reading\n\nIndicates whether the button is currently active (pressed).\n\n## Events\n\n    event down @ active\n\nEmitted when button goes from inactive (`pressed == 0`) to active.\n\n    event up @ inactive\n\nEmitted when button goes from active (`pressed == 1`) to inactive.\n\n    event click @ 0x80\n\nEmitted together with `up` when the press time was not longer than 500ms.\n\n    event long_click @ 0x81\n\nEmitted after button is held for 500ms. Long click events are followed by a separate up event.\n\n    event hold @ 0x82\n\nEmitted after the button is held for 1500ms. Hold events are followed by a separate up event.\n"},{"classIdentifier":458731991,"shortId":"buzzer","source":"# Buzzer\n\n    identifier: 0x1b57b1d7\n    camel: buzzer\n    tags: sound\n\nA simple buzzer.\n\n## Registers\n\n    rw volume = 1: u0.8 / @ intensity\n\nThe volume (duty cycle) of the buzzer.\n\n## Commands\n\n    command play_tone @ 0x80 {\n        period: u16 us\n        duty: u16 us\n        duration: u16 ms\n    }\n\nPlay a PWM tone with given period and duty for given duration.\nThe duty is scaled down with `volume` register.\nTo play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\nto send `P = 1000000 / F` and `D = P * V / 2`.\n"},{"classIdentifier":523748714,"shortId":"characterscreen","source":"# Character Screen\n\n    identifier: 0x1f37c56a\n    tags: display\n\nA screen that displays characters.\n\n## Registers\n\n    rw message: string @ value\n\nText to show. Use `\\n` to break lines.\n\n    rw brightness: u0.8 / @ intensity\n\nBrightness of the screen. `0` means off.\n\n    enum Variant : u8 {\n        LCD = 1,\n        OLED = 2\n    }\n    const variant?: Variant @ variant\n\nDescribes the type of character LED screen.\n\n    enum TextDirection : u8 {\n        LeftToRight = 1,\n        RightToLeft = 2\n    }\n    rw text_direction?: TextDirection @ 0x82\n\nSpecifies the RTL or LTR direction of the text.\n\n    const rows: u8 @ 0x180\n\nGets the number of rows.\n\n    const columns: u8 @ 0x181\n\nGets the number of columns.\n"},{"classIdentifier":372299111,"shortId":"color","source":"# Color\n\nSenses RGB colors\n\n    identifier: 0x1630d567\n    extends: _sensor\n    tags: imaging\n\n## Registers\n\n    ro color @ reading {\n        red: u0.16 /\n        green: u0.16 /\n        blue: u0.16 /\n    }\n\nDetected color in the RGB color space.\n"},{"classIdentifier":364362175,"shortId":"compass","source":"# Compass\n\nA sensor that measures the heading.\n\n    identifier: 0x15b7b9bf\n    extends: _sensor\n\n## Registers\n\n    ro heading: u16.16 { absolute_min=0, absolute_max=359, preferred_interval=1000 } ° @ reading\n\nThe heading with respect to the magnetic north.\n\n    rw enabled: bool @ intensity\n\nTurn on or off the sensor. Turning on the sensor may start a calibration sequence.\n\n    ro heading_error?: u16.16 ° @ reading_error\n\nError on the heading reading\n\n## Commands\n\n    command calibrate @ calibrate { }\n    \nStarts a calibration sequence for the compass.\n"},{"classIdentifier":0,"shortId":"control","source":"# Control\n\n    identifier: 0x00000000\n\nControl service is always service index `0`.\nIt handles actions common to all services on a device.\n\n## Commands\n\n    flags AnnounceFlags : u8 {\n        SupportsACK = 0x01,\n    }\n    command services @ announce { }\n    report {\n        restart_counter: u8\n        flags: AnnounceFlags\n        packet_count: u8\n        reserved: u8\n    repeats:\n        service_class: u32\n    }\n\nThe `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\n\n    command noop @ 0x80 { }\n\nDo nothing. Always ignored. Can be used to test ACKs.\n\n    command identify? @ 0x81 { }\n\nBlink an LED or otherwise draw user's attention.\n\n    command reset? @ 0x82 { }\n\nReset device. ACK may or may not be sent.\n\n    command flood_ping? @ 0x83 {\n        num_responses: u32\n        start_counter: u32\n        size: u8 B\n    }\n    report {\n        counter: u32\n        dummy_payload: bytes\n    }\n\nThe device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\n\n## Registers\n\n    rw reset_in? : u32 us @ 0x80\n\nWhen set to value other than `0`, it asks the device to reset after specified number of microseconds.\nThis is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\nsay 1.6s every 0.5s.\n\n    const device_description?: string @ 0x180\n\nIdentifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\n\n    const firmware_identifier? : u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x181\n\nA numeric code for the string above; used to identify firmware images and devices.\n\n    const bootloader_firmware_identifier?: u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x184\n\nTypically the same as `firmware_identifier` unless device was flashed by hand; the bootloader will respond to that code.\n\n    const firmware_version?: string @ 0x185\n\nA string describing firmware version; typically semver.\n\n    ro mcu_temperature?: i16 °C { preferred_interval=60000, typical_min = -10, typical_max = 150 } @ 0x182\n\nMCU temperature in degrees Celsius (approximate).\n\n    ro uptime?: u64 us { preferred_interval=60000 } @ 0x186\n\nNumber of microseconds since boot.\n\n    const device_url?: string @ 0x187\n\nRequest the information web site for this device\n\n    const firmware_url?: string @ 0x188\n\nURL with machine-readable metadata information about updating device firmware\n\n    rw status_light? @ 0x81 {\n        repetitions: u16\n        repeats:\n            hue: u8\n            saturation: u8\n            value: u8\n            duration8: u8 8ms\n    }\n\nSpecifies a status light animation sequence on a colored or monochrome LED\nusing the [LED animation format](/spec/led-animation/).\nTypically, up to 8 steps (repeats) are supported.\n\nThe status light is also used by Jacdac software stack to indicate various status mode\nand this animation may be overridden when those modes are enabled."},{"classIdentifier":337275786,"shortId":"distance","source":"# Distance\n\nA sensor that determines the distance of an object without any physical contact involved.\n\n        identifier:  0x141a6b8a\n        extends: _sensor\n\n## Registers\n\n    ro distance: u16.16 m { typical_min=0.02, typical_max=4 } @ reading\n\nCurrent distance from the object\n\n    const min_range?: u16.16 m @ min_reading\n\nMinimum measurable distance \n\n    const max_range?: u16.16 m @ max_reading\n\nMaximum measurable distance\n\n    enum Variant: u8 {\n        Ultrasonic = 1,\n        Infrared = 2,\n        LiDAR = 3,\n        Laser = 4,\n    }\n    const variant?: Variant @ variant\n\nDetermines the type of sensor used.\n"},{"classIdentifier":298814469,"shortId":"dmx","source":"#  DMX\n\n    identifier: 0x11cf8c05\n    camel: dmx\n\nA service that can send DMX512-A packets with limited size. This service is designed to allow tinkering with a few DMX devices, but only allows 235 channels. More about DMX at https://en.wikipedia.org/wiki/DMX512.\n\n## Registers\n\n    rw enabled: bool @ intensity\n\nDetermines if the DMX bridge is active\n## Commands\n\n    command send @ 0x80 {\n        channels: bytes\n    }\n\nSend a DMX packet, up to 236bytes long, including the start code.\n"},{"classIdentifier":379362758,"shortId":"eco2","source":"# Equivalent CO₂\n\nMeasures equivalent CO₂ levels.\n\n    identifier: 0x169c9dc6\n    extends: _sensor\n    camel: eCO2\n    tags: environment\n\n## Registers\n\n    ro e_CO2: u22.10 ppm { typical_min=400, typical_max=8192, preferred_interval=1000 }  @ reading\n\nEquivalent CO₂ (eCO₂) readings.\n\n    ro e_CO2_error: u22.10 ppm @ reading_error\n\nError on the reading value.\n\n    const min_e_CO2?: u22.10 ppm @ min_reading\n\nMinimum measurable value\n\n    const max_e_CO2?: u22.10 ppm @ max_reading\n\nMinimum measurable value\n\n    const conditioning_period?: u32 s @ 0x180\n\nTime required to achieve good sensor stability before measuring after long idle period.\n\n    enum Variant: u8 {\n        VOC = 1,\n        NDIR = 2\n    }\n    const variant?: Variant @ variant\n\nType of physical sensor and capabilities."},{"classIdentifier":505087730,"shortId":"gyroscope","source":"# Gyroscope\n\n    identifier: 0x1e1b06f2\n    extends: _sensor\n    tags: movement\n\nA 3-axis gyroscope.\n\n## Registers\n\n    ro rotation_rates @ reading {\n        x: i12.20 °/s\n        y: i12.20 °/s\n        z: i12.20 °/s\n    }\n\nIndicates the current forces acting on accelerometer.\n\n    ro rotation_rates_error?: i12.20 °/s @ reading_error\n\nError on the reading value.\n\n    rw max_rate?: i12.20 °/s @ 0x80\n\nConfigures the range of range of rotation rates."},{"classIdentifier":376204740,"shortId":"heartrate","source":"#  Heart Rate\n\nA sensor approximating the heart rate. \n\n    identifier: 0x166c6dc4\n    extends: _sensor\n    tags: biometric\n\n**Jacdac is NOT suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**\n\n## Registers\n\n    ro heart_rate: u16.16 bpm { typical_min=30, typical_max=200, preferred_interval=1000 } @ reading\n\nThe estimated heart rate.\n\n    ro heart_rate_error?: u16.16 bpm @ reading_error\n\nThe estimated error on the reported sensor data.\n\n    enum Variant: u8 {\n        Finger = 1\n        Chest = 2\n        Wrist = 3\n        Pump = 4\n        WebCam = 5\n    }\n    const variant?: Variant @ variant\n\nThe type of physical sensor\n"},{"classIdentifier":414210922,"shortId":"hidkeyboard","source":"# HID Keyboard\n\n    identifier: 0x18b05b6a\n    status: experimental\n    camel: hidKeyboard\n    \nControl a HID keyboard. \n\nThis service cannot be simulated.\n\nThe codes for the key (selectors) is defined in the [HID Keyboard\nspecification](https://usb.org/sites/default/files/hut1_21.pdf), chapter 10 Keyboard/Keypad Page, page 81.\n\nThe device keeps tracks of the key state and is able to clear it all with the clear command.\n\n## Commands\n\n    flags Modifiers : u8 {\n        LeftControl = 0xe0\n        LeftShift = 0xe1\n        LeftAlt = 0xe2\n        LeftGUID = 0xe3\n        RightControl = 0xe4\n        RightShift = 0xe5\n        RightAlt = 0xe6\n        RightGUID = 0xe7\n    }\n    enum Action : u8 {\n        Press = 0\n        Up = 1\n        Down = 2\n    }\n    command key @ 0x80 {\n    repeats:\n        selector: u16\n        modifiers: Modifiers\n        action: Action\n    }\n    \nPresses a key or a sequence of keys down.\n\n    command clear @ 0x81 {}\n    \nClears all pressed keys.\n"},{"classIdentifier":411425820,"shortId":"hidmouse","source":"# HID Mouse\n\n    identifier: 0x1885dc1c\n    status: experimental\n    camel: hidMouse\n\nControls a HID mouse. \n\nThis service cannot be simulated.\n\n## Commands\n\n    flags Button : u16 {\n        Right = 0x01\n        Middle = 0x04\n        Left = 0x02\n    }\n    enum ButtonEvent : u8 {\n        Up = 0x01\n        Down = 0x02\n        Click = 0x03\n        DoubleClick = 0x04\n    }\n    command set_button @ 0x80 {\n        buttons: Button\n        event: ButtonEvent\n    }\n\nSets the up/down state of one or more buttons.\nA ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\nA ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).\n\n    command move @ 0x81 {\n      dx: i16 #\n      dy: i16 #\n      time: u16 ms\n    }\n\nMoves the mouse by the distance specified.\nIf the time is positive, it specifies how long to make the move.\n\n    command wheel @ 0x82 {\n        dy: i16 #\n        time: u16 ms\n    }\n\nTurns the wheel up or down. Positive if scrolling up.\nIf the time is positive, it specifies how long to make the move.\n"},{"classIdentifier":382210232,"shortId":"humidity","source":"# Humidity\n\n    identifier: 0x16c810b8\n    extends: _sensor\n    tags: environment\n\nA sensor measuring humidity of outside environment.\n\n## Registers\n\nDefault streaming interval is 1s.\n\n    ro humidity: u22.10 %RH { typical_max = 100, preferred_interval=5000 } @ reading\n\nThe relative humidity in percentage of full water saturation.\n\n    ro humidity_error: u22.10 %RH @ reading_error\n\nThe real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.\n\n    const min_humidity = 0: u22.10 °C @ min_reading\n\nLowest humidity that can be reported.\n\n    const max_humidity = 100: u22.10 °C @ max_reading\n\nHighest humidity that can be reported.\n"},{"classIdentifier":510577394,"shortId":"illuminance","source":"# Illuminance\n\n    identifier: 0x1e6ecaf2\n    extends: _sensor\n    tags: imaging\n\nDetects the amount of light falling onto a given surface area.\n\nNote that this is different from *luminance*, the amount of light that passes through, emits from, or reflects off an object.\n\n## Registers\n\n    ro light: u22.10 lux { typical_max=100000 } @ reading\n\nThe amount of illuminance, as lumens per square metre.\n\n    ro light_error?: u22.10 lux @ reading_error\n\nError on the reported sensor value.\n"},{"classIdentifier":385496805,"shortId":"indexedscreen","source":"# Indexed screen\n\n    identifier: 0x16fa36e5\n\nA screen with indexed colors.\n\nThis is often run over an SPI connection, not regular single-wire JACDAC.\n\n## Commands\n\n    command start_update @ 0x81 {\n        x: u16 px\n        y: u16 px\n        width: u16 px\n        height: u16 px\n    }\n\nSets the update window for subsequent `set_pixels` commands.\n\n    command set_pixels @ 0x83 {\n        pixels: bytes\n    }\n\nSet pixels in current window, according to current palette.\nEach \"line\" of data is aligned to a byte.\n\n## Registers\n\n    rw brightness: u0.8 / @ intensity\n\nSet backlight brightness.\nIf set to `0` the display may go to sleep.\n\n    rw palette @ 0x80 {\n    repeats:\n        blue: u8\n        green: u8\n        red: u8\n        padding: u8\n    }\n\nThe current palette.\nThe color entry repeats `1 << bits_per_pixel` times.\nThis register may be write-only.\n\n    const bits_per_pixel: u8 bit @ 0x180\n\nDetermines the number of palette entries.\nTypical values are 1, 2, 4, or 8.\n\n    const width: u16 px @ 0x181\n\nScreen width in \"natural\" orientation.\n\n    const height: u16 px @ 0x182\n\nScreen height in \"natural\" orientation.\n\n    rw width_major: bool @ 0x81\n\nIf true, consecutive pixels in the \"width\" direction are sent next to each other (this is typical for graphics cards).\nIf false, consecutive pixels in the \"height\" direction are sent next to each other.\nFor embedded screen controllers, this is typically true iff `width < height`\n(in other words, it's only true for portrait orientation screens).\nSome controllers may allow the user to change this (though the refresh order may not be optimal then).\nThis is independent of the `rotation` register.\n\n    rw up_sampling: u8 px @ 0x82\n\nEvery pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\nSome displays may allow changing this (which will also result in changes to `width` and `height`).\nTypical values are 1 and 2.\n\n    rw rotation: u16 ° @ 0x83\n\nPossible values are 0, 90, 180 and 270 only.\nWrite to this register do not affect `width` and `height` registers,\nand may be ignored by some screens.\n"},{"classIdentifier":434976332,"shortId":"iothub","source":"# Azure IoT Hub\n\n    identifier: 0x19ed364c\n    camel: iotHub\n    tags: iot\n\nSend messages, receive commands, and work with device twins in Azure IoT Hub.\n\n## Commands\n\n    command connect @ 0x80 {}\n\nTry connecting using currently set `connection_string`.\nThe service normally preiodically tries to connect automatically.\n\n    command disconnect @ 0x81 {}\n\nDisconnect from current Hub if any.\nThis disables auto-connect behavior, until a `connect` command is issued.\n\n    command send_string_msg @ 0x82 {\n        msg: string0\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n    report {}\n\nSends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.\n\n    command send_msg_ext @ 0x83 {}\n    report {\n        message: pipe_port\n    }\n\nSends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.\n\n    pipe command message {\n    segmented:\n        body: bytes\n    }\n\nPart of the body of the message.\n\n    meta pipe command properties @ 0x01 {\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n\nSet properties on the message. Can be repeated multiple times.\n\n    command subscribe @ 0x84 {\n        devicebound: pipe\n    }\n\nSubscribes for cloud to device messages, which will be sent over the specified pipe.\n\n    meta pipe report devicebound_properties @ 0x01 {\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n\nIf there are any properties, this meta-report is send one or more times.\nAll properties of a given message are always sent before the body.\n\n    pipe report devicebound {\n    multi-segmented:\n        body: bytes\n    }\n\nFor every message, the body is sent in one or more reports like this.\n\n    command get_twin @ 0x85 {\n        twin_result: pipe\n    }\n\nAsk for current device digital twin.\n\n    pipe report twin_json {\n    segmented:\n        json: bytes\n    }\n\nThe JSON-encoded twin. This is typically something like:\n`{ \"desired\": { \"foo\": 1, \"$version\": 12 }, \"reported\": { \"foo\": 1, \"bar\" 2, \"$version\": 123 } }`\n\n    meta pipe report twin_error @ 0x01 {\n        status_code: u32\n    }\n\nThis emitted if status is not 200.\n\n    command subscribe_twin @ 0x87 {\n        twin_updates: pipe\n    }\n\nSubscribe to updates to our twin.\n\n    pipe report twin_update_json {\n    multi-segmented:\n        json: bytes\n    }\n\nFirst, the current value of the twin is sent (this includes desired and reported properties).\nNext updates done by the back-end are streamed as they arrive (they only include the desired properties).\n\n    command patch_twin @ 0x86 {}\n    report {\n        patch_port: pipe_port\n    }\n\nStart twin update.\n\n    pipe command twin_patch_json {\n    segmented:\n        json: bytes\n    }\n\nThe JSON-encoded twin update. The pipe should be closed when the last packet is sent.\nYou just send updates for `reported` field, like this:\n`{ \"bar\": 3, \"baz\": null }` (skip `\"$version\"` and no `\"reported\": { ... }`).\n\n    command subscribe_method @ 0x88 {\n        method_call: pipe\n    }\n\nSubscribe to direct method calls.\n\n    pipe report method_call_body {\n    multi-segmented:\n        json: bytes\n    }\n\nThe method call body is sent using these packets.\nIf the body is empty, a single empty `method_call_body` is sent.\n\n    meta pipe report method_call @ 0x01 {\n        method_name: string0\n        request_id: string0\n    }\n\nThis is sent after the last part of the `method_call_body`.\n\n    command respond_to_method @ 0x89 {\n        status: u32\n        request_id: string0\n    }\n    report {\n        response_body: pipe_port\n    }\n\nRespond to a direct method call (`request_id` comes from `subscribe_method` pipe).\n\n    pipe command method_response {\n    segmented:\n        json: bytes\n    }\n\nThe pipe should be closed when the last packet of response body is sent.\n\n## Registers\n\n    ro connection_status: string @ 0x180\n\nReturns `\"ok\"` when connected, and an error description otherwise.\n\n    rw connection_string: string @ 0x80\n\nConnection string typically looks something like \n`HostName=my-iot-hub.azure-devices.net;DeviceId=my-dev-007;SharedAccessKey=xyz+base64key`.\nYou can get it in `Shared access policies -> iothubowner -> Connection string-primary key` in the Azure Portal.\nThis register is write-only.\nYou can use `hub_name` and `device_id` to check if connection string is set, but you cannot get the shared access key.\n\n    ro hub_name: string @ 0x181\n\nSomething like `my-iot-hub.azure-devices.net`; empty string when `connection_string` is not set.\n\n    ro device_id: string @ 0x182\n\nSomething like `my-dev-007`; empty string when `connection_string` is not set.\n\n\n## Events\n\n    event connected @ 0x80\n\nEmitted upon successful connection.\n\n    event connection_error @ 0x81 {\n        reason: string\n    }\n\nEmitted when connection was lost.\n\n    event devicebound_str @ 0x82 {\n        msg: string0\n    repeats:\n        property_name: string0\n        property_value: string0 \n    }\n\nThis event is emitted upon reception of a cloud to device message, that is a string\n(doesn't contain NUL bytes) and fits in a single event packet.\nFor reliable reception, use the `subscribe` command above.\n"},{"classIdentifier":449517712,"shortId":"joystick","source":"# Joystick\n\nA two axis directional joystick\n\n    identifier: 0x1acb1890\n    extends: _sensor\n    tags: button\n\n## Registers\n\n    ro direction @ reading {\n        x: i1.15 /\n        y: i1.15 /\n    }\n\nThe direction of the joystick measure in two direction.\nIf joystick is digital, then each direction will read as either `-0x8000`, `0x0`, or `0x7fff`.\n\n    enum Variant : u8 {\n        Thumb = 1\n        ArcadeBall = 2\n        ArcadeStick = 3\n    }\n    const variant?: Variant @ variant\n\nThe type of physical joystick.\n\n    const digital?: bool @ 0x180\n\nIndicates if the joystick is digital, typically made of switches.\n"},{"classIdentifier":506480888,"shortId":"led","source":"# LED\n\n    identifier: 0x1e3048f8\n    camel: led\n    tags: light\n\nA controller for 1 or more monochrome or RGB LEDs connected in parallel.\n\n## Registers\n\n    rw brightness: u0.16 / @ intensity\n\nSet the luminosity of the strip. The value is used to scale `value` in `steps` register.\nAt `0` the power to the strip is completely shut down.\n\n    rw animation @ 0x82 {\n        repetitions: u16\n        repeats:\n            hue: u8\n            saturation: u8\n            value: u8\n            duration: u8 8ms\n    }\n\nAnimations are described using pairs of color description and duration, \nsimilarly to the `status_light` register in the control service.\n`repetition` as ``0`` is considered infinite.\nFor monochrome LEDs, the hue and saturation are ignored.\nA specification `(red, 80ms), (blue, 40ms), (blue, 0ms), (yellow, 80ms)`\nmeans to start with red, cross-fade to blue over 80ms, stay blue for 40ms,\nchange to yellow, and cross-fade back to red in 80ms.\n\n    rw max_power? = 100: u16 mA @ max_power\n\nLimit the power drawn by the light-strip (and controller).\n\n    const led_count?: u16 @ 0x180\n\nIf known, specifies the number of LEDs in parallel on this device.\n\n    const wave_length?: u16 nm { typical_min=365, typical_max=885 } @ 0x181\n\nIf monochrome LED, specifies the wave length of the LED.\n\n    const luminous_intensity?: u16 mcd { typical_min=10, typical_max=5000 } @ 0x182\n\nThe luminous intensity of the LED, at full value, in micro candella.\n\n    enum Variant: u8 {\n        ThroughHole = 1\n        SMD = 2\n        Power = 3\n        Bead = 4\n    }\n    const variant?: Variant @ variant\n\nThe physical type of LED.\n"},{"classIdentifier":286070091,"shortId":"ledmatrix","source":"# LED Matrix\n\n    identifier: 0x110d154b\n    camel: ledMatrix\n    tags: display\n\nA rectangular monochrome LED matrix controller.\n\n## Registers\n\n    rw leds : bytes @ value\n    \nThe state of the screen where pixel on/off state is \nstored as a bit, column by column. The column should be byte aligned.\n\n    rw brightness: u0.8 / @ intensity\n    \nReads the general brightness of the LEDs. ``0`` when the screen is off.\n\n    const rows: u16 # @ 0x181\n    \nNumber of rows on the screen\n\n    const columns: u16 # @ 0x182\n    \nNumber of columns on the screen\n"},{"classIdentifier":309264608,"shortId":"ledpixel","source":"# LED Pixel\n\n    identifier: 0x126f00e0\n    camel: ledPixel\n    tags: light\n\nA controller for strips of individually controlled RGB LEDs.\n\n## Light programs\n\nRealistically, with 1 mbit Jacdac, we can transmit under 2k of data per animation frame (at 20fps).\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\ninstallations and it would completely clog the network.\n\nThus, light service defines a domain-specific language for describing light animations\nand efficiently transmitting them over wire.\n\nLight commands are not Jacdac commands.\nLight commands are efficiently encoded as sequences of bytes and typically sent as payload\nof `run` command.\n\nDefinitions:\n* `P` - position in the strip\n* `R` - number of repetitions of the command\n* `N` - number of pixels affected by the command\n* `C` - single color designation\n* `C+` - sequence of color designations\n\nUpdate modes:\n* `0` - replace\n* `1` - add RGB\n* `2` - subtract RGB\n* `3` - multiply RGB (by c/128); each pixel value will change by at least 1\n\nProgram commands:\n* `0xD0: setall C+` - set all pixels in current range to given color pattern\n* `0xD1: fade C+` - set pixels in current range to colors between colors in sequence\n* `0xD2: fadehsv C+` - similar to `fade()`, but colors are specified and faded in HSV\n* `0xD3: rotfwd K` - rotate (shift) pixels by `K` positions away from the connector\n* `0xD4: rotback K` - same, but towards the connector\n* `0xD5: show M=50` - send buffer to strip and wait `M` milliseconds\n* `0xD6: range P=0 N=length W=1 S=0` - range from pixel `P`, `N` pixels long\n  (currently unsupported: every `W` pixels skip `S` pixels)\n* `0xD7: mode K=0` - set update mode\n* `0xD8: tmpmode K=0` - set update mode for next command only\n* `0xCF: setone P C` - set one pixel at `P` (in current range) to given color\n* `mult V` - macro to multiply current range by given value (float)\n\nA number `k` is encoded as follows:\n* `0 <= k < 128` -> `k`\n* `128 <= k < 16383` -> `0x80 | (k >> 8), k & 0xff`\n* bigger and negative numbers are not supported\n\nThus, bytes `0xC0-0xFF` are free to use for commands.\n\nFormats:\n* `0xC1, R, G, B` - single color parameter\n* `0xC2, R0, G0, B0, R1, G1, B1` - two color parameter\n* `0xC3, R0, G0, B0, R1, G1, B1, R2, G2, B2` - three color parameter\n* `0xC0, N, R0, G0, B0, ..., R(N-1), G(N-1), B(N-1)` - `N` color parameter\n* `0xCF, <number>, R, G, B` - `set1` special format\n\nCommands are encoded as command byte, followed by parameters in the order\nfrom the command definition.\n\nThe `setone()` command has irregular encoding to save space - it is byte `0xCF` followed by encoded\nnumber, and followed by 3 bytes of color.\n\n## Registers\n\n    rw brightness = 0.05: u0.8 / @ intensity\n\nSet the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.\n\n    ro actual_brightness: u0.8 / @ 0x180\n\nThis is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.\n \n    enum LightType : u8 {\n        WS2812B_GRB = 0x00\n        APA102 = 0x10\n        SK9822 = 0x11\n    }\n    rw light_type: LightType @ 0x80\n\nSpecifies the type of light strip connected to controller.\nControllers which are sold with lights should default to the correct type\nand could not allow change.\n\n    rw num_pixels = 15: u16 @ 0x81\n\nSpecifies the number of pixels in the strip.\nControllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n\n    rw num_columns?: u16 @ 0x83\n\nIf the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n\n    rw max_power = 200: u16 mA @ max_power\n\nLimit the power drawn by the light-strip (and controller).\n\n    const max_pixels: u16 @ 0x181\n\nThe maximum supported number of pixels.\nAll writes to `num_pixels` are clamped to `max_pixels`.\n\n    rw num_repeats = 1: u16 @ 0x82\n\nHow many times to repeat the program passed in `run` command.\nShould be set before the `run` command.\nSetting to `0` means to repeat forever.\n\n    enum Variant: u8 {\n        Strip = 1,\n        Ring = 2,\n        Stick = 3,\n        Jewel = 4,\n        Matrix = 5\n    }\n    const variant: Variant @ variant\n\nSpecifies the shape of the light strip.\n\n## Commands\n\n    command run @ 0x81 {\n        program: bytes\n    }\n\nRun the given light \"program\". See service description for details.\n"},{"classIdentifier":400333340,"shortId":"lightlevel","source":"# Light level\n\nA sensor that measures luminosity level.\n\n    identifier: 0x17dc9a1c\n    extends: _sensor\n    tags: imaging\n\n## Registers\n\n    ro light_level: u0.16 / @ reading\n\nDetect light level\n\n    enum Variant: u8 {\n        PhotoResistor = 1,\n        LEDMatrix = 2,\n        Ambient = 3\n    }\n    const variant?: Variant @ variant\n\nThe type of physical sensor.\n"},{"classIdentifier":316415946,"shortId":"logger","source":"# Logger\n\n    identifier: 0x12dc1fca\n\nA service which can report messages to the bus.\n\n## Registers\n\n    enum Priority : u8 {\n        Debug = 0,\n        Log = 1,\n        Warning = 2,\n        Error = 3,\n        Silent = 4\n    }\n    rw min_priority = 1: Priority @ 0x80\n\nMessages with level lower than this won't be emitted. The default setting may vary.\nLoggers should revert this to their default setting if the register has not been\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\nThus, clients should write this register every 1000ms and ignore messages which are\ntoo verbose for them.\n\n## Commands\n\n    report debug @ 0x80 {\n        message: string\n    }\n    report log @ 0x81 {\n        message: string\n    }\n    report warn @ 0x82 {\n        message: string\n    }\n    report error @ 0x83 {\n        message: string\n    }\n\nReport a message.\n"},{"classIdentifier":318935176,"shortId":"magnetomer","source":"# Magnetometer\n\n    identifier: 0x13029088\n    extends: _sensor\n\nA 3-axis magnetometer.\n\n## Registers\n\n    ro forces @ reading {\n        x: i32 nT\n        y: i32 nT\n        z: i32 nT\n    }\n\nIndicates the current magnetic field on magnetometer.\nFor reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).\n\n    ro forces_error? @ reading_error {\n        x: i32 nT\n        y: i32 nT\n        z: i32 nT\n    }\n\nError on the readings.\n\n## Commands\n\n    command calibrate @ calibrate { }\n\nForces a calibration sequence where the user/device\nmight have to rotate to be calibrated.\n"},{"classIdentifier":319172040,"shortId":"matrixkeypad","source":"# Matrix Keypad\n\n    identifier: 0x13062dc8\n    extends: _sensor\n    tags: button\n\nA matrix of buttons connected as a keypad\n\n## Registers\n\n    ro pressed @ reading {\n        repeats:\n          index: u8\n    }\n\nThe coordinate of the button currently pressed. Keys are zero-indexed from left to right, top to bottom:\n``row = index / columns``, ``column = index % columns``.\n\n    const rows: u8 @ 0x180\n\nNumber of rows in the matrix\n\n    const columns: u8 @ 0x181\n\nNumber of columns in the matrix\n\n    const labels? @ 0x182 {\n        repeats:\n            label: string0\n    }\n\nThe characters printed on the keys if any, in indexing sequence.\n\n    enum Variant: u8 {\n        Membrane = 1\n        Keyboard = 2\n        Elastomer = 3\n        ElastomerLEDPixel = 4\n    }\n    const variant?: Variant @ variant\n\nThe type of physical keypad. If the variant is ``ElastomerLEDPixel``\nand the next service on the device is a ``LEDPixel`` service, it is considered\nas the service controlling the LED pixel on the keypad.\n## Events\n\n    event down: u8 @ active\n\nEmitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.\n\n    event up: u8 @ inactive\n\nEmitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.\n\n    event click: u8 @ 0x80\n\nEmitted together with `up` when the press time was not longer than 500ms.\n\n    event long_click: u8 @ 0x81\n\nEmitted together with `up` when the press time was more than 500ms.\n"},{"classIdentifier":289254534,"shortId":"microphone","source":"# Microphone\n\n    identifier: 0x113dac86\n    tags: sound\n\nA single-channel microphone.\n\n## Commands\n\n    command sample @ 0x81 {\n        samples: pipe\n        num_samples: u32\n    }\n\nThe samples will be streamed back over the `samples` pipe.\nIf `num_samples` is `0`, streaming will only stop when the pipe is closed.\nOtherwise the specified number of samples is streamed.\nSamples are sent as `i16`.\n\n## Registers\n\n    rw sampling_period: u32 us @ 0x80\n\nGet or set microphone sampling period.\nSampling rate is `1_000_000 / sampling_period Hz`.\n\n"},{"classIdentifier":444894423,"shortId":"midioutput","source":"# MIDI output\n\n    identifier: 0x1a848cd7\n    camel: midiOutput\n    tags: sound\n\nA MIDI output device.\n\n## Registers\n\n    rw enabled: bool @ intensity\n\nOpens or closes the port to the MIDI device\n\n## Commands\n\n    command clear @ 0x80 { }\n\nClears any pending send data that has not yet been sent from the MIDIOutput's queue.\n\n    command send @ 0x81 {\n        data: bytes\n    }\n\nEnqueues the message to be sent to the corresponding MIDI port\n "},{"classIdentifier":336566904,"shortId":"modelrunner","source":"# Model Runner\n\n    identifier: 0x140f9a78\n\nRuns machine learning models.\n\nOnly models with a single input tensor and a single output tensor are supported at the moment.\nInput is provided by Sensor Aggregator service on the same device.\nMultiple instances of this service may be present, if more than one model format is supported by a device.\n\n## Commands\n\n    command set_model @ 0x80 {\n        model_size: u32 B\n    }\n    report {\n        model_port: pipe_port\n    }\n\nOpen pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.\n\n    command predict @ 0x81 {\n        outputs: pipe\n    }\n    report {\n        inputs: pipe_port\n    }\n\nOpen channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.\n\n## Registers\n\n    rw auto_invoke_every: u16 @ 0x80\n\nWhen register contains `N > 0`, run the model automatically every time new `N` samples are collected.\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\nThe `outputs` register will stream its value after each run.\nThis register is not stored in flash.\n\n    ro outputs @ reading {\n    repeats:\n        output: f32\n    }\n\nResults of last model invocation as `float32` array.\n\n    ro input_shape @ 0x180 {\n    repeats:\n        dimension: u16\n    }\n\nThe shape of the input tensor.\n\n    ro output_shape @ 0x181 {\n    repeats:\n        dimension: u16\n    }\n\nThe shape of the output tensor.\n\n    ro last_run_time: u32 us @ 0x182\n\nThe time consumed in last model execution.\n\n    ro allocated_arena_size: u32 B @ 0x183\n\nNumber of RAM bytes allocated for model execution.\n\n    ro model_size: u32 B @ 0x184\n\nThe size of the model in bytes.\n\n    ro last_error: string @ 0x185\n\nTextual description of last error when running or loading model (if any).\n\n    enum ModelFormat: u32 {\n        TFLite = 0x334c4654,\n        ML4F = 0x30470f62,\n        EdgeImpulseCompiled = 0x30564945,\n    }\n    const format: ModelFormat @ 0x186\n\nThe type of ML models supported by this service.\n`TFLite` is flatbuffer `.tflite` file.\n`ML4F` is compiled machine code model for Cortex-M4F.\nThe format is typically present as first or second little endian word of model file.\n\n    const format_version: u32 @ 0x187\n\nA version number for the format.\n\n    const parallel?: bool @ 0x188\n\nIf present and true this service can run models independently of other\ninstances of this service on the device.\n"},{"classIdentifier":293185353,"shortId":"motion","source":"# Motion\n\nA sensor, typically PIR, that detects object motion within a certain range\n\n    identifier: 0x1179a749\n    extends: _sensor\n    tags: movement\n\n## Registers\n\n    ro moving: bool { preferred_interval=1000 } @ reading\n\nReports is movement is currently detected by the sensor.\n\n    const max_distance?: u16.16 m @ 0x180\n\nMaximum distance where objects can be detected.\n\n    const angle?: u16 ° @ 0x181\n\nOpening of the field of view\n\n    enum Variant: u8 {\n      PIR = 1\n    }\n    const variant?: Variant @ variant\n\nType of physical sensor\n\n## Events\n\n   event movement @ active { }\n\nA movement was detected."},{"classIdentifier":385895640,"shortId":"motor","source":"# Motor\n\n    identifier: 0x17004cd8\n\nA bi-directional DC motor.\n\n## Registers\n\n    rw duty: i1.15 / @ value\n\nPWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\nPositive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0`` \nwhile ``enabled`` acts as brake.\n\n    rw enabled: bool @ intensity\n\nTurn the power to the motor on/off.\n\n    const load_torque?: u16.16 kg/cm @ 0x180\n\nTorque required to produce the rated power of an electrical motor at load speed.\n\n    const load_speed?: u16.16 rpm @ 0x181\n\nRevolutions per minute of the motor under full load."},{"classIdentifier":416636459,"shortId":"multitouch","source":"# Multitouch\n\n    identifier: 0x18d55e2b\n    extends: _sensor\n    tags: button\n\nA capacitive touch sensor with multiple inputs.\n\n## Registers\n\n    ro capacity @ reading {\n    repeats:\n        capacitance: i32\n    }\n\nCapacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\nno touch, wheres a value of around `100` or more indicates touch.\nIt's best to ignore this (unless debugging), and use events.\n\n## Events\n\nMost events include the channel number of the input.\n\n    event touch @ active {\n        channel: u32\n    }\n\nEmitted when an input is touched.\n\n    event release @ inactive {\n        channel: u32\n    }\n\nEmitted when an input is no longer touched.\n\n    event tap @ 0x80 {\n        channel: u32\n    }\n\nEmitted when an input is briefly touched. TODO Not implemented.\n\n    event long_press @ 0x81 {\n        channel: u32\n    }\n\nEmitted when an input is touched for longer than 500ms. TODO Not implemented.\n\n    event swipe_pos @ 0x90\n\nEmitted when input channels are successively touched in order of increasing channel numbers.\n\n    event swipe_neg @ 0x91\n\nEmitted when input channels are successively touched in order of decreasing channel numbers.\n"},{"classIdentifier":522667846,"shortId":"potentiometer","source":"# Potentiometer\n\n    identifier: 0x1f274746\n    extends: _sensor\n    tags: slider\n\nA slider or rotary potentiometer.\n\n## Registers\n\n    ro position: u0.16 / @ reading\n\nThe relative position of the slider between `0` and `1`.\n\n    enum Variant: u8 {\n        Slider = 1,\n        Rotary = 2,\n    }\n    const variant: Variant @ variant\n\nSpecifies the physical layout of the potentiometer."},{"classIdentifier":530893146,"shortId":"power","source":"# Power\n\n    identifier: 0x1fa4c95a\n\nA power-provider service.\n\n## Power negotiation protocol\n\nThe purpose of the power negotiation is to ensure that there is no more than ~500mA\ndelivered to the power rail.\nThis is realized by limiting the number of enabled power provider services to one.\n\nNote, that it's also possible to have low-current power providers,\nwhich are limited to 100mA and do not run a power provider service.\nThese are **not** accounted for in the power negotiation protocol.\n\nThe protocol is based on `active` reports, which are always sent \nafter general device announce packets, in the same frame.\nThis makes it simpler for other power services to parse them.\n\nThe `active` reports contain device priority, which is formed from the maximum available current\nand remaining battery capacity.\n\nAfter queuing an announce with `active` report, the service enters a grace period\nuntil the report has been sent on the wire.\nDuring the grace period incoming `active` reports are ignored.\n\n* Upon reset, a power service enables itself, and then only after 0-300ms (random)\n  send the first device announce packet directly followed by `active` report\n* Every enabled power service emits power `active` reports with its announce packets,\n  which are sent every 400-600ms (random; first few announce packets can be even sent more often)\n* If an enabled power service sees a power `active` report from somebody else of higher or equal priority,\n  it disables itself (unless in grace period)\n* If a disabled power service sees no power `active` report for more than ~1200ms, it enables itself\n  (this is when the previous power source is unplugged or otherwise malfunctions)\n* Power services keep track of the current provider\n  (device ID from the most recent `active` report, either incoming or outgoing).\n  If the current provider has not changed for at least 50-60s (random),\n  and its last priority is lower or equal to the current service priority,\n  then just before the next announce period, the service enables itself\n  (thus also resetting the 50-60s timer).\n\n### Rationale for the grace period\n\nConsider the following scenario:\n* device A queues `active` report for sending\n* A receives external `active` packet from B (thus disabling A)\n* the A `active` report is sent from the queue (thus eventually disabling B)\nTo avoid that, we make sure that at the precise instant when `active` report is sent,\nthe device is enabled (and thus will stay enabled until another `active` report arrives).\nThis could be achieved by inspecting the enable bit, aftering acquiring the line\nand before starting UART transmission, however that would require breaking abstraction layers.\nSo instead, we never disable the service, while the `active` packet is queued.\nThis may lead to delays in disabling power services, but these should be limited due to the\nrandom nature of the announce packet spacing.\n\n### Rationale for timings\n\nThe initial 0-300ms delay is set to spread out the announce periods of power services,\nto minimize collisions.\nThe announce periods are randomized 400-600ms, instead of a fixed 500ms used for regular\nservices, for the same reason.\n\nThe 1200ms period is set so that droping two announce packets in a row\nfrom the current provider will not cause power switch, while missing 3 will.\n\nThe 50-60s power switch period is arbitrary, but chosen to limit amount of switching between supplies,\nwhile keeping it short enough for user to notice any problems such switching may cause.\n\n## Registers\n\n    rw enabled = 1: bool @ intensity\n\nTurn the power to the bus on/off.\n\n    rw max_power = 500: u16 mA {typical_max = 500} @ max_power\n\nLimit the power provided by the service. The actual maximum limit will depend on hardware.\nThis field may be read-only in some implementations - you should read it back after setting.\n\n    ro overload: bool @ 0x181\n\nIndicates whether the power has been shut down due to overdraw.\n\n    ro current_draw?: u16 mA @ reading\n\nPresent current draw from the bus.\n\n    ro battery_voltage?: u16 mV {typical_min = 4500, typical_max = 5500} @ 0x180\n\nVoltage on input.\n\n    ro battery_charge?: u0.16 / @ 0x182\n\nFraction of charge in the battery.\n\n    const battery_capacity?: u32 mWh @ 0x183\n\nEnergy that can be delivered to the bus when battery is fully charged.\nThis excludes conversion overheads if any.\n\n    rw keep_on_pulse_duration = 600: u16 ms @ 0x80\n    rw keep_on_pulse_period = 20000: u16 ms @ 0x81\n\nMany USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n\n    rw priority_offset: i32 @ 0x82\n\nThis value is added to `priority` of `active` reports, thus modifying amount of load-sharing\nbetween different supplies.\nThe `priority` is clamped to `u32` range when included in `active` reports.\n\n## Commands\n\n    report active @ 0x80 {\n        priority: u32\n    }\n\nEmitted with announce packets when the service is running.\nThe `priority` should be computed as\n`(((max_power >> 5) << 24) | remaining_capacity) + priority_offset`\nwhere the `remaining_capacity` is `(battery_charge * battery_capacity) >> 16`,\nor one of the special constants\n`0xe00000` when the remaining capacity is unknown,\nor `0xf00000` when the capacity is considered infinite (eg., wall charger).\nThe `priority` is clamped to `u32` range after computation.\nIn cases where battery capacity is unknown but the charge percentage can be estimated,\nit's recommended to assume a fixed (typical) battery capacity for priority purposes,\nrather than using `0xe00000`, as this will have a better load-sharing characteristic,\nespecially if several power providers of the same type are used.\n"},{"classIdentifier":382158442,"shortId":"prototest","source":"# Protocol Test\n\n    identifier: 0x16c7466a\n    camel: protoTest\n\nThis is test service to validate the protocol packet transmissions between the browser and a MCU.\nUse this page if you are porting Jacdac to a new platform.\n\n### Test procedure\n\nFor each ``rw`` registers, set a random value ``x``\n  * read ``rw`` and check value is equal to ``x``\n  * read ``ro`` and check value is equal to ``x``\n  * listen to ``e`` event and check that data is equal to ``x``\n  * call ``c`` command with new random value ``y``\n  * read ``rw`` and check value is equal to ``y``\n  * do all the above steps with acks\n\nFor each ``rw`` registers, there shall also\nbe an ``event`` and a ``command``. The event\nshould get raised when the value changes;\nand the command should set the value.\n  \n## Registers\n\nEvery ``rw`` register has a corresponding ``ro`` regisrer\nand a corresponding ``set_...`` command to also set the value.\n\n    rw rw_bool : bool @ 0x081\n\nA read write bool register.\n\n    ro ro_bool : bool @ 0x181\n\nA read only bool register. Mirrors rw_bool.\n\n    rw rw_u32 : u32 @ 0x082\n\nA read write u32 register.\n\n    ro ro_u32 : u32 @ 0x182\n\nA read only u32 register.. Mirrors rw_u32.\n\n    rw rw_i32 : i32 @ 0x083\n\nA read write i32 register.\n\n    ro ro_i32 : i32 @ 0x183\n\nA read only i32 register.. Mirrors rw_i32.\n\n    rw rw_string : string @ 0x084\n\nA read write string register.\n\n    ro ro_string : string @ 0x184\n\nA read only string register. Mirrors rw_string.\n\n    rw rw_bytes : bytes @ 0x085\n\nA read write string register.\n\n    ro ro_bytes : bytes @ 0x185\n\nA read only string register. Mirrors ro_bytes.\n\n    rw rw_i8_u8_u16_i32 @ 0x86 {\n        i8: i8\n        u8: u8\n        u16: u16\n        i32: i32\n    }\n\nA read write i8, u8, u16, i32 register.\n\n    ro ro_i8_u8_u16_i32 @ 0x186 {\n        i8: i8\n        u8: u8\n        u16: u16\n        i32: i32\n    }\n\nA read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.\n\n    rw rw_u8_string @ 0x87 {\n        u8: u8\n        string: string\n    }\n\nA read write u8, string register.\n\n    ro ro_u8_string @ 0x187 {\n        u8: u8\n        string: string\n    }\n\nA read only u8, string register.. Mirrors rw_u8_string.\n\n## Events\n\n    event e_bool @ 0x81 { \n        bool: bool \n    }\n\nAn event raised when rw_bool is modified\n\n    event e_u32 @ 0x82 { \n        u32: u32 \n    }\n\nAn event raised when rw_u32 is modified\n\n    event e_i32 @ 0x83 { \n        i32: i32 \n    }\n\nAn event raised when rw_i32 is modified\n\n    event e_string @ 0x84 { \n        string: string \n    }\n\nAn event raised when rw_string is modified\n\n    event e_bytes @ 0x85 { \n        bytes: bytes \n    }\n\nAn event raised when rw_bytes is modified\n\n    event e_i8_u8_u16_i32 @ 0x86 { \n        i8: i8\n        u8: u8\n        u16: u16\n        i32: i32\n    }\n\nAn event raised when rw_i8_u8_u16_i32 is modified\n\n    event e_u8_string @ 0x87 { \n        u8: u8\n        string: string\n    }\n\nAn event raised when rw_u8_string is modified\n\n## Commands\n\n    command c_bool @ 0x81 {\n        bool: bool\n    }\n\nA command to set rw_bool.\n\n    command c_u32 @ 0x82 {\n        u32: u32\n    }\n\nA command to set rw_u32.\n\n    command c_i32 @ 0x83 {\n        i32: i32\n    }\n\nA command to set rw_i32.\n\n    command c_string @ 0x84 {\n        string: string\n    }\n\nA command to set rw_string.\n\n    command c_bytes @ 0x85 {\n        bytes: bytes\n    }\n\nA command to set rw_string.\n\n    command c_i8_u8_u16_i32 @ 0x86 {\n        i8: i8\n        u8: u8\n        u16: u16\n        i32: i32\n    }\n\nA command to set rw_bytes.\n\n    command c_u8_string @ 0x87 {\n        u8: u8\n        string: string\n    }\n\nA command to set rw_u8_string.\n\n    command c_report_pipe @ 0x90 {\n        p_bytes: pipe\n    }\n    pipe report p_bytes {\n        byte: u8\n    }\n\nA command to read the content of rw_bytes, byte per byte, as a pipe."},{"classIdentifier":280710838,"shortId":"pulseoximeter","source":"#  Pulse Oximeter\n\n    identifier: 0x10bb4eb6\n    extends: _sensor\n    tags: biometric\n\nA sensor approximating the oxygen level. \n\n**Jacdac is not suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**\n\n## Registers\n\n    ro oxygen: u8.8 % { typical_min=80, typical_max=100 } @ reading\n\nThe estimated oxygen level in blood.\n\n    ro oxygen_error?: u8.8 % @ reading_error\n\nThe estimated error on the reported sensor data.\n"},{"classIdentifier":326323349,"shortId":"raingauge","source":"# Rain gauge\n\n    identifier: 0x13734c95\n    extends: _sensor\n    tags: environment\n\nMeasures the amount of liquid precipitation over an area in a predefined period of time.\n\n## Registers\n\n    ro precipitation: u16.16 mm { preferred_interval=60000 } @ reading\n\nTotal precipitation recorded so far.\n\n    const precipitation_precision?: u16.16 mm @ reading_resolution\n\nTypically the amount of rain needed for tipping the bucket.\n"},{"classIdentifier":445323816,"shortId":"realtimeclock","source":"# Real time clock\n\n    identifier: 0x1a8b1a28\n    extends: _sensor\n\nReal time clock to support collecting data with precise time stamps.\n\n## Registers\n\n    ro local_time @ reading {\n        year: u16 { preferred_interval=1000 }\n        month: u8 { absolute_min=1, absolute_max=12 }\n        day_of_month: u8 { absolute_min=1, absolute_max=31 }\n        day_of_week: u8 { absolute_min=1, absolute_max=7 }\n        hour: u8 { absolute_min=0, absolute_max=23 }\n        min: u8 { absolute_min=0, absolute_max=59 }\n        sec: u8 { absolute_min=0, absolute_max=60 }\n    }\n\nCurrent time in 24h representation. \n* ``day_of_month`` is day of the month, starting at ``1``\n* ``day_of_week`` is day of the week, starting at ``1`` as monday\nDefault streaming period is 1 second.\n\n    ro error?: u16.16 s @ 0x180\n\nTime drift since the last call to the ``set_time`` command.\n\n    const precision?: u16.16 ppm @ 0x180\n\nError on the clock, in parts per million of seconds.\n\n    enum Variant: u8 {\n        Computer = 1\n        Crystal = 2        \n        Cuckoo = 3\n    }\n    const variant?: Variant @ variant\n\nThe type of physical clock used by the sensor.\n\n## Commands\n\n    command set_time @ 0x80 {\n        year: u16\n        month: u8 { absolute_min=1, absolute_max=12 }\n        day_of_month: u8 { absolute_min=1, absolute_max=31 }\n        day_of_week: u8 { absolute_min=1, absolute_max=7 }\n        hour: u8 { absolute_min=0, absolute_max=23 }\n        min: u8 { absolute_min=0, absolute_max=59 }\n        sec: u8 { absolute_min=0, absolute_max=60 }\n    }\n\nSets the current time and resets the error.\n"},{"classIdentifier":309087410,"shortId":"reflectedlight","source":"# Reflected light\n\n    identifier: 0x126c4cb2\n    extends: _sensor\n    tags: imaging\n\nA sensor that detects light and dark surfaces, commonly used for line following robots.\n\n## Registers\n\n    ro brightness: u0.16 / @ reading\n\nReports the reflected brightness. It may be a digital value or, for some sensor, analog value.\n\n    enum Variant: u8 {\n        InfraredDigital = 1,\n        InfraredAnalog = 2\n    }\n    const variant?: Variant @ variant\n\nType of physical sensor used\n\n## Events\n\n    event dark @ inactive {}\n\nThe sensor detected a transition from light to dark\n\n    event light @ active {}\n\nThe sensor detected a transition from dark to light\n"},{"classIdentifier":406840918,"shortId":"relay","source":"# Relay\n\n    identifier: 0x183fe656\n\nA switching relay.\n\n## Registers\n\n    rw closed: bool @ intensity\n\nIndicates whether the relay circuit is currently on (closed) or off (closed).\n\n    enum Variant: u8 {\n        Electromechanical = 1,\n        SolidState = 2,\n        Reed = 3\n    }\n    const variant?: Variant @ variant\n\nDescribes the type of relay used.\n\n    const max_switching_current?: u32 mA @ 0x180\n\nMaximum switching current for a resistive load.\n\n## Events\n\n    event on @ active\n\nEmitted when relay goes from ``off`` to ``on`` state.\n\n    event off @ inactive\n\nEmitted when relay goes from ``on`` to ``off`` state.\n"},{"classIdentifier":394916002,"shortId":"rng","source":"# Random Number Generator\n\n    identifier: 0x1789f0a2\n    camel: rng\n\nGenerates random numbers using entropy sourced from physical processes.\n\nThis typically uses a cryptographical pseudo-random number generator (for example [Fortuna](https://en.wikipedia.org/wiki/Fortuna_(PRNG))),\nwhich is periodically re-seeded with entropy coming from some hardware source.\n\n## Registers\n\n    ro random: bytes @ reading\n\nA register that returns a 64 bytes random buffer on every request.\nThis never blocks for a long time. If you need additional random bytes, keep querying the register.\n\n    enum Variant: u8 {\n         Quantum = 1\n         ADCNoise = 2\n         WebCrypto = 3\n    }\n    const variant?: Variant @ variant\n\nThe type of algorithm/technique used to generate the number.\n`Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\n`ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\n`WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.\n"},{"classIdentifier":508264038,"shortId":"rolemanager","source":"# Role Manager\n\n    identifier: 0x1e4b7e66\n\nAssign roles to services on the Jacdac bus.\n\nInternally, the role manager stores a mapping from from `(device_id, service_idx)` to role name.\nUsers refer to services by using role names (eg., they instantiate an accelerometer client with a given role name).\nEach client has a role, and roles are unique to clients\n(ie., one should not have both a gyro and accelerometer service with role `left_leg`).\n\nRole names can be hierarchical, using slash character as a separator.\nExamples: `left_leg/acc`, `left_leg/gyro`, `right_leg/acc`.\nIf two roles share the prefix before first slash, it should be used as a hint that the services\nshould be co-located on a single device\n(eg., here the `left_leg` \"location\" is expected to have both an accelerometer and a gyro service on a single device).\n\n## Registers\n\n    rw auto_bind = 1: bool @ 0x80\n\nNormally, if some roles are unfilled, and there are idle services that can fulfill them,\nthe brain device will assign roles (bind) automatically.\nSuch automatic assignment happens every second or so, and is trying to be smart about \nco-locating roles that share \"host\" (part before first slash),\nas well as reasonably stable assignments.\nOnce user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.\n\n    ro all_roles_allocated: bool @ 0x181\n\nIndicates if all required roles have been allocated to devices.\n\n## Commands\n\n    command get_role @ 0x80 {\n        device_id: devid\n        service_idx: u8\n    }\n    report {\n        device_id: devid\n        service_idx: u8\n        role: string\n    }\n\nGet the role corresponding to given device identifer. Returns empty string if unset.\n\n    command set_role @ 0x81 {\n        device_id: devid\n        service_idx: u8\n        role: string\n    }\n\nSet role. Can set to empty to remove role binding.\n\n    command clear_all_roles @ 0x84 {}\n\nRemove all role bindings.\n\n    command list_stored_roles @ 0x82 {\n        stored_roles: pipe\n    }\n    pipe report stored_roles {\n        device_id: devid\n        service_idx: u8\n        role: string\n    }\n\nReturn all roles stored internally.\n\n    command list_required_roles @ 0x83 {\n        required_roles: pipe\n    }\n    pipe report required_roles {\n        device_id: devid\n        service_class: u32\n        service_idx: u8\n        role: string\n    }\n\nList all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.\n\n## Events\n\n    event change @ change { }\n\nEmit notifying that the internal state of the service changed."},{"classIdentifier":284830153,"shortId":"rotaryencoder","source":"# Rotary encoder\n\n    identifier: 0x10fa29c9\n    extends: _sensor\n    tags: slider\n\nAn incremental rotary encoder - converts angular motion of a shaft to digital signal.\n\n## Registers\n\n    ro position: i32 # @ reading\n\nUpon device reset starts at `0` (regardless of the shaft position).\nIncreases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.\n\n    const clicks_per_turn?: u16 # @ 0x180\n\nThis specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24."},{"classIdentifier":496034245,"shortId":"sensoraggregator","source":"# Sensor Aggregator\n\n    identifier: 0x1d90e1c5\n\nAggregate data from multiple sensors into a single stream\n(often used as input to machine learning models on the same device, see model runner service).\n\n## Registers\n\n    enum SampleType : u8 {\n        U8 = 0x08\n        I8 = 0x88\n        U16 = 0x10\n        I16 = 0x90\n        U32 = 0x20\n        I32 = 0xA0\n    }\n    rw inputs @ 0x80 {\n        sampling_interval: u16 ms\n        samples_in_window: u16\n        reserved: u32\n    repeats:\n        device_id: devid\n        service_class: u32\n        service_num: u8\n        sample_size: u8 B\n        sample_type: SampleType\n        sample_shift: i8\n    }\n\nSet automatic input collection.\nThese settings are stored in flash.\n\n    ro num_samples: u32 @ 0x180\n\nNumber of input samples collected so far.\n\n    ro sample_size: u8 B @ 0x181\n\nSize of a single sample.\n\n    rw streaming_samples: u32 @ 0x81\n\nWhen set to `N`, will stream `N` samples as `current_sample` reading.\n\n    ro current_sample: bytes @ reading\n\nLast collected sample.\n"},{"classIdentifier":318542083,"shortId":"servo","source":"# Servo\n\n    identifier: 0x12fc9103\n\nServo is a small motor with arm that can be pointing at a specific direction.\n\nThe `min/max_angle/pulse` may be read-only if the servo is permanently affixed to its Jacdac controller.\n\n## Registers\n\n    rw angle: i16.16 ° { typical_min=-90, typical_max=90 } @ value\n\nSpecifies the angle of the arm.\n\n    rw enabled: bool @ intensity\n\nTurn the power to the servo on/off.\n\n    rw offset: i16.16 ° @ 0x81\n\nCorrection applied to the angle to account for the servo arm drift.\n\n    rw min_angle = -90: i16.16 ° @ 0x82\n\nLowest angle that can be set.\n\n    rw min_pulse = 500: u16 us @ 0x83\n\nThe length of pulse corresponding to lowest angle.\n\n    rw max_angle = 90: i16.16 ° @ 0x84\n\nHighest angle that can be set.\n\n    rw max_pulse = 2500: u16 us @ 0x85\n\nThe length of pulse corresponding to highest angle.\n\n    const stall_torque?: u16.16 kg/cm @ 0x180\n\nThe servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.\n\n    const response_speed?: u16.16 s/60° @ 0x181\n\nTime to move 60°.\n"},{"classIdentifier":285727818,"shortId":"settings","source":"# Settings\n\n    identifier: 0x1107dc4a\n    camel: settings\n\nNon-volatile key-value storage interface for storing settings.\n\n## Secrets\n\nEntries with keys starting with `$` are considered secret.\nThey can be written normally, but they read as a single `0` byte,\nunless they are empty, in which case the value returned is also empty.\nThese are typically used by other services on the same device.\n\n## Commands\n\n    command get @ 0x80 {\n        key: string\n    }\n    report {\n        key: string0\n        value: bytes\n    }\n\nGet the value of given setting. If no such entry exists, the value returned is empty.\n\n    command set @ 0x81 {\n        key: string0\n        value: bytes\n    }\n\nSet the value of a given setting.\n\n    command delete @ 0x84 {\n        key: string\n    }\n\nDelete a given setting.\n\n    command list_keys @ 0x82 {\n        results: pipe\n    }\n    pipe report listed_key {\n        key: string\n    }\n\nReturn keys of all settings.\n\n    command list @ 0x83 {\n        results: pipe\n    }\n    pipe report listed_entry {\n        key: string0\n        value: bytes\n    }\n\nReturn keys and values of all settings.\n\n    command clear @ 0x85 { }\n\nClears all keys.\n\n## Events\n\n    event change @ change\n\nNotifies that some setting have been modified.\n"},{"classIdentifier":425810167,"shortId":"sevensegmentdisplay","source":"#  7-segment display\n\n    identifier: 0x196158f7\n    camel:sevenSegmentDisplay\n    tags: display\n\nA 7-segment numeric display, with one or more digits.\n\n## Registers\n\n    rw digits: bytes @ value\n\nEach byte encodes the display status of a digit using, \nwhere bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\nIf incoming ``digits`` data is smaller than `digit_count`, the remaining digits will be cleared.\nThus, sending an empty ``digits`` payload clears the screen.\n\n```text\n - A -\n G   B\n |   |\n - F -\n |   |   -\n E   C  |DP|\n - D -   -\n```\n\n    rw brightness: u0.16 / @ intensity\n\nControls the brightness of the LEDs. ``0`` means off.\n\n    rw double_dots?: bool @ 0x80\n\nTurn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\nIf the column LEDs is not supported, the value remains false.\n\n    const digit_count: u8 @ 0x180\n\nThe number of digits available on the display.\n\n    const decimal_point: bool @ 0x181\n\nTrue if decimal points are available (on all digits).\n"},{"classIdentifier":491430835,"shortId":"soilmoisture","source":"# Soil moisture\n\n    identifier: 0x1d4aa3b3\n    extends: _sensor\n    tags: environment\n\nA soil moisture sensor.\n\n## Registers\n\n    ro moisture: u0.16 / { preferred_interval=1000 } @ reading\n\nIndicates the wetness of the soil, from ``dry`` to ``wet``.\n\n    enum Variant: u8 {\n         Resistive = 1\n         Capacitive = 2\n    }\n    const variant?: Variant @ variant\n\nDescribe the type of physical sensor.\n"},{"classIdentifier":387392458,"shortId":"solenoid","source":"# Solenoid\n\n    identifier: 0x171723ca\n\nA push-pull solenoid is a type of relay that pulls a coil when activated.\n\n## Registers\n\n    rw pulled: bool @ intensity\n\nIndicates whether the solenoid is energized and pulled (on) or pushed (off).\n\n    enum Variant: u8 {\n        PushPull = 1,\n        Valve = 2,\n        Latch = 3\n    }\n    const variant?: Variant @ variant\n\nDescribes the type of solenoid used.\n"},{"classIdentifier":346888797,"shortId":"soundlevel","source":"#  Sound level\n\n     identifier: 0x14ad1a5d\n     extends: _sensor\n     tags: sound\n\nA sound level detector sensor, gives a relative indication of the sound level.\n\n## Registers\n\n    ro sound_level: u0.16 / @ reading\n\nThe sound level detected by the microphone\n\n    rw enabled: bool @ intensity\n\nTurn on or off the microphone.\n\n    rw min_decibels?: i16 dB @ 0x81\n\nThe minimum power value considered by the sensor.\nIf both ``min_decibels`` and ``max_decibels`` are supported,\nthe volume in deciment can be linearly interpolated between\n``[min_decibels, max_decibels]``.\n\n    rw max_decibels?: i16 dB @ 0x82\n\nThe maximum power value considered by the sensor.\nIf both ``min_decibels`` and ``max_decibels`` are supported,\nthe volume in deciment can be linearly interpolated between\n``[min_decibels, max_decibels]``.\n\n    rw loud_threshold: u0.16 / @ low_threshold\n\nThe sound level to trigger a loud event.\n\n    rw quiet_threshold: u0.16 / @ high_threshold\n\nThe sound level to trigger a quite event.\n\n## Events\n\n    event loud @ high {}\n\nRaised when a loud sound is detected\n\n    event quiet @ low {}\n\nRaised when a period of quietness is detected\n"},{"classIdentifier":335795000,"shortId":"soundplayer","source":"# Sound player\n\nA device that can play various sounds stored locally. This service is typically paired with a ``storage`` service for storing sounds.\n\n    identifier: 0x1403d338\n    tags: sound\n\n## Registers\n\n    rw volume: u0.16 / @ intensity\n\nGlobal volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.\n\n## Commands\n\n    command play @ 0x80 {\n        volume: u0.16 /\n        name: string\n    }\n\nStarts playing a sounds with a specific volume.\n\n    command list_sounds @ 0x81 {\n        sounds_port: pipe\n    }\n    pipe report list_sounds_pipe {\n       duration: u32 ms\n       name: string\n    }\n\nReturns the list of sounds available to play.\n"},{"classIdentifier":360365086,"shortId":"soundspectrum","source":"# Sound Spectrum\n\n    identifier: 0x157abc1e\n    extends: _sensor\n    tags: sound\n\nA microphone that analyzes the sound specturm\n\n## Registers\n\n    ro frequency_bins: bytes @ reading\n    \nThe computed frequency data.\n\n    rw enabled: bool @ intensity\n\nTurns on/off the micropohone.\n\n    rw fft_pow2_size = 5: u8 { absolute_min=2, absolute_max=7 } @ 0x80\n    \nThe power of 2 used as the size of the FFT to be used to determine the frequency domain.\n\n    rw min_decibels: i16 dB @ 0x81\n    \nThe minimum power value in the scaling range for the FFT analysis data\n\n    rw max_decibels: i16 dB @ 0x82\n    \nThe maximum power value in the scaling range for the FFT analysis data\n\n    rw smoothing_time_constant = 0.8: u0.8 / @ 0x83\n\nThe averaging constant with the last analysis frame. \nIf ``0`` is set, there is no averaging done, whereas a value of ``1`` means \"overlap the previous and current buffer quite a lot while computing the value\".\n"},{"classIdentifier":302307733,"shortId":"speechsynthesis","source":"#  Speech synthesis\n\n     identifier: 0x1204d995\n\nA speech synthesizer\n\n## Registers\n\n    rw enabled: bool @ intensity\n\nDetermines if the speech engine is in a non-paused state.\n\n    rw lang?: string @ 0x80\n\nLanguage used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.\n\n    rw volume? = 1: u0.8 / @ 0x81\n\nVolume for utterances.\n\n    rw pitch? = 1: u16.16 { absolute_max=2 } @ 0x82\n\nPitch for utterances\n\n    rw rate? = 1: u16.16 { absolute_min=0.1, absolute_max=10 } @ 0x83\n\nRate for utterances\n\n## Commands\n\n    command speak @ 0x80 {\n        text: string\n    }\n\nAdds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\n\n    command cancel @ 0x81 {}\n\nCancels current utterance and all utterances from the utterance queue.\n"},{"classIdentifier":450008066,"shortId":"switch","source":"# Switch\n\n    identifier: 0x1ad29402\n    extends: _sensor\n    tags: button\n\nA switch, which keeps its position.\n\n## Registers\n\n    ro active: bool @ reading\n\nIndicates whether the switch is currently active (on).\n\n    enum Variant: u8 {\n        Slide = 1\n        Tilt = 2\n        PushButton = 3\n        Tactile = 4\n        Toggle = 5\n        Proximity = 6\n        Magnetic = 7\n        FootPedal = 8\n    }\n    const variant?: Variant @ variant\n\nDescribes the type of switch used.\n\n    const auto_off_delay?: u16.16 s @ 0x180\n\nSpecifies the delay without activity to automatically turn off after turning on.\nFor example, some light switches in staircases have such a capability.\n\n## Events\n\n    event on @ active\n\nEmitted when switch goes from ``off`` to ``on``.\n\n    event off @ inactive\n\nEmitted when switch goes from ``on`` to ``off``.\n"},{"classIdentifier":457422603,"shortId":"tcp","source":"# TCP\n\n    identifier: 0x1b43b70b\n    camel: tcp\n\nData transfer over TCP/IP and TLS stream sockets.\n\n## Commands\n\n    command open @ 0x80 {\n        inbound: pipe\n    }\n    report {\n        outbound_port: pipe_port\n    }\n\nOpen pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\n\n## Pipes\n\n    meta pipe command open_ssl @ 0x01 {\n        tcp_port: u16\n        hostname: string\n    }\n\nOpen an SSL connection to a given host:port pair. Can be issued only once on given pipe.\nAfter the connection is established, an empty data report is sent.\nConnection is closed by closing the pipe.\n\n    pipe command outdata {\n        data: bytes\n    }\n\nBytes to be sent directly over an established TCP or SSL connection.\n\n    pipe report indata {\n        data: bytes\n    }\n\nBytes read directly from directly over an established TCP or SSL connection.\n\n    enum TcpError : i32 {\n        InvalidCommand = 1\n        InvalidCommandPayload = 2\n    }\n    meta pipe report error @ 0x00 {\n        error: TcpError\n    }\n\nReported when an error is encountered. Negative error codes come directly from the SSL implementation.\n"},{"classIdentifier":339394657,"shortId":"thermocouple","source":"# Thermocouple\n\n    identifier: 0x143ac061\n    extends: _sensor\n    tags: environment\n\nA thermocouple using a heat probe to gather temperatures.\n\n## Registers\n\n    ro temperature: i22.10 °C { preferred_interval=1000 } @ reading\n\nThe temperature.\n\n    const min_temperature: i22.10 °C @ min_reading\n\nLowest temperature that can be reported.\n\n    const max_temperature: i22.10 °C @ max_reading\n\nHighest temperature that can be reported.\n\n    ro temperature_error: u22.10 °C  @ reading_error\n\nThe real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\n\n    enum Variant: u8 {\n        TypeK = 1\n        TypeJ = 2\n        TypeT = 3\n        TypeE = 4\n        TypeN = 5\n        TypeS = 6\n        TypeR = 7\n        TypeB = 8\n    }\n    const variant: Variant @ variant\n\nSpecifies the type of thermometer.\n"},{"classIdentifier":337754823,"shortId":"thermometer","source":"# Thermometer\n\n    identifier: 0x1421bac7\n    extends: _sensor\n    tags: environment\n\nA thermometer measuring outside or inside environment.\n\n## Registers\n\n    ro temperature: i22.10 °C { preferred_interval=1000 } @ reading\n\nThe temperature.\n\n    const min_temperature: i22.10 °C @ min_reading\n\nLowest temperature that can be reported.\n\n    const max_temperature: i22.10 °C @ max_reading\n\nHighest temperature that can be reported.\n\n    ro temperature_error: u22.10 °C  @ reading_error\n\nThe real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\n\n    enum Variant: u8 {\n        Outdoor = 1,\n        Indoor = 2,\n        Body = 3,\n    }\n    const variant: Variant @ variant\n\nSpecifies the type of thermometer.\n"},{"classIdentifier":365137307,"shortId":"trafficlight","source":"# Traffic Light\n\nControls a mini traffic with a red, orange and green LED.\n\n        identifier: 0x15c38d9b\n\n## Registers\n\n    rw red: bool @ 0x80\n\nThe on/off state of the red light.\n\n    rw orange: bool @ 0x81\n\nThe on/off state of the red light.\n\n    rw green: bool @ 0x82\n\nThe on/off state of the red light.\n"},{"classIdentifier":312849815,"shortId":"tvoc","source":"# Total Volatile organic compound\n\nMeasures equivalent Total Volatile Organic Compound levels.\n\n    identifier: 0x12a5b597\n    extends: _sensor\n    camel: tvoc\n    tags: environment\n\n## Registers\n\n    ro TVOC: u22.10 ppb { absolute_min=0, typical_max=1187 }  @ reading\n\nTotal volatile organic compound readings in parts per billion.\n\n    ro TVOC_error?: u22.10 ppb @ reading_error\n\nError on the reading data\n\n    const min_TVOC?: u22.10 ppb @ min_reading\n\nMinimum measurable value\n\n    const max_TVOC?: u22.10 ppb @ max_reading\n\nMinimum measurable value\n\n    const conditioning_period?: u32 s @ 0x180\n\nTime required to achieve good sensor stability before measuring after long idle period."},{"classIdentifier":527306128,"shortId":"uvindex","source":"# UV index\n\nThe UV Index is a measure of the intensity of ultraviolet (UV) rays from the Sun. \n\n    identifier: 0x1f6e0d90\n    extends: _sensor\n    camel: uvIndex\n    tags: environment\n\n## Registers\n\n    ro uv_index: u16.16 uv { typical_max=11 } @ reading\n\nUltraviolet index, typically refreshed every second.\n\n    ro uv_index_error?: u16.16 uv @ reading_error\n\nError on the UV measure.\n\n    enum Variant: u8 {\n        UVA_UVB = 1,\n        Visible_IR = 2\n    }\n    const variant?: Variant @ variant\n\nThe type of physical sensor and capabilities.\n"},{"classIdentifier":406832290,"shortId":"vibration","source":"# Vibration motor\n\n    identifier: 0x183fc4a2\n\nA vibration motor.\n\n## Registers\n\n    rw enabled: bool @ intensity\n\nDetermines if the vibration motor responds to vibrate commands.\n\n## Commands\n\n    command vibrate @ 0x80 {\n    repeats:\n        duration: u8 8ms,\n        speed: u0.8 /\n    }\n\nStarts a sequence of vibration and pauses. To stop any existing vibration, send an empty payload.\n"},{"classIdentifier":343630573,"shortId":"waterlevel","source":"# Water level\n\n    identifier: 0x147b62ed\n    extends: _sensor\n\nA sensor that measures liquid/water level.\n\n## Registers\n\n    ro level: u0.16 / @ reading\n\nThe reported water level.\n\n    enum Variant: u8 {\n        Resistive = 1\n        ContactPhotoElectric = 2\n        NonContactPhotoElectric = 3\n    }\n    const variant?: Variant @ variant\n\nThe type of physical sensor.\n"},{"classIdentifier":525160512,"shortId":"weightscale","source":"# Weight Scale\n\n    identifier: 0x1f4d5040\n    extends: _sensor\n\nA weight measuring sensor.\n\n## Registers\n\n    ro weight: u16.16 kg @ reading\n\nThe reported weight.\n\n    ro weight_error?: u16.16 kg @ reading_error\n\nThe estimate error on the reported reading.\n\n    rw zero_offset?: u16.16 kg @ 0x80\n    \nCalibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\nYou do not need to subtract that from the reading, it has already been done.\n\n    rw gain?: u16.16 @ 0x81\n\nCalibrated gain on the weight scale error.\n\n    const max_weight?: u16.16 kg @ max_reading\n\nMaximum supported weight on the scale.\n\n    const min_weight?: u16.16 kg @ min_reading\n\nMinimum recommend weight on the scale.\n\n    const weight_resolution?: u16.16 kg @ reading_resolution\n\nSmallest, yet distinguishable change in reading.\n\n    enum Variant: u8 {\n        Body = 1\n        Food = 2\n        Jewelry = 3\n    }\n    const variant?: Variant @ variant\n\nThe type of physical scale\n\n## Commands\n\n    command calibrate_zero_offset @ 0x80 { }\n\nCall this command when there is nothing on the scale. If supported, the module should save the calibration data.\n\n    command calibrate_gain @ 0x81 {\n        weight: u22.10 g\n    }\n\nCall this command with the weight of the thing on the scale.\n"},{"classIdentifier":413852154,"shortId":"wifi","source":"# WIFI\n\n    identifier: 0x18aae1fa\n    camel: wifi\n    tags: iot\n\nDiscovery and connection to WiFi networks. Separate TCP service is used for data transfer.\n\n## Commands\n\n    flags APFlags : u32 {\n        HasPassword = 0x0001\n        WPS = 0x0002\n        HasSecondaryChannelAbove = 0x0004\n        HasSecondaryChannelBelow = 0x0008\n        IEEE_802_11B = 0x0100\n        IEEE_802_11A = 0x0200\n        IEEE_802_11G = 0x0400\n        IEEE_802_11N = 0x0800\n        IEEE_802_11AC = 0x1000\n        IEEE_802_11AX = 0x2000\n        IEEE_802_LongRange = 0x8000\n    }\n    command scan @ 0x80 {\n        results: pipe\n    }\n    pipe report results {\n        flags: APFlags\n        reserved: u32\n        rssi: i8 dB {typical_min = -100, typical_max = -20}\n        channel: u8 {typical_min = 1, typical_max = 13}\n        bssid: u8[6]\n        ssid: string { max_bytes = 33}\n    }\n\nInitiate search for WiFi networks. Results are returned via pipe, one entry per packet.\n\n    command connect @ 0x81 {\n        ssid: string0\n        password?: string0\n    }\n\nConnect to named network.\n\n    command disconnect @ 0x82 {}\n\nDisconnect from current WiFi network if any.\n\n## Registers\n\n    ro connected: bool @ 0x180\n\nIndicates whether or not we currently have an IP address assigned.\n\n## Events\n\n    event got_ip @ active\n\nEmitted upon successful join and IP address assignment.\n\n    event lost_ip @ inactive\n\nEmitted when disconnected from network.\n"},{"classIdentifier":409725227,"shortId":"winddirection","source":"# Wind direction\n\nA sensor that measures wind direction.\n\n    identifier: 0x186be92b\n    extends: _sensor\n\n## Registers\n\n    ro wind_direction: u16 { absolute_min=0, absolute_max=359, preferred_interval=1000 } ° @ reading\n\nThe direction of the wind.\n\n    ro wind_direction_error?: u16 ° @ reading_error\n\nError on the wind direction reading\n\n    ro wind_direction_offset?: i16 ° @ 0x180\n\nOffset added to direction to account for sensor calibration.\n"},{"classIdentifier":458824639,"shortId":"windspeed","source":"# Wind speed\n\nA sensor that measures wind speed.\n\n    identifier: 0x1b591bbf\n    extends: _sensor\n\n## Registers\n\n    ro wind_speed: u16.16 m/s { preferred_interval=60000 } @ reading\n\nThe velocity of the wind.\n\n    ro wind_speed_error: u16.16 m/s @ reading_error\n\nError on the reading\n\n    const max_wind_speed?: u16.16 m/s @ max_reading\n\nMaximum speed that can be measured by the sensor.\n\n"}]