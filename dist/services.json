[
  {
    "name": "Common registers and commands",
    "status": "experimental",
    "shortId": "_system",
    "camelName": "system",
    "shortName": "system",
    "extends": [],
    "notes": {
      "short": "This file describes common register and command codes.\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).",
      "commands": "Command codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.",
      "registers": "Register codes are subdivided as follows:\n* Registers `0x001-0x07f` - r/w common to all services\n* Registers `0x080-0x0ff` - r/w defined per-service\n* Registers `0x100-0x17f` - r/o common to all services\n* Registers `0x180-0x1ff` - r/o defined per-service\n* Registers `0x200-0xeff` - custom, defined per-service\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.",
      "events": "Events codes are subdivided as follows:\n* Events `0x000-0x07f` - common to all services\n* Events `0x080-0xeff` - defined per-service\n* Events `0xf00-0xfff` - reserved for implementation"
    },
    "classIdentifier": 536870897,
    "enums": {},
    "packets": [
      {
        "kind": "command",
        "name": "announce",
        "identifier": 0,
        "description": "Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.",
        "fields": [],
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "announce",
        "identifier": 0,
        "description": "Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.",
        "fields": [],
        "secondary": true
      },
      {
        "kind": "command",
        "name": "get_register",
        "identifier": 4096,
        "description": "Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.",
        "fields": [],
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "get_register",
        "identifier": 4096,
        "description": "Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.",
        "fields": [],
        "secondary": true
      },
      {
        "kind": "command",
        "name": "set_register",
        "identifier": 8192,
        "description": "Registers number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.",
        "fields": []
      },
      {
        "kind": "report",
        "name": "event",
        "identifier": 1,
        "description": "Event from sensor or a broadcast service.",
        "fields": [
          {
            "name": "event_id",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "event_argument",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32 u32"
      },
      {
        "kind": "command",
        "name": "calibrate",
        "identifier": 2,
        "description": "Request to calibrate a sensor. The report indicates the calibration is done.",
        "fields": [],
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "calibrate",
        "identifier": 2,
        "description": "Request to calibrate a sensor. The report indicates the calibration is done.",
        "fields": [],
        "secondary": true
      },
      {
        "kind": "rw",
        "name": "intensity",
        "identifier": 1,
        "description": "This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "rw",
        "name": "value",
        "identifier": 2,
        "description": "The primary value of actuator (eg. servo pulse length, or motor duty cycle).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i32"
      },
      {
        "kind": "rw",
        "name": "max_power",
        "identifier": 7,
        "description": "Limit the power drawn by the service, in mA.",
        "fields": [
          {
            "name": "_",
            "unit": "mA",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "defaultValue": 500,
            "typicalMax": 500,
            "typicalMin": 0
          }
        ],
        "packFormat": "u16"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "ro",
        "name": "reading",
        "identifier": 257,
        "description": "Read-only value of the sensor, also reported in streaming.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i32"
      },
      {
        "kind": "rw",
        "name": "low_threshold",
        "identifier": 5,
        "description": "Thresholds for event generation for event generation for analog sensors.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i32"
      },
      {
        "kind": "rw",
        "name": "high_threshold",
        "identifier": 6,
        "description": "Thresholds for event generation for event generation for analog sensors.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i32"
      },
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16 u16"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "event",
        "name": "change",
        "identifier": 2,
        "description": "Emit notifying that the internal state of the service changed.",
        "fields": []
      }
    ],
    "source": "# Common registers and commands\n\n    camel: system\n\nThis file describes common register and command codes.\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).\n\n## Commands\n\nCommand codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.\n\n    command announce @ 0x00 { }\n    report { ... }\n\nEnumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.\n\n    command get_register @ 0x1000 {}\n    report { ... }\n\nRegisters number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.\n\n    command set_register @ 0x2000 { ... }\n\nRegisters number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.\n\n    report event @ 0x01 {\n        event_id: u32\n        event_argument: u32\n    }\n\nEvent from sensor or a broadcast service. \n\n    command calibrate @ 0x02 { }\n    report { }\n\nRequest to calibrate a sensor. The report indicates the calibration is done.\n\n## Registers\n\nRegister codes are subdivided as follows:\n* Registers `0x001-0x07f` - r/w common to all services\n* Registers `0x080-0x0ff` - r/w defined per-service\n* Registers `0x100-0x17f` - r/o common to all services\n* Registers `0x180-0x1ff` - r/o defined per-service\n* Registers `0x200-0xeff` - custom, defined per-service\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.\n\n    rw intensity: u32 @ 0x01\n\nThis is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\n\n    rw value: i32 @ 0x02\n\nThe primary value of actuator (eg. servo pulse length, or motor duty cycle).\n\n    rw max_power = 500: u16 mA {typical_max = 500} @ 0x07\n\nLimit the power drawn by the service, in mA.\n\n    rw streaming_samples: u8 @ 0x03\n\nAsks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).\n\n    rw streaming_interval = 100: u32 ms @ 0x04\n\nPeriod between packets of data when streaming in milliseconds.\n\n    ro reading: i32 @ 0x101\n\nRead-only value of the sensor, also reported in streaming.\n\n    rw low_threshold: i32 @ 0x05\n    rw high_threshold: i32 @ 0x06\n\nThresholds for event generation for event generation for analog sensors.\n\n    ro status_code @ 0x103 {\n        code: u16\n        vendor_code: u16\n    }\n\nReports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.\n\n    const streaming_preferred_interval: u32 ms @ 0x102\n\nPreferred default streaming interval for sensor in milliseconds.\n\n## Events\n\nEvents codes are subdivided as follows:\n* Events `0x000-0x07f` - common to all services\n* Events `0x080-0xeff` - defined per-service\n* Events `0xf00-0xfff` - reserved for implementation\n\n    event change @ 0x02 { }\n\nEmit notifying that the internal state of the service changed."
  },
  {
    "name": "Base service",
    "status": "experimental",
    "shortId": "_base",
    "camelName": "base",
    "shortName": "base",
    "extends": [],
    "notes": {
      "short": "Base class for all services."
    },
    "classIdentifier": 536870899,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16"
      }
    ],
    "source": "# Base service\n\n    camel: base\n\nBase class for all services.\n\n## Registers\n\n    ro status_code? @ status_code {\n        code: u16\n        vendor_code: u16\n    }\n\nReports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.\n\n"
  },
  {
    "name": "Sensor",
    "status": "experimental",
    "shortId": "_sensor",
    "camelName": "sensor",
    "shortName": "sensor",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Base class for sensors."
    },
    "classIdentifier": 536870898,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32"
      }
    ],
    "source": "# Sensor\n\n    camel: sensor\n\nBase class for sensors.\n\n## Registers\n\n    rw internal streaming_samples: u8 @ streaming_samples\n\nAsks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).\n\n    rw streaming_interval = 100: u32 ms {typical_min = 1, typical_max = 60000} @ streaming_interval\n\nPeriod between packets of data when streaming in milliseconds.\n\n    const internal streaming_preferred_interval?: u32 ms @ streaming_preferred_interval\n\nPreferred default streaming interval for sensor in milliseconds.\n"
  },
  {
    "name": "Accelerometer",
    "status": "experimental",
    "shortId": "accelerometer",
    "camelName": "accelerometer",
    "shortName": "accelerometer",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "A 3-axis accelerometer.",
      "events": "All events are debounced."
    },
    "classIdentifier": 521405449,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "ro",
        "name": "forces",
        "identifier": 257,
        "description": "Indicates the current forces acting on accelerometer.",
        "fields": [
          {
            "name": "x",
            "unit": "g",
            "shift": 10,
            "type": "i6.10",
            "storage": -2
          },
          {
            "name": "y",
            "unit": "g",
            "shift": 10,
            "type": "i6.10",
            "storage": -2
          },
          {
            "name": "z",
            "unit": "g",
            "shift": 10,
            "type": "i6.10",
            "storage": -2
          }
        ],
        "identifierName": "reading",
        "packFormat": "i6.10 i6.10 i6.10"
      },
      {
        "kind": "event",
        "name": "tilt_up",
        "identifier": 1,
        "description": "Emitted when accelerometer is tilted in the given direction.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "tilt_down",
        "identifier": 2,
        "description": "Emitted when accelerometer is tilted in the given direction.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "tilt_left",
        "identifier": 3,
        "description": "Emitted when accelerometer is tilted in the given direction.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "tilt_right",
        "identifier": 4,
        "description": "Emitted when accelerometer is tilted in the given direction.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "face_up",
        "identifier": 5,
        "description": "Emitted when accelerometer is laying flat in the given direction.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "face_down",
        "identifier": 6,
        "description": "Emitted when accelerometer is laying flat in the given direction.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "freefall",
        "identifier": 7,
        "description": "Emitted when total force acting on accelerometer is much less than 1g.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "shake",
        "identifier": 11,
        "description": "Emitted when forces change violently a few times.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "force_2g",
        "identifier": 12,
        "description": "Emitted when force in any direction exceeds given threshold.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "force_3g",
        "identifier": 8,
        "description": "Emitted when force in any direction exceeds given threshold.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "force_6g",
        "identifier": 9,
        "description": "Emitted when force in any direction exceeds given threshold.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "force_8g",
        "identifier": 10,
        "description": "Emitted when force in any direction exceeds given threshold.",
        "fields": []
      }
    ],
    "source": "# Accelerometer\n\n    identifier: 0x1f140409\n    extends: _sensor\n\nA 3-axis accelerometer.\n\n## Registers\n\n    ro forces @ reading {\n        x: i6.10 g\n        y: i6.10 g\n        z: i6.10 g\n    }\n\nIndicates the current forces acting on accelerometer.\n\n## Events\n\nAll events are debounced.\n\n    event tilt_up @ 1\n    event tilt_down @ 2\n    event tilt_left @ 3\n    event tilt_right @ 4\n\nEmitted when accelerometer is tilted in the given direction.\n\n    event face_up @ 5\n    event face_down @ 6\n\nEmitted when accelerometer is laying flat in the given direction.\n\n    event freefall @ 7\n\nEmitted when total force acting on accelerometer is much less than 1g.\n\n    event shake @ 11\n\nEmitted when forces change violently a few times.\n\n    event force_2g @ 12\n    event force_3g @ 8\n    event force_6g @ 9\n    event force_8g @ 10\n\nEmitted when force in any direction exceeds given threshold.\n"
  },
  {
    "name": "Sensor Aggregator",
    "status": "experimental",
    "shortId": "aggregator",
    "camelName": "sensorAggregator",
    "shortName": "sensorAggregator",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Aggregate data from multiple sensors into a single stream\n(often used as input to machine learning models on the same device, see model runner service)."
    },
    "classIdentifier": 496034245,
    "enums": {
      "SampleType": {
        "name": "SampleType",
        "storage": 1,
        "members": {
          "U8": 8,
          "I8": 136,
          "U16": 16,
          "I16": 144,
          "U32": 32,
          "I32": 160
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "inputs",
        "identifier": 128,
        "description": "Set automatic input collection.\nThese settings are stored in flash.",
        "fields": [
          {
            "name": "sampling_interval",
            "unit": "ms",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "samples_in_window",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "reserved",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "device_id",
            "unit": "",
            "type": "devid",
            "storage": 8,
            "startRepeats": true
          },
          {
            "name": "service_class",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "service_num",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "sample_size",
            "unit": "B",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "sample_type",
            "unit": "",
            "type": "SampleType",
            "storage": 1
          },
          {
            "name": "sample_shift",
            "unit": "",
            "type": "i8",
            "storage": -1,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16 u16 u32 r: b[8] u32 u8 u8 u8 i8"
      },
      {
        "kind": "ro",
        "name": "num_samples",
        "identifier": 384,
        "description": "Number of input samples collected so far.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "ro",
        "name": "sample_size",
        "identifier": 385,
        "description": "Size of a single sample.",
        "fields": [
          {
            "name": "_",
            "unit": "B",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 129,
        "description": "When set to `N`, will stream `N` samples as `current_sample` reading.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "ro",
        "name": "current_sample",
        "identifier": 257,
        "description": "Last collected sample.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "identifierName": "reading",
        "packFormat": "b"
      }
    ],
    "source": "# Sensor Aggregator\n\n    identifier: 0x1d90e1c5\n\nAggregate data from multiple sensors into a single stream\n(often used as input to machine learning models on the same device, see model runner service).\n\n## Registers\n\n    enum SampleType : u8 {\n        U8 = 0x08\n        I8 = 0x88\n        U16 = 0x10\n        I16 = 0x90\n        U32 = 0x20\n        I32 = 0xA0\n    }\n    rw inputs @ 0x80 {\n        sampling_interval: u16 ms\n        samples_in_window: u16\n        reserved: u32\n    repeats:\n        device_id: devid\n        service_class: u32\n        service_num: u8\n        sample_size: u8 B\n        sample_type: SampleType\n        sample_shift: i8\n    }\n\nSet automatic input collection.\nThese settings are stored in flash.\n\n    ro num_samples: u32 @ 0x180\n\nNumber of input samples collected so far.\n\n    ro sample_size: u8 B @ 0x181\n\nSize of a single sample.\n\n    rw streaming_samples: u32 @ 0x81\n\nWhen set to `N`, will stream `N` samples as `current_sample` reading.\n\n    ro current_sample: bytes @ reading\n\nLast collected sample.\n"
  },
  {
    "name": "Arcade screen",
    "status": "experimental",
    "shortId": "arcadescreen",
    "camelName": "arcadeScreen",
    "shortName": "arcadeScreen",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A screen with indexed colors.\n\nThis is typically run over an SPI connection, not regular single-wire JACDAC.",
      "commands": "`RowMajor` is typical for computer screens, while most landscape embedded LCDs use `ColumnMajor`.\n`Upscale2x` means the physical resolution of the screen is double the reported resolution,\nand the screen will internally upscale."
    },
    "classIdentifier": 385496805,
    "enums": {
      "DisplayFlags": {
        "name": "DisplayFlags",
        "storage": 1,
        "isFlags": true,
        "members": {
          "ColumnMajor": 0,
          "RowMajor": 1,
          "Upscale2x": 2
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "announce",
        "identifier": 0,
        "description": "Announces display capabilities and logical size\n(320x240 screen with `Upscale2x` will report 160x120).",
        "fields": [],
        "identifierName": "announce",
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "announce",
        "identifier": 0,
        "description": "Announces display capabilities and logical size\n(320x240 screen with `Upscale2x` will report 160x120).",
        "fields": [
          {
            "name": "flags",
            "unit": "",
            "type": "DisplayFlags",
            "storage": 1
          },
          {
            "name": "bits_per_pixel",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "width",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "height",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "secondary": true,
        "packFormat": "u8 u8 u16 u16"
      },
      {
        "kind": "command",
        "name": "start_update",
        "identifier": 129,
        "description": "Sets the update window for subsequent `set_pixels` commands.",
        "fields": [
          {
            "name": "x",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "y",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "width",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "height",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16 u16 u16 u16"
      },
      {
        "kind": "command",
        "name": "set_pixels",
        "identifier": 131,
        "description": "Set pixels in current window, according to current palette.",
        "fields": [
          {
            "name": "pixels",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "packFormat": "b"
      },
      {
        "kind": "rw",
        "name": "brightness",
        "identifier": 1,
        "description": "Set backlight brightness.\nIf set to `0` the display may go to sleep.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "identifierName": "intensity",
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "palette",
        "identifier": 128,
        "description": "The current palette.\nThe color entry repeats `1 << bits_per_pixel` times.\nThis register may be write-only.",
        "fields": [
          {
            "name": "blue",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true,
            "startRepeats": true
          },
          {
            "name": "green",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "red",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "padding",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "packFormat": "r: u8 u8 u8 u8"
      }
    ],
    "source": "# Arcade screen\n\n    identifier: 0x16fa36e5\n\nA screen with indexed colors.\n\nThis is typically run over an SPI connection, not regular single-wire JACDAC.\n\n## Commands\n\n    flags DisplayFlags : u8 {\n        ColumnMajor  = 0x00,\n        RowMajor     = 0x01\n        Upscale2x    = 0x02\n    }\n\n`RowMajor` is typical for computer screens, while most landscape embedded LCDs use `ColumnMajor`.\n`Upscale2x` means the physical resolution of the screen is double the reported resolution,\nand the screen will internally upscale.\n\n    command announce @ announce {}\n    report {\n        flags: DisplayFlags\n        bits_per_pixel: u8\n        width: u16\n        height: u16\n    }\n\nAnnounces display capabilities and logical size\n(320x240 screen with `Upscale2x` will report 160x120).\n\n    command start_update @ 0x81 {\n        x: u16\n        y: u16\n        width: u16\n        height: u16\n    }\n\nSets the update window for subsequent `set_pixels` commands.\n\n    command set_pixels @ 0x83 {\n        pixels: bytes\n    }\n\nSet pixels in current window, according to current palette.\n\n## Registers\n\n    rw brightness: u8 / @ intensity\n\nSet backlight brightness.\nIf set to `0` the display may go to sleep.\n\n    rw palette @ 0x80 {\n    repeats:\n        blue: u8 /\n        green: u8 /\n        red: u8 /\n        padding: u8\n    }\n\nThe current palette.\nThe color entry repeats `1 << bits_per_pixel` times.\nThis register may be write-only.\n"
  },
  {
    "name": "Bootloader",
    "status": "experimental",
    "shortId": "bootloader",
    "camelName": "bootloader",
    "shortName": "bootloader",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Allows flashing (reprogramming) devices over JACDAC."
    },
    "classIdentifier": 536516936,
    "enums": {
      "Error": {
        "name": "Error",
        "storage": 4,
        "members": {
          "NoError": 0,
          "PacketTooSmall": 1,
          "OutOfFlashableRange": 2,
          "InvalidPageOffset": 3,
          "NotPageAligned": 4
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "info",
        "identifier": 0,
        "description": "The `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.",
        "fields": [],
        "identifierName": "announce",
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "info",
        "identifier": 0,
        "description": "The `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.",
        "fields": [
          {
            "name": "service_class",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "page_size",
            "unit": "B",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "flashable_size",
            "unit": "B",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "firmware_identifier",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "secondary": true,
        "packFormat": "u32 u32 u32 u32"
      },
      {
        "kind": "command",
        "name": "set_session",
        "identifier": 129,
        "description": "The flashing host should generate a random id, and use this command to set it.",
        "fields": [
          {
            "name": "session_id",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "hasReport": true,
        "packFormat": "u32"
      },
      {
        "kind": "report",
        "name": "set_session",
        "identifier": 129,
        "description": "The flashing host should generate a random id, and use this command to set it.",
        "fields": [
          {
            "name": "session_id",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "secondary": true,
        "packFormat": "u32"
      },
      {
        "kind": "command",
        "name": "page_data",
        "identifier": 128,
        "description": "Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.",
        "fields": [
          {
            "name": "page_address",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "page_offset",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "chunk_no",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "chunk_max",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "session_id",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "reserved0",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "reserved1",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "reserved2",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "reserved3",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "page_data",
            "unit": "",
            "type": "bytes",
            "storage": 208,
            "isSimpleType": true,
            "maxBytes": 208
          }
        ],
        "hasReport": true,
        "packFormat": "u32 u16 u8 u8 u32 u32 u32 u32 u32 b[208]"
      },
      {
        "kind": "report",
        "name": "page_data",
        "identifier": 128,
        "description": "Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.",
        "fields": [
          {
            "name": "session_id",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "page_error",
            "unit": "",
            "type": "Error",
            "storage": 4
          },
          {
            "name": "page_address",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "secondary": true,
        "packFormat": "u32 u32 u32"
      }
    ],
    "source": "# Bootloader\n\n    identifier: 0x1ffa9948\n\nAllows flashing (reprogramming) devices over JACDAC.\n\n## Commands\n\n    command info @ announce { }\n    report {\n        service_class: u32\n        page_size: u32 B\n        flashable_size: u32 B\n        firmware_identifier: u32\n    }\n\nThe `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.\n\n    command set_session @ 0x81 {\n        session_id: u32\n    }\n    report {\n        session_id: u32\n    }\n\nThe flashing host should generate a random id, and use this command to set it.\n\n    enum Error : u32 {\n        NoError = 0\n        PacketTooSmall = 1\n        OutOfFlashableRange = 2\n        InvalidPageOffset = 3\n        NotPageAligned = 4\n    }\n    command page_data @ 0x80 {\n        page_address: u32\n        page_offset: u16\n        chunk_no: u8\n        chunk_max: u8\n        session_id: u32\n        reserved0: u32\n        reserved1: u32\n        reserved2: u32\n        reserved3: u32\n        page_data: bytes {maxBytes = 208}\n    }\n    report {\n        session_id: u32\n        page_error: Error\n        page_address: u32\n    }\n\nUse to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.\n"
  },
  {
    "name": "Button",
    "status": "experimental",
    "shortId": "button",
    "camelName": "button",
    "shortName": "button",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "A simple push-button.\n\nNote: this service will stream readings while the button is pressed and shortly after it's released, even\nwhen `stream_samples == 0`. TODO remove this?"
    },
    "classIdentifier": 343122531,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "ro",
        "name": "pressed",
        "identifier": 257,
        "description": "Indicates whether the button is currently active (pressed).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "identifierName": "reading",
        "packFormat": "u8"
      },
      {
        "kind": "event",
        "name": "down",
        "identifier": 1,
        "description": "Emitted when button goes from inactive (`pressed == 0`) to active.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "up",
        "identifier": 2,
        "description": "Emitted when button goes from active (`pressed == 1`) to inactive.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "click",
        "identifier": 3,
        "description": "Emitted together with `up` when the press time was not longer than 500ms.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "long_click",
        "identifier": 4,
        "description": "Emitted together with `up` when the press time was more than 500ms.",
        "fields": []
      }
    ],
    "source": "# Button\n\n    identifier: 0x1473a263\n    extends: _sensor\n\nA simple push-button.\n\nNote: this service will stream readings while the button is pressed and shortly after it's released, even\nwhen `stream_samples == 0`. TODO remove this?\n\n## Registers\n\n    ro pressed: bool @ reading\n\nIndicates whether the button is currently active (pressed).\n\n## Events\n\n    event down @ 0x01\n\nEmitted when button goes from inactive (`pressed == 0`) to active.\n\n    event up @ 0x02\n\nEmitted when button goes from active (`pressed == 1`) to inactive.\n\n    event click @ 0x03\n\nEmitted together with `up` when the press time was not longer than 500ms.\n\n    event long_click @ 0x04\n\nEmitted together with `up` when the press time was more than 500ms.\n"
  },
  {
    "name": "Buzzer",
    "status": "experimental",
    "shortId": "buzzer",
    "camelName": "buzzer",
    "shortName": "buzzer",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A simple buzzer."
    },
    "classIdentifier": 458731991,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "volume",
        "identifier": 1,
        "description": "The volume (duty cycle) of the buzzer.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true,
            "defaultValue": 255
          }
        ],
        "identifierName": "intensity",
        "packFormat": "u8"
      },
      {
        "kind": "command",
        "name": "play_tone",
        "identifier": 128,
        "description": "Play a PWM tone with given period and duty for given duration.\nThe duty is scaled down with `volume` register.\nTo play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\nto send `P = 1000000 / F` and `D = P * V / 2`.",
        "fields": [
          {
            "name": "period",
            "unit": "us",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "duty",
            "unit": "us",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "duration",
            "unit": "ms",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16 u16 u16"
      }
    ],
    "source": "# Buzzer\n\n    identifier: 0x1b57b1d7\n    camel: buzzer\n\nA simple buzzer.\n\n## Registers\n\n    rw volume = 255: u8 / @ intensity\n\nThe volume (duty cycle) of the buzzer.\n\n## Commands\n\n    command play_tone @ 0x80 {\n        period: u16 us\n        duty: u16 us\n        duration: u16 ms\n    }\n\nPlay a PWM tone with given period and duty for given duration.\nThe duty is scaled down with `volume` register.\nTo play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\nto send `P = 1000000 / F` and `D = P * V / 2`.\n"
  },
  {
    "name": "CODAL Message Bus",
    "status": "experimental",
    "shortId": "codalmessagebus",
    "camelName": "codalMessageBus",
    "shortName": "codalMessageBus",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A service that allows passing events through the [CODAL Message Bus](https://lancaster-university.github.io/microbit-docs/ubit/messageBus/)\n* ``id`` is a unique identifier that identifies a component in the device. Use ``0`` to address all sources. The value of other identifiers is typically hardware dependent.\n* ``event`` is an identifier that determines the event type. Use ``0`` as a wildcard."
    },
    "classIdentifier": 380468437,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "send",
        "identifier": 128,
        "description": "Sends a new event on the message bus.",
        "fields": [
          {
            "name": "id",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "event",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16 u16"
      }
    ],
    "source": "# CODAL Message Bus\n\n    identifier: 0x16ad7cd5\n    camel: codalMessageBus\n    \nA service that allows passing events through the [CODAL Message Bus](https://lancaster-university.github.io/microbit-docs/ubit/messageBus/)\n* ``id`` is a unique identifier that identifies a component in the device. Use ``0`` to address all sources. The value of other identifiers is typically hardware dependent.\n* ``event`` is an identifier that determines the event type. Use ``0`` as a wildcard.\n\n## Commands\n\n    command send @ 0x80 {\n        id: u16\n        event: u16\n    }\n    \nSends a new event on the message bus.\n"
  },
  {
    "name": "Control",
    "status": "experimental",
    "shortId": "control",
    "camelName": "control",
    "shortName": "control",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Control service is always service index `0`.\nIt handles actions common to all services on a device."
    },
    "classIdentifier": 0,
    "enums": {
      "AnnounceFlags": {
        "name": "AnnounceFlags",
        "storage": 1,
        "isFlags": true,
        "members": {
          "SupportsACK": 1
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "services",
        "identifier": 0,
        "description": "The `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.",
        "fields": [],
        "identifierName": "announce",
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "services",
        "identifier": 0,
        "description": "The `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.",
        "fields": [
          {
            "name": "restart_counter",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "flags",
            "unit": "",
            "type": "AnnounceFlags",
            "storage": 1
          },
          {
            "name": "packet_count",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "reserved",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "service_class",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "startRepeats": true
          }
        ],
        "secondary": true,
        "packFormat": "u8 u8 u8 u8 r: u32"
      },
      {
        "kind": "command",
        "name": "noop",
        "identifier": 128,
        "description": "Do nothing. Always ignored. Can be used to test ACKs.",
        "fields": []
      },
      {
        "kind": "command",
        "name": "identify",
        "identifier": 129,
        "description": "Blink an LED or otherwise draw user's attention.",
        "fields": [],
        "optional": true
      },
      {
        "kind": "command",
        "name": "reset",
        "identifier": 130,
        "description": "Reset device. ACK may or may not be sent.",
        "fields": [],
        "optional": true
      },
      {
        "kind": "command",
        "name": "flood_ping",
        "identifier": 131,
        "description": "The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.",
        "fields": [
          {
            "name": "num_responses",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "start_counter",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "size",
            "unit": "B",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "hasReport": true,
        "packFormat": "u32 u32 u8"
      },
      {
        "kind": "report",
        "name": "flood_ping",
        "identifier": 131,
        "description": "The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.",
        "fields": [
          {
            "name": "counter",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "dummy_payload",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "secondary": true,
        "packFormat": "u32 b"
      },
      {
        "kind": "const",
        "name": "device_description",
        "identifier": 384,
        "description": "Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "optional": true,
        "packFormat": "s"
      },
      {
        "kind": "const",
        "name": "firmware_identifier",
        "identifier": 385,
        "description": "A numeric code for the string above; used to identify firmware images and devices.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "absoluteMin": 805306368,
            "absoluteMax": 1073741823
          }
        ],
        "optional": true,
        "packFormat": "u32"
      },
      {
        "kind": "const",
        "name": "bootloader_firmware_identifier",
        "identifier": 388,
        "description": "Typically the same as `firmware_identifier` unless device was flashed by hand; the bootloader will respond to that code.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "absoluteMin": 805306368,
            "absoluteMax": 1073741823
          }
        ],
        "optional": true,
        "packFormat": "u32"
      },
      {
        "kind": "const",
        "name": "firmware_version",
        "identifier": 389,
        "description": "A string describing firmware version; typically semver.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "optional": true,
        "packFormat": "s"
      },
      {
        "kind": "ro",
        "name": "mcu_temperature",
        "identifier": 386,
        "description": "MCU temperature in degrees Celsius (approximate).",
        "fields": [
          {
            "name": "_",
            "unit": "C",
            "type": "i16",
            "storage": -2,
            "isSimpleType": true,
            "typicalMin": -10,
            "typicalMax": 150
          }
        ],
        "optional": true,
        "packFormat": "i16"
      },
      {
        "kind": "ro",
        "name": "uptime",
        "identifier": 390,
        "description": "Number of microseconds since boot.",
        "fields": [
          {
            "name": "_",
            "unit": "us",
            "type": "u64",
            "storage": 8,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "packFormat": "u64"
      },
      {
        "kind": "const",
        "name": "device_url",
        "identifier": 391,
        "description": "Request the information web site for this device",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "optional": true,
        "packFormat": "s"
      },
      {
        "kind": "const",
        "name": "firmware_url",
        "identifier": 392,
        "description": "URL with machine-readable metadata information about updating device firmware",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "optional": true,
        "packFormat": "s"
      }
    ],
    "source": "# Control\n\n    identifier: 0x00000000\n\nControl service is always service index `0`.\nIt handles actions common to all services on a device.\n\n## Commands\n\n    flags AnnounceFlags : u8 {\n        SupportsACK = 0x01,\n    }\n    command services @ announce { }\n    report {\n        restart_counter: u8\n        flags: AnnounceFlags\n        packet_count: u8\n        reserved: u8\n    repeats:\n        service_class: u32\n    }\n\nThe `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\n\n    command noop @ 0x80 { }\n\nDo nothing. Always ignored. Can be used to test ACKs.\n\n    command identify? @ 0x81 { }\n\nBlink an LED or otherwise draw user's attention.\n\n    command reset? @ 0x82 { }\n\nReset device. ACK may or may not be sent.\n\n    command flood_ping? @ 0x83 {\n        num_responses: u32\n        start_counter: u32\n        size: u8 B\n    }\n    report {\n        counter: u32\n        dummy_payload: bytes\n    }\n\nThe device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\n\n## Registers\n\n    const device_description?: string @ 0x180\n\nIdentifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\n\n    const firmware_identifier? : u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x181\n\nA numeric code for the string above; used to identify firmware images and devices.\n\n    const bootloader_firmware_identifier?: u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x184\n\nTypically the same as `firmware_identifier` unless device was flashed by hand; the bootloader will respond to that code.\n\n    const firmware_version?: string @ 0x185\n\nA string describing firmware version; typically semver.\n\n    ro mcu_temperature?: i16 C { typical_min = -10, typical_max = 150 } @ 0x182\n\nMCU temperature in degrees Celsius (approximate).\n\n    ro uptime?: u64 us @ 0x186\n\nNumber of microseconds since boot.\n\n    const device_url?: string @ 0x187\n\nRequest the information web site for this device\n\n    const firmware_url?: string @ 0x188\n\nURL with machine-readable metadata information about updating device firmware\n"
  },
  {
    "name": "Gamepad",
    "status": "experimental",
    "shortId": "gamepad",
    "camelName": "gamepad",
    "shortName": "gamepad",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "A gamepad with direction and action buttons for 1 or more players."
    },
    "classIdentifier": 501915758,
    "enums": {
      "Button": {
        "name": "Button",
        "storage": 2,
        "members": {
          "Left": 1,
          "Up": 2,
          "Right": 3,
          "Down": 4,
          "A": 5,
          "B": 6,
          "Menu": 7,
          "MenuAlt": 8,
          "Reset": 9,
          "Exit": 10
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "command",
        "name": "announce",
        "identifier": 0,
        "description": "Indicates number of players supported and which buttons are present on the controller.",
        "fields": [],
        "identifierName": "announce",
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "announce",
        "identifier": 0,
        "description": "Indicates number of players supported and which buttons are present on the controller.",
        "fields": [
          {
            "name": "flags",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "num_players",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true,
            "typicalMax": 4,
            "typicalMin": 0
          },
          {
            "name": "button_present",
            "unit": "",
            "type": "Button",
            "storage": 2,
            "startRepeats": true
          }
        ],
        "secondary": true,
        "packFormat": "u8 u8 r: u16"
      },
      {
        "kind": "ro",
        "name": "buttons",
        "identifier": 257,
        "description": "Indicates which buttons are currently active (pressed).\n`pressure` should be `0xff` for digital buttons, and proportional for analog ones.",
        "fields": [
          {
            "name": "button",
            "unit": "",
            "type": "Button",
            "storage": 2,
            "startRepeats": true
          },
          {
            "name": "player_index",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "pressure",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "identifierName": "reading",
        "packFormat": "r: u16 u8 u8"
      },
      {
        "kind": "event",
        "name": "down",
        "identifier": 1,
        "description": "Emitted when button goes from inactive to active.",
        "fields": [
          {
            "name": "button",
            "unit": "",
            "type": "Button",
            "storage": 2
          },
          {
            "name": "player_index",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16 u16"
      },
      {
        "kind": "event",
        "name": "up",
        "identifier": 2,
        "description": "Emitted when button goes from active to inactive.",
        "fields": [
          {
            "name": "button",
            "unit": "",
            "type": "Button",
            "storage": 2
          },
          {
            "name": "player_index",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16 u16"
      }
    ],
    "source": "# Gamepad\n\n    identifier: 0x1deaa06e\n    extends: _sensor\n\nA gamepad with direction and action buttons for 1 or more players.\n\n## Commands\n\n    enum Button : u16 {\n        Left = 1\n        Up = 2\n        Right = 3\n        Down = 4\n        A = 5\n        B = 6\n        Menu = 7\n        MenuAlt = 8\n        Reset = 9\n        Exit = 10\n    }\n    command announce @ announce {}\n    report {\n        flags: u8\n        num_players: u8 {typical_max = 4}\n    repeats:\n        button_present: Button\n    }\n\nIndicates number of players supported and which buttons are present on the controller.\n\n## Registers\n\n    ro buttons @ reading {\n    repeats:\n        button: Button\n        player_index: u8\n        pressure: u8 /\n    }\n\nIndicates which buttons are currently active (pressed).\n`pressure` should be `0xff` for digital buttons, and proportional for analog ones.\n\n## Events\n\n    event down @ 0x01 {\n        button: Button\n        player_index: u16\n    }\n\nEmitted when button goes from inactive to active.\n\n    event up @ 0x02 {\n        button: Button\n        player_index: u16\n    }\n\nEmitted when button goes from active to inactive.\n"
  },
  {
    "name": "Humidity",
    "status": "experimental",
    "shortId": "humidity",
    "camelName": "humidity",
    "shortName": "humidity",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "A sensor measuring humidity of outside environment.",
      "registers": "Default streaming interval is 1s."
    },
    "classIdentifier": 382210232,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "ro",
        "name": "humidity",
        "identifier": 257,
        "description": "The relative humidity in percentage of full water saturation.",
        "fields": [
          {
            "name": "_",
            "unit": "%RH",
            "shift": 10,
            "type": "u22.10",
            "storage": 4,
            "typicalMax": 100,
            "typicalMin": 0
          }
        ],
        "identifierName": "reading",
        "packFormat": "u22.10"
      }
    ],
    "source": "# Humidity\n\n    identifier: 0x16c810b8\n    extends: _sensor\n\nA sensor measuring humidity of outside environment.\n\n## Registers\n\nDefault streaming interval is 1s.\n\n    ro humidity: u22.10 %RH {typical_max = 100} @ reading\n\nThe relative humidity in percentage of full water saturation.\n"
  },
  {
    "name": "Azure IoT Hub",
    "status": "experimental",
    "shortId": "iothub",
    "camelName": "iotHub",
    "shortName": "iotHub",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Send messages, receive commands, and work with device twins in Azure IoT Hub."
    },
    "classIdentifier": 434976332,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "connect",
        "identifier": 128,
        "description": "Try connecting using currently set `connection_string`.\nThe service normally preiodically tries to connect automatically.",
        "fields": []
      },
      {
        "kind": "command",
        "name": "disconnect",
        "identifier": 129,
        "description": "Disconnect from current Hub if any.\nThis disables auto-connect behavior, until a `connect` command is issued.",
        "fields": []
      },
      {
        "kind": "command",
        "name": "send_string_msg",
        "identifier": 130,
        "description": "Sends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.",
        "fields": [
          {
            "name": "msg",
            "unit": "",
            "type": "string0",
            "storage": 0
          },
          {
            "name": "property_name",
            "unit": "",
            "type": "string0",
            "storage": 0,
            "startRepeats": true
          },
          {
            "name": "property_value",
            "unit": "",
            "type": "string0",
            "storage": 0
          }
        ],
        "hasReport": true,
        "packFormat": "z r: z z"
      },
      {
        "kind": "report",
        "name": "send_string_msg",
        "identifier": 130,
        "description": "Sends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.",
        "fields": [],
        "secondary": true
      },
      {
        "kind": "command",
        "name": "send_msg_ext",
        "identifier": 131,
        "description": "Sends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.",
        "fields": [],
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "send_msg_ext",
        "identifier": 131,
        "description": "Sends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.",
        "fields": [
          {
            "name": "message",
            "unit": "",
            "type": "pipe_port",
            "storage": 2
          }
        ],
        "secondary": true,
        "pipeType": "send_msg_ext",
        "packFormat": "u16"
      },
      {
        "kind": "pipe_command",
        "name": "message",
        "identifier": 0,
        "description": "Part of the body of the message.",
        "fields": [
          {
            "name": "body",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true,
            "segmented": true
          }
        ],
        "pipeType": "send_msg_ext",
        "packFormat": "b"
      },
      {
        "kind": "meta_pipe_command",
        "name": "properties",
        "identifier": 1,
        "description": "Set properties on the message. Can be repeated multiple times.",
        "fields": [
          {
            "name": "property_name",
            "unit": "",
            "type": "string0",
            "storage": 0,
            "startRepeats": true
          },
          {
            "name": "property_value",
            "unit": "",
            "type": "string0",
            "storage": 0
          }
        ],
        "pipeType": "send_msg_ext",
        "packFormat": "r: z z"
      },
      {
        "kind": "command",
        "name": "subscribe",
        "identifier": 132,
        "description": "Subscribes for cloud to device messages, which will be sent over the specified pipe.",
        "fields": [
          {
            "name": "devicebound",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "subscribe",
        "packFormat": "b[12]"
      },
      {
        "kind": "meta_pipe_report",
        "name": "devicebound_properties",
        "identifier": 1,
        "description": "If there are any properties, this meta-report is send one or more times.\nAll properties of a given message are always sent before the body.",
        "fields": [
          {
            "name": "property_name",
            "unit": "",
            "type": "string0",
            "storage": 0,
            "startRepeats": true
          },
          {
            "name": "property_value",
            "unit": "",
            "type": "string0",
            "storage": 0
          }
        ],
        "pipeType": "subscribe",
        "packFormat": "r: z z"
      },
      {
        "kind": "pipe_report",
        "name": "devicebound",
        "identifier": 0,
        "description": "For every message, the body is sent in one or more reports like this.",
        "fields": [
          {
            "name": "body",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true,
            "multiSegmented": true,
            "segmented": true
          }
        ],
        "pipeType": "subscribe",
        "packFormat": "b"
      },
      {
        "kind": "command",
        "name": "get_twin",
        "identifier": 133,
        "description": "Ask for current device digital twin.",
        "fields": [
          {
            "name": "twin_result",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "get_twin",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "twin_json",
        "identifier": 0,
        "description": "The JSON-encoded twin. This is typically something like:\n`{ \"desired\": { \"foo\": 1, \"$version\": 12 }, \"reported\": { \"foo\": 1, \"bar\" 2, \"$version\": 123 } }`",
        "fields": [
          {
            "name": "json",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true,
            "segmented": true
          }
        ],
        "pipeType": "get_twin",
        "packFormat": "b"
      },
      {
        "kind": "meta_pipe_report",
        "name": "twin_error",
        "identifier": 1,
        "description": "This emitted if status is not 200.",
        "fields": [
          {
            "name": "status_code",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "pipeType": "get_twin",
        "packFormat": "u32"
      },
      {
        "kind": "command",
        "name": "subscribe_twin",
        "identifier": 135,
        "description": "Subscribe to updates to our twin.",
        "fields": [
          {
            "name": "twin_updates",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "subscribe_twin",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "twin_update_json",
        "identifier": 0,
        "description": "First, the current value of the twin is sent (this includes desired and reported properties).\nNext updates done by the back-end are streamed as they arrive (they only include the desired properties).",
        "fields": [
          {
            "name": "json",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true,
            "multiSegmented": true,
            "segmented": true
          }
        ],
        "pipeType": "subscribe_twin",
        "packFormat": "b"
      },
      {
        "kind": "command",
        "name": "patch_twin",
        "identifier": 134,
        "description": "Start twin update.",
        "fields": [],
        "hasReport": true
      },
      {
        "kind": "report",
        "name": "patch_twin",
        "identifier": 134,
        "description": "Start twin update.",
        "fields": [
          {
            "name": "patch_port",
            "unit": "",
            "type": "pipe_port",
            "storage": 2
          }
        ],
        "secondary": true,
        "pipeType": "patch_twin",
        "packFormat": "u16"
      },
      {
        "kind": "pipe_command",
        "name": "twin_patch_json",
        "identifier": 0,
        "description": "The JSON-encoded twin update. The pipe should be closed when the last packet is sent.\nYou just send updates for `reported` field, like this:\n`{ \"bar\": 3, \"baz\": null }` (skip `\"$version\"` and no `\"reported\": { ... }`).",
        "fields": [
          {
            "name": "json",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true,
            "segmented": true
          }
        ],
        "pipeType": "patch_twin",
        "packFormat": "b"
      },
      {
        "kind": "command",
        "name": "subscribe_method",
        "identifier": 136,
        "description": "Subscribe to direct method calls.",
        "fields": [
          {
            "name": "method_call",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "subscribe_method",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "method_call_body",
        "identifier": 0,
        "description": "The method call body is sent using these packets.\nIf the body is empty, a single empty `method_call_body` is sent.",
        "fields": [
          {
            "name": "json",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true,
            "multiSegmented": true,
            "segmented": true
          }
        ],
        "pipeType": "subscribe_method",
        "packFormat": "b"
      },
      {
        "kind": "meta_pipe_report",
        "name": "method_call",
        "identifier": 1,
        "description": "This is sent after the last part of the `method_call_body`.",
        "fields": [
          {
            "name": "method_name",
            "unit": "",
            "type": "string0",
            "storage": 0
          },
          {
            "name": "request_id",
            "unit": "",
            "type": "string0",
            "storage": 0
          }
        ],
        "pipeType": "subscribe_method",
        "packFormat": "z z"
      },
      {
        "kind": "command",
        "name": "respond_to_method",
        "identifier": 137,
        "description": "Respond to a direct method call (`request_id` comes from `subscribe_method` pipe).",
        "fields": [
          {
            "name": "status",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "request_id",
            "unit": "",
            "type": "string0",
            "storage": 0
          }
        ],
        "hasReport": true,
        "packFormat": "u32 z"
      },
      {
        "kind": "report",
        "name": "respond_to_method",
        "identifier": 137,
        "description": "Respond to a direct method call (`request_id` comes from `subscribe_method` pipe).",
        "fields": [
          {
            "name": "response_body",
            "unit": "",
            "type": "pipe_port",
            "storage": 2
          }
        ],
        "secondary": true,
        "pipeType": "respond_to_method",
        "packFormat": "u16"
      },
      {
        "kind": "pipe_command",
        "name": "method_response",
        "identifier": 0,
        "description": "The pipe should be closed when the last packet of response body is sent.",
        "fields": [
          {
            "name": "json",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true,
            "segmented": true
          }
        ],
        "pipeType": "respond_to_method",
        "packFormat": "b"
      },
      {
        "kind": "ro",
        "name": "connection_status",
        "identifier": 384,
        "description": "Returns `\"ok\"` when connected, and an error description otherwise.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "rw",
        "name": "connection_string",
        "identifier": 128,
        "description": "Connection string typically looks something like \n`HostName=my-iot-hub.azure-devices.net;DeviceId=my-dev-007;SharedAccessKey=xyz+base64key`.\nYou can get it in `Shared access policies -> iothubowner -> Connection string-primary key` in the Azure Portal.\nThis register is write-only.\nYou can use `hub_name` and `device_id` to check if connection string is set, but you cannot get the shared access key.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "ro",
        "name": "hub_name",
        "identifier": 385,
        "description": "Something like `my-iot-hub.azure-devices.net`; empty string when `connection_string` is not set.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "ro",
        "name": "device_id",
        "identifier": 386,
        "description": "Something like `my-dev-007`; empty string when `connection_string` is not set.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "event",
        "name": "connected",
        "identifier": 1,
        "description": "Emitted upon successful connection.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "connection_error",
        "identifier": 2,
        "description": "Emitted when connection was lost.",
        "fields": [
          {
            "name": "reason",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "event",
        "name": "devicebound_str",
        "identifier": 3,
        "description": "This event is emitted upon reception of a cloud to device message, that is a string\n(doesn't contain NUL bytes) and fits in a single event packet.\nFor reliable reception, use the `subscribe` command above.",
        "fields": [
          {
            "name": "msg",
            "unit": "",
            "type": "string0",
            "storage": 0
          },
          {
            "name": "property_name",
            "unit": "",
            "type": "string0",
            "storage": 0,
            "startRepeats": true
          },
          {
            "name": "property_value",
            "unit": "",
            "type": "string0",
            "storage": 0
          }
        ],
        "packFormat": "z r: z z"
      }
    ],
    "source": "# Azure IoT Hub\n\n    identifier: 0x19ed364c\n    camel: iotHub\n\nSend messages, receive commands, and work with device twins in Azure IoT Hub.\n\n## Commands\n\n    command connect @ 0x80 {}\n\nTry connecting using currently set `connection_string`.\nThe service normally preiodically tries to connect automatically.\n\n    command disconnect @ 0x81 {}\n\nDisconnect from current Hub if any.\nThis disables auto-connect behavior, until a `connect` command is issued.\n\n    command send_string_msg @ 0x82 {\n        msg: string0\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n    report {}\n\nSends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.\n\n    command send_msg_ext @ 0x83 {}\n    report {\n        message: pipe_port\n    }\n\nSends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.\n\n    pipe command message {\n    segmented:\n        body: bytes\n    }\n\nPart of the body of the message.\n\n    meta pipe command properties @ 0x01 {\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n\nSet properties on the message. Can be repeated multiple times.\n\n    command subscribe @ 0x84 {\n        devicebound: pipe\n    }\n\nSubscribes for cloud to device messages, which will be sent over the specified pipe.\n\n    meta pipe report devicebound_properties @ 0x01 {\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n\nIf there are any properties, this meta-report is send one or more times.\nAll properties of a given message are always sent before the body.\n\n    pipe report devicebound {\n    multi-segmented:\n        body: bytes\n    }\n\nFor every message, the body is sent in one or more reports like this.\n\n    command get_twin @ 0x85 {\n        twin_result: pipe\n    }\n\nAsk for current device digital twin.\n\n    pipe report twin_json {\n    segmented:\n        json: bytes\n    }\n\nThe JSON-encoded twin. This is typically something like:\n`{ \"desired\": { \"foo\": 1, \"$version\": 12 }, \"reported\": { \"foo\": 1, \"bar\" 2, \"$version\": 123 } }`\n\n    meta pipe report twin_error @ 0x01 {\n        status_code: u32\n    }\n\nThis emitted if status is not 200.\n\n    command subscribe_twin @ 0x87 {\n        twin_updates: pipe\n    }\n\nSubscribe to updates to our twin.\n\n    pipe report twin_update_json {\n    multi-segmented:\n        json: bytes\n    }\n\nFirst, the current value of the twin is sent (this includes desired and reported properties).\nNext updates done by the back-end are streamed as they arrive (they only include the desired properties).\n\n    command patch_twin @ 0x86 {}\n    report {\n        patch_port: pipe_port\n    }\n\nStart twin update.\n\n    pipe command twin_patch_json {\n    segmented:\n        json: bytes\n    }\n\nThe JSON-encoded twin update. The pipe should be closed when the last packet is sent.\nYou just send updates for `reported` field, like this:\n`{ \"bar\": 3, \"baz\": null }` (skip `\"$version\"` and no `\"reported\": { ... }`).\n\n    command subscribe_method @ 0x88 {\n        method_call: pipe\n    }\n\nSubscribe to direct method calls.\n\n    pipe report method_call_body {\n    multi-segmented:\n        json: bytes\n    }\n\nThe method call body is sent using these packets.\nIf the body is empty, a single empty `method_call_body` is sent.\n\n    meta pipe report method_call @ 0x01 {\n        method_name: string0\n        request_id: string0\n    }\n\nThis is sent after the last part of the `method_call_body`.\n\n    command respond_to_method @ 0x89 {\n        status: u32\n        request_id: string0\n    }\n    report {\n        response_body: pipe_port\n    }\n\nRespond to a direct method call (`request_id` comes from `subscribe_method` pipe).\n\n    pipe command method_response {\n    segmented:\n        json: bytes\n    }\n\nThe pipe should be closed when the last packet of response body is sent.\n\n## Registers\n\n    ro connection_status: string @ 0x180\n\nReturns `\"ok\"` when connected, and an error description otherwise.\n\n    rw connection_string: string @ 0x80\n\nConnection string typically looks something like \n`HostName=my-iot-hub.azure-devices.net;DeviceId=my-dev-007;SharedAccessKey=xyz+base64key`.\nYou can get it in `Shared access policies -> iothubowner -> Connection string-primary key` in the Azure Portal.\nThis register is write-only.\nYou can use `hub_name` and `device_id` to check if connection string is set, but you cannot get the shared access key.\n\n    ro hub_name: string @ 0x181\n\nSomething like `my-iot-hub.azure-devices.net`; empty string when `connection_string` is not set.\n\n    ro device_id: string @ 0x182\n\nSomething like `my-dev-007`; empty string when `connection_string` is not set.\n\n\n## Events\n\n    event connected @ 0x01\n\nEmitted upon successful connection.\n\n    event connection_error @ 0x02 {\n        reason: string\n    }\n\nEmitted when connection was lost.\n\n    event devicebound_str @ 0x03 {\n        msg: string0\n    repeats:\n        property_name: string0\n        property_value: string0 \n    }\n\nThis event is emitted upon reception of a cloud to device message, that is a string\n(doesn't contain NUL bytes) and fits in a single event packet.\nFor reliable reception, use the `subscribe` command above.\n"
  },
  {
    "name": "Keyboard",
    "status": "experimental",
    "shortId": "keyboard",
    "camelName": "keyboard",
    "shortName": "keyboard",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A keyboard that can send keystrokes.\n\nThe codes for the key (selectors) is defined in the [HID Keyboard\nspecification](https://usb.org/sites/default/files/hut1_21.pdf), chapter 10 Keyboard/Keypad Page, page 81.\n\nThe device keeps tracks of the key state and is able to clear it all with the clear command."
    },
    "classIdentifier": 414210922,
    "enums": {
      "Modifiers": {
        "name": "Modifiers",
        "storage": 1,
        "isFlags": true,
        "members": {
          "LeftControl": 224,
          "LeftShift": 225,
          "LeftAlt": 226,
          "LeftGUID": 227,
          "RightControl": 228,
          "RightShift": 229,
          "RightAlt": 230,
          "RightGUID": 231
        }
      },
      "Action": {
        "name": "Action",
        "storage": 1,
        "members": {
          "Press": 0,
          "Up": 1,
          "Down": 2
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "key",
        "identifier": 128,
        "description": "Presses a key or a sequence of keys down.",
        "fields": [
          {
            "name": "selector",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "startRepeats": true
          },
          {
            "name": "modifiers",
            "unit": "",
            "type": "Modifiers",
            "storage": 1
          },
          {
            "name": "action",
            "unit": "",
            "type": "Action",
            "storage": 1
          }
        ],
        "packFormat": "r: u16 u8 u8"
      },
      {
        "kind": "command",
        "name": "clear",
        "identifier": 129,
        "description": "Clears all pressed keys.",
        "fields": []
      }
    ],
    "source": "# Keyboard\n\n    identifier: 0x18b05b6a\n    status: experimental\n    \nA keyboard that can send keystrokes.\n\nThe codes for the key (selectors) is defined in the [HID Keyboard\nspecification](https://usb.org/sites/default/files/hut1_21.pdf), chapter 10 Keyboard/Keypad Page, page 81.\n\nThe device keeps tracks of the key state and is able to clear it all with the clear command.\n\n## Commands\n\n    flags Modifiers : u8 {\n        LeftControl = 0xe0\n        LeftShift = 0xe1\n        LeftAlt = 0xe2\n        LeftGUID = 0xe3\n        RightControl = 0xe4\n        RightShift = 0xe5\n        RightAlt = 0xe6\n        RightGUID = 0xe7\n    }\n    enum Action : u8 {\n        Press = 0\n        Up = 1\n        Down = 2\n    }\n    command key @ 0x80 {\n    repeats:\n        selector: u16\n        modifiers: Modifiers\n        action: Action\n    }\n    \nPresses a key or a sequence of keys down.\n\n    command clear @ 0x81 {}\n    \nClears all pressed keys.\n"
  },
  {
    "name": "LED Matrix Controller",
    "status": "experimental",
    "shortId": "ledmatrixcontroller",
    "camelName": "ledMatrixController",
    "shortName": "ledMatrixController",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A service that allows to control a rectangular matrix of monochrome LEDs.\nTo stream the state of the screen, use [LED Matrix display](/services/led-matrix-display) instead."
    },
    "classIdentifier": 490070931,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "leds",
        "identifier": 128,
        "description": "Read or writes the state of the screen where pixel on/off state is \nstored as a bit, column by column. The column should be byte aligned.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "packFormat": "b"
      },
      {
        "kind": "rw",
        "name": "enabled",
        "identifier": 129,
        "description": "Disables or enables the whole screen.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "brightness",
        "identifier": 130,
        "description": "Sets the general brightness of the LEDs.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "const",
        "name": "rows",
        "identifier": 131,
        "description": "Number of rows on the screen",
        "fields": [
          {
            "name": "_",
            "unit": "#",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16"
      },
      {
        "kind": "const",
        "name": "columns",
        "identifier": 132,
        "description": "Number of columns on the screen",
        "fields": [
          {
            "name": "_",
            "unit": "#",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16"
      },
      {
        "kind": "command",
        "name": "clear",
        "identifier": 128,
        "description": "Shorthand command to clear all the LEDs on the screen.",
        "fields": []
      }
    ],
    "source": "# LED Matrix Controller\n\n    identifier: 0x1d35e393\n    camel: ledMatrixController\n\nA service that allows to control a rectangular matrix of monochrome LEDs.\nTo stream the state of the screen, use [LED Matrix display](/services/led-matrix-display) instead.\n\n## Registers\n\n    rw leds: bytes @ 0x80\n\nRead or writes the state of the screen where pixel on/off state is \nstored as a bit, column by column. The column should be byte aligned.\n\n    rw enabled: bool @ 0x81\n \n Disables or enables the whole screen.\n \n    rw brightness: u8 @ 0x82\n    \nSets the general brightness of the LEDs.\n \n    const rows: u16 # @ 0x83\n    \nNumber of rows on the screen\n\n    const columns: u16 # @ 0x84\n    \nNumber of columns on the screen\n\n## Commands\n\n    command clear @ 0x80 {}\n\nShorthand command to clear all the LEDs on the screen."
  },
  {
    "name": "LED Matrix Display",
    "status": "experimental",
    "shortId": "ledmatrixdisplay",
    "camelName": "ledMatrixDisplay",
    "shortName": "ledMatrixDisplay",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "A sensor that streams the state of a rectangular LED matrix.\nTo control the state of the screen, use [LED Matrix Controller](/services/led-matrix-controller) instead."
    },
    "classIdentifier": 286070091,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "ro",
        "name": "leds",
        "identifier": 257,
        "description": "Streams the state of the screen where pixel on/off state is \nstored as a bit, column by column. The column should be byte aligned.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "identifierName": "reading",
        "packFormat": "b"
      }
    ],
    "source": "# LED Matrix Display\n\n    identifier: 0x110d154b\n    extends: _sensor\n    camel: ledMatrixDisplay\n\nA sensor that streams the state of a rectangular LED matrix.\nTo control the state of the screen, use [LED Matrix Controller](/services/led-matrix-controller) instead.\n\n\n## Registers\n\n    ro leds : bytes @ reading\n    \nStreams the state of the screen where pixel on/off state is \nstored as a bit, column by column. The column should be byte aligned.\n"
  },
  {
    "name": "Light",
    "status": "experimental",
    "shortId": "light",
    "camelName": "light",
    "shortName": "light",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A controller for strips of RGB LEDs.",
      "long": "## Light programs\n\nRealistically, with 1 mbit JACDAC, we can transmit under 2k of data per animation frame (at 20fps).\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\ninstallations and it would completely clog the network.\n\nThus, light service defines a domain-specific language for describing light animations\nand efficiently transmitting them over wire.\n\nLight commands are not JACDAC commands.\nLight commands are efficiently encoded as sequences of bytes and typically sent as payload\nof `run` command.\n\nDefinitions:\n* `P` - position in the strip\n* `R` - number of repetitions of the command\n* `N` - number of pixels affected by the command\n* `C` - single color designation\n* `C+` - sequence of color designations\n\nUpdate modes:\n* `0` - replace\n* `1` - add RGB\n* `2` - subtract RGB\n* `3` - multiply RGB (by c/128); each pixel value will change by at least 1\n\nProgram commands:\n* `0xD0: set_all(C+)` - set all pixels in current range to given color pattern\n* `0xD1: fade(C+)` - set pixels in current range to colors between colors in sequence\n* `0xD2: fade_hsv(C+)` - similar to `fade()`, but colors are specified and faded in HSV\n* `0xD3: rotate_fwd(K)` - rotate (shift) pixels by `K` positions away from the connector\n* `0xD4: rotate_back(K)` - same, but towards the connector\n* `0xD5: show(M=50)` - send buffer to strip and wait `M` milliseconds\n* `0xD6: range(P=0, N=length, W=1, S=0)` - range from pixel `P`, `N` pixels long\n  (currently unsupported: every `W` pixels skip `S` pixels)\n* `0xD7: mode(K=0)` - set update mode\n* `0xD8: mode1(K=0)` - set update mode for next command only\n* `0xCF: set1(P, C)` - set one pixel at `P` (in current range) to given color\n\nA number `k` is encoded as follows:\n* `0 <= k < 128` -> `k`\n* `128 <= k < 16383` -> `0x80 | (k >> 8), k & 0xff`\n* bigger and negative numbers are not supported\n\nThus, bytes `0xC0-0xFF` are free to use for commands.\n\nFormats:\n* `0xC1, R, G, B` - single color parameter\n* `0xC2, R0, G0, B0, R1, G1, B1` - two color parameter\n* `0xC3, R0, G0, B0, R1, G1, B1, R2, G2, B2` - three color parameter\n* `0xC0, N, R0, G0, B0, ..., R(N-1), G(N-1), B(N-1)` - `N` color parameter\n* `0xCF, <number>, R, G, B` - `set1` special format\n\nCommands are encoded as command byte, followed by parameters in the order\nfrom the command definition.\n\nThe `set1()` command has irregular encoding to save space - it is byte `0xCF` followed by encoded\nnumber, and followed by 3 bytes of color."
    },
    "classIdentifier": 309264608,
    "enums": {
      "LightType": {
        "name": "LightType",
        "storage": 1,
        "members": {
          "WS2812B_GRB": 0,
          "APA102": 16,
          "SK9822": 17
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "brightness",
        "identifier": 1,
        "description": "Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true,
            "defaultValue": 15
          }
        ],
        "identifierName": "intensity",
        "packFormat": "u8"
      },
      {
        "kind": "ro",
        "name": "actual_brightness",
        "identifier": 384,
        "description": "This is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "light_type",
        "identifier": 128,
        "description": "Specifies the type of light strip connected to controller.\nControllers which are sold with lights should default to the correct type\nand could not allow change.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "LightType",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "num_pixels",
        "identifier": 129,
        "description": "Specifies the number of pixels in the strip.\nControllers which are sold with lights should default to the correct length\nand could not allow change.\nIncreasing length at runtime leads to ineffective use of memory and may lead to controller reboot.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "defaultValue": 15
          }
        ],
        "packFormat": "u16"
      },
      {
        "kind": "rw",
        "name": "max_power",
        "identifier": 7,
        "description": "Limit the power drawn by the light-strip (and controller).",
        "fields": [
          {
            "name": "_",
            "unit": "mA",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "defaultValue": 200
          }
        ],
        "identifierName": "max_power",
        "packFormat": "u16"
      },
      {
        "kind": "command",
        "name": "run",
        "identifier": 129,
        "description": "Run the given light \"program\". See service description for details.",
        "fields": [
          {
            "name": "program",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "packFormat": "b"
      }
    ],
    "source": "# Light\n\n    identifier: 0x126f00e0\n\nA controller for strips of RGB LEDs.\n\n## Light programs\n\nRealistically, with 1 mbit JACDAC, we can transmit under 2k of data per animation frame (at 20fps).\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\ninstallations and it would completely clog the network.\n\nThus, light service defines a domain-specific language for describing light animations\nand efficiently transmitting them over wire.\n\nLight commands are not JACDAC commands.\nLight commands are efficiently encoded as sequences of bytes and typically sent as payload\nof `run` command.\n\nDefinitions:\n* `P` - position in the strip\n* `R` - number of repetitions of the command\n* `N` - number of pixels affected by the command\n* `C` - single color designation\n* `C+` - sequence of color designations\n\nUpdate modes:\n* `0` - replace\n* `1` - add RGB\n* `2` - subtract RGB\n* `3` - multiply RGB (by c/128); each pixel value will change by at least 1\n\nProgram commands:\n* `0xD0: set_all(C+)` - set all pixels in current range to given color pattern\n* `0xD1: fade(C+)` - set pixels in current range to colors between colors in sequence\n* `0xD2: fade_hsv(C+)` - similar to `fade()`, but colors are specified and faded in HSV\n* `0xD3: rotate_fwd(K)` - rotate (shift) pixels by `K` positions away from the connector\n* `0xD4: rotate_back(K)` - same, but towards the connector\n* `0xD5: show(M=50)` - send buffer to strip and wait `M` milliseconds\n* `0xD6: range(P=0, N=length, W=1, S=0)` - range from pixel `P`, `N` pixels long\n  (currently unsupported: every `W` pixels skip `S` pixels)\n* `0xD7: mode(K=0)` - set update mode\n* `0xD8: mode1(K=0)` - set update mode for next command only\n* `0xCF: set1(P, C)` - set one pixel at `P` (in current range) to given color\n\nA number `k` is encoded as follows:\n* `0 <= k < 128` -> `k`\n* `128 <= k < 16383` -> `0x80 | (k >> 8), k & 0xff`\n* bigger and negative numbers are not supported\n\nThus, bytes `0xC0-0xFF` are free to use for commands.\n\nFormats:\n* `0xC1, R, G, B` - single color parameter\n* `0xC2, R0, G0, B0, R1, G1, B1` - two color parameter\n* `0xC3, R0, G0, B0, R1, G1, B1, R2, G2, B2` - three color parameter\n* `0xC0, N, R0, G0, B0, ..., R(N-1), G(N-1), B(N-1)` - `N` color parameter\n* `0xCF, <number>, R, G, B` - `set1` special format\n\nCommands are encoded as command byte, followed by parameters in the order\nfrom the command definition.\n\nThe `set1()` command has irregular encoding to save space - it is byte `0xCF` followed by encoded\nnumber, and followed by 3 bytes of color.\n\n## Registers\n\n    rw brightness = 15: u8 / @ intensity\n\nSet the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.\n\n    ro actual_brightness: u8 / @ 0x180\n\nThis is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.\n \n    enum LightType : u8 {\n        WS2812B_GRB = 0x00\n        APA102 = 0x10\n        SK9822 = 0x11\n    }\n    rw light_type: LightType @ 0x80\n\nSpecifies the type of light strip connected to controller.\nControllers which are sold with lights should default to the correct type\nand could not allow change.\n\n    rw num_pixels = 15: u16 @ 0x81\n\nSpecifies the number of pixels in the strip.\nControllers which are sold with lights should default to the correct length\nand could not allow change.\nIncreasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n\n    rw max_power = 200: u16 mA @ max_power\n\nLimit the power drawn by the light-strip (and controller).\n\n## Commands\n\n    command run @ 0x81 {\n        program: bytes\n    }\n\nRun the given light \"program\". See service description for details.\n"
  },
  {
    "name": "Logger",
    "status": "experimental",
    "shortId": "logger",
    "camelName": "logger",
    "shortName": "logger",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A service which can report messages to the bus."
    },
    "classIdentifier": 316415946,
    "enums": {
      "Priority": {
        "name": "Priority",
        "storage": 1,
        "members": {
          "Debug": 0,
          "Log": 1,
          "Warning": 2,
          "Error": 3,
          "Silent": 4
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "min_priority",
        "identifier": 128,
        "description": "Messages with level lower than this won't be emitted. The default setting may vary.\nLoggers should revert this to their default setting if the register has not been\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\nThus, clients should write this register every 1000ms and ignore messages which are\ntoo verbose for them.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "Priority",
            "storage": 1,
            "defaultValue": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "report",
        "name": "debug",
        "identifier": 128,
        "description": "Report a message.",
        "fields": [
          {
            "name": "message",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "report",
        "name": "log",
        "identifier": 129,
        "description": "Report a message.",
        "fields": [
          {
            "name": "message",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "report",
        "name": "warn",
        "identifier": 130,
        "description": "Report a message.",
        "fields": [
          {
            "name": "message",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "report",
        "name": "error",
        "identifier": 131,
        "description": "Report a message.",
        "fields": [
          {
            "name": "message",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      }
    ],
    "source": "# Logger\n\n    identifier: 0x12dc1fca\n\nA service which can report messages to the bus.\n\n## Registers\n\n    enum Priority : u8 {\n        Debug = 0,\n        Log = 1,\n        Warning = 2,\n        Error = 3,\n        Silent = 4\n    }\n    rw min_priority = 1: Priority @ 0x80\n\nMessages with level lower than this won't be emitted. The default setting may vary.\nLoggers should revert this to their default setting if the register has not been\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\nThus, clients should write this register every 1000ms and ignore messages which are\ntoo verbose for them.\n\n## Commands\n\n    report debug @ 0x80 {\n        message: string\n    }\n    report log @ 0x81 {\n        message: string\n    }\n    report warn @ 0x82 {\n        message: string\n    }\n    report error @ 0x83 {\n        message: string\n    }\n\nReport a message.\n"
  },
  {
    "name": "Microphone",
    "status": "experimental",
    "shortId": "microphone",
    "camelName": "microphone",
    "shortName": "microphone",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A single-channel microphone."
    },
    "classIdentifier": 289254534,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "sample",
        "identifier": 129,
        "description": "The samples will be streamed back over the `samples` pipe.\nIf `num_samples` is `0`, streaming will only stop when the pipe is closed.\nOtherwise the specified number of samples is streamed.\nSamples are sent as `i16`.",
        "fields": [
          {
            "name": "samples",
            "unit": "",
            "type": "pipe",
            "storage": 12
          },
          {
            "name": "num_samples",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "pipeType": "sample",
        "packFormat": "b[12] u32"
      },
      {
        "kind": "rw",
        "name": "sampling_period",
        "identifier": 128,
        "description": "Get or set microphone sampling period.\nSampling rate is `1_000_000 / sampling_period Hz`.",
        "fields": [
          {
            "name": "_",
            "unit": "us",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      }
    ],
    "source": "# Microphone\n\n    identifier: 0x113dac86\n\nA single-channel microphone.\n\n## Commands\n\n    command sample @ 0x81 {\n        samples: pipe\n        num_samples: u32\n    }\n\nThe samples will be streamed back over the `samples` pipe.\nIf `num_samples` is `0`, streaming will only stop when the pipe is closed.\nOtherwise the specified number of samples is streamed.\nSamples are sent as `i16`.\n\n## Registers\n\n    rw sampling_period: u32 us @ 0x80\n\nGet or set microphone sampling period.\nSampling rate is `1_000_000 / sampling_period Hz`.\n\n"
  },
  {
    "name": "Model Runner",
    "status": "experimental",
    "shortId": "modelrunner",
    "camelName": "modelRunner",
    "shortName": "modelRunner",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Run machine learning models.\nOnly models with a single input tensor and a single output tensor are supported at the moment.\nInput is provided by Sensor Aggregator service on the same device.\nMultiple instances of this service may be present, if more than one model format is supported by a device."
    },
    "classIdentifier": 336566904,
    "enums": {
      "ModelFormat": {
        "name": "ModelFormat",
        "storage": 4,
        "members": {
          "TFLite": 860636756,
          "ML4F": 809963362,
          "EdgeImpulseCompiled": 810961221
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "set_model",
        "identifier": 128,
        "description": "Open pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.",
        "fields": [
          {
            "name": "model_size",
            "unit": "B",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "hasReport": true,
        "packFormat": "u32"
      },
      {
        "kind": "report",
        "name": "set_model",
        "identifier": 128,
        "description": "Open pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.",
        "fields": [
          {
            "name": "model_port",
            "unit": "",
            "type": "pipe_port",
            "storage": 2
          }
        ],
        "secondary": true,
        "pipeType": "set_model",
        "packFormat": "u16"
      },
      {
        "kind": "command",
        "name": "predict",
        "identifier": 129,
        "description": "Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.",
        "fields": [
          {
            "name": "outputs",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "predict",
        "hasReport": true,
        "packFormat": "b[12]"
      },
      {
        "kind": "report",
        "name": "predict",
        "identifier": 129,
        "description": "Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.",
        "fields": [
          {
            "name": "inputs",
            "unit": "",
            "type": "pipe_port",
            "storage": 2
          }
        ],
        "secondary": true,
        "pipeType": "predict",
        "packFormat": "u16"
      },
      {
        "kind": "rw",
        "name": "auto_invoke_every",
        "identifier": 128,
        "description": "When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\nThe `outputs` register will stream its value after each run.\nThis register is not stored in flash.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16"
      },
      {
        "kind": "ro",
        "name": "outputs",
        "identifier": 257,
        "description": "Results of last model invocation as `float32` array.",
        "fields": [
          {
            "name": "output",
            "unit": "",
            "isFloat": true,
            "type": "f32",
            "storage": 4,
            "startRepeats": true
          }
        ],
        "identifierName": "reading",
        "packFormat": "r: f32"
      },
      {
        "kind": "ro",
        "name": "input_shape",
        "identifier": 384,
        "description": "The shape of the input tensor.",
        "fields": [
          {
            "name": "dimension",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "startRepeats": true
          }
        ],
        "packFormat": "r: u16"
      },
      {
        "kind": "ro",
        "name": "output_shape",
        "identifier": 385,
        "description": "The shape of the output tensor.",
        "fields": [
          {
            "name": "dimension",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "startRepeats": true
          }
        ],
        "packFormat": "r: u16"
      },
      {
        "kind": "ro",
        "name": "last_run_time",
        "identifier": 386,
        "description": "The time consumed in last model execution.",
        "fields": [
          {
            "name": "_",
            "unit": "us",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "ro",
        "name": "allocated_arena_size",
        "identifier": 387,
        "description": "Number of RAM bytes allocated for model execution.",
        "fields": [
          {
            "name": "_",
            "unit": "B",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "ro",
        "name": "model_size",
        "identifier": 388,
        "description": "The size of the model in bytes.",
        "fields": [
          {
            "name": "_",
            "unit": "B",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "ro",
        "name": "last_error",
        "identifier": 389,
        "description": "Textual description of last error when running or loading model (if any).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "const",
        "name": "format",
        "identifier": 390,
        "description": "The type of ML models supported by this service.\n`TFLite` is flatbuffer `.tflite` file.\n`ML4F` is compiled machine code model for Cortex-M4F.\nThe format is typically present as first or second little endian word of model file.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "ModelFormat",
            "storage": 4
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "const",
        "name": "format_version",
        "identifier": 391,
        "description": "A version number for the format.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "const",
        "name": "parallel",
        "identifier": 392,
        "description": "If present and true this service can run models independently of other\ninstances of this service on the device.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "optional": true,
        "packFormat": "u8"
      }
    ],
    "source": "# Model Runner\n\n    identifier: 0x140f9a78\n\nRun machine learning models.\nOnly models with a single input tensor and a single output tensor are supported at the moment.\nInput is provided by Sensor Aggregator service on the same device.\nMultiple instances of this service may be present, if more than one model format is supported by a device.\n\n## Commands\n\n    command set_model @ 0x80 {\n        model_size: u32 B\n    }\n    report {\n        model_port: pipe_port\n    }\n\nOpen pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.\n\n    command predict @ 0x81 {\n        outputs: pipe\n    }\n    report {\n        inputs: pipe_port\n    }\n\nOpen channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.\n\n## Registers\n\n    rw auto_invoke_every: u16 @ 0x80\n\nWhen register contains `N > 0`, run the model automatically every time new `N` samples are collected.\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\nThe `outputs` register will stream its value after each run.\nThis register is not stored in flash.\n\n    ro outputs @ reading {\n    repeats:\n        output: f32\n    }\n\nResults of last model invocation as `float32` array.\n\n    ro input_shape @ 0x180 {\n    repeats:\n        dimension: u16\n    }\n\nThe shape of the input tensor.\n\n    ro output_shape @ 0x181 {\n    repeats:\n        dimension: u16\n    }\n\nThe shape of the output tensor.\n\n    ro last_run_time: u32 us @ 0x182\n\nThe time consumed in last model execution.\n\n    ro allocated_arena_size: u32 B @ 0x183\n\nNumber of RAM bytes allocated for model execution.\n\n    ro model_size: u32 B @ 0x184\n\nThe size of the model in bytes.\n\n    ro last_error: string @ 0x185\n\nTextual description of last error when running or loading model (if any).\n\n    enum ModelFormat: u32 {\n        TFLite = 0x334c4654,\n        ML4F = 0x30470f62,\n        EdgeImpulseCompiled = 0x30564945,\n    }\n    const format: ModelFormat @ 0x186\n\nThe type of ML models supported by this service.\n`TFLite` is flatbuffer `.tflite` file.\n`ML4F` is compiled machine code model for Cortex-M4F.\nThe format is typically present as first or second little endian word of model file.\n\n    const format_version: u32 @ 0x187\n\nA version number for the format.\n\n    const parallel?: bool @ 0x188\n\nIf present and true this service can run models independently of other\ninstances of this service on the device.\n"
  },
  {
    "name": "Mono Light",
    "status": "experimental",
    "shortId": "monolight",
    "camelName": "monoLight",
    "shortName": "monoLight",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A controller for 1 or more LEDs connected in parallel.",
      "long": "## Animation steps\n\nAnimations are described using pairs of intensity and duration.\nFor example, the following animation\n`(0, 10ms), (0.5, 5ms), (0.5, 10ms), (1, 5ms), (0, 7ms), (0, 0ms)`\nwill gradually rise the intensity `0 - 0.5` in 10ms,\nthen, it will keep it steady for at `0.5` for 5ms,\nthen it will rise it again `0.5 - 1` over 10ms,\ndrop `1 - 0` in 5ms,\nand keep it at 0 for 7ms more.\nAny entry with duration of 0ms is considered to be end-marker.\n\nTo get steady glow at `x`, use animation of `(x, 60000ms), (x, 0ms)` and keep `max_iterations` at `0xffff`."
    },
    "classIdentifier": 531985491,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "brightness",
        "identifier": 1,
        "description": "Set the luminosity of the strip. The value is used to scale `start_intensity` in `steps` register.\nAt `0` the power to the strip is completely shut down.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 16,
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "identifierName": "intensity",
        "packFormat": "u16"
      },
      {
        "kind": "rw",
        "name": "max_power",
        "identifier": 7,
        "description": "Limit the power drawn by the light-strip (and controller).",
        "fields": [
          {
            "name": "_",
            "unit": "mA",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "defaultValue": 100
          }
        ],
        "identifierName": "max_power",
        "packFormat": "u16"
      },
      {
        "kind": "const",
        "name": "max_steps",
        "identifier": 384,
        "description": "Maximum number of steps allowed in animation definition. This determines the size of the `steps` register.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "steps",
        "identifier": 130,
        "description": "The steps of current animation. Setting this also sets `current_iteration` to `0`.\nStep with `duration == 0` is treated as an end marker.",
        "fields": [
          {
            "name": "start_intensity",
            "unit": "/",
            "shift": 16,
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "startRepeats": true
          },
          {
            "name": "duration",
            "unit": "ms",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "r: u16 u16"
      },
      {
        "kind": "rw",
        "name": "current_iteration",
        "identifier": 128,
        "description": "Currently excecuting iteration of animation. Can be set to `0` to restart current animation.\nIf `current_iteration > max_iterations`, then no animation is currently running.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "u16"
      },
      {
        "kind": "rw",
        "name": "max_iterations",
        "identifier": 129,
        "description": "The animation will be repeated `max_iterations + 1` times.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "defaultValue": 65535
          }
        ],
        "packFormat": "u16"
      }
    ],
    "source": "# Mono Light\n\n    identifier: 0x1fb57453\n    camel: monoLight\n\nA controller for 1 or more LEDs connected in parallel.\n\n## Animation steps\n\nAnimations are described using pairs of intensity and duration.\nFor example, the following animation\n`(0, 10ms), (0.5, 5ms), (0.5, 10ms), (1, 5ms), (0, 7ms), (0, 0ms)`\nwill gradually rise the intensity `0 - 0.5` in 10ms,\nthen, it will keep it steady for at `0.5` for 5ms,\nthen it will rise it again `0.5 - 1` over 10ms,\ndrop `1 - 0` in 5ms,\nand keep it at 0 for 7ms more.\nAny entry with duration of 0ms is considered to be end-marker.\n\nTo get steady glow at `x`, use animation of `(x, 60000ms), (x, 0ms)` and keep `max_iterations` at `0xffff`.\n\n## Registers\n\n    rw brightness: u16 / @ intensity\n\nSet the luminosity of the strip. The value is used to scale `start_intensity` in `steps` register.\nAt `0` the power to the strip is completely shut down.\n\n    rw max_power = 100: u16 mA @ max_power\n\nLimit the power drawn by the light-strip (and controller).\n\n    const max_steps: u8 @ 0x180\n\nMaximum number of steps allowed in animation definition. This determines the size of the `steps` register.\n\n    rw steps @ 0x82 {\n        repeats:\n            start_intensity: u16 /\n            duration: u16 ms\n    }\n\nThe steps of current animation. Setting this also sets `current_iteration` to `0`.\nStep with `duration == 0` is treated as an end marker.\n\n    rw current_iteration: u16 @ 0x80\n\nCurrently excecuting iteration of animation. Can be set to `0` to restart current animation.\nIf `current_iteration > max_iterations`, then no animation is currently running.\n\n    rw max_iterations = 0xffff: u16 @ 0x81\n\nThe animation will be repeated `max_iterations + 1` times.\n"
  },
  {
    "name": "Motor",
    "status": "experimental",
    "shortId": "motor",
    "camelName": "motor",
    "shortName": "motor",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A bi-directional DC motor."
    },
    "classIdentifier": 385895640,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "duty",
        "identifier": 2,
        "description": "PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\nPositive is recommended to be clockwise rotation and negative counterclockwise.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 15,
            "type": "i16",
            "storage": -2,
            "isSimpleType": true
          }
        ],
        "identifierName": "value",
        "packFormat": "i16"
      },
      {
        "kind": "rw",
        "name": "enabled",
        "identifier": 1,
        "description": "Turn the power to the motor on/off.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "identifierName": "intensity",
        "packFormat": "u8"
      }
    ],
    "source": "# Motor\n\n    identifier: 0x17004cd8\n\nA bi-directional DC motor.\n\n## Registers\n\n    rw duty: i16 / @ value\n\nPWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\nPositive is recommended to be clockwise rotation and negative counterclockwise.\n\n    rw enabled: bool @ intensity\n\nTurn the power to the motor on/off.\n"
  },
  {
    "name": "Mouse",
    "status": "experimental",
    "shortId": "mouse",
    "camelName": "mouse",
    "shortName": "mouse",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Control a device that acts as a mouse."
    },
    "classIdentifier": 411425820,
    "enums": {
      "Button": {
        "name": "Button",
        "storage": 2,
        "isFlags": true,
        "members": {
          "Right": 1,
          "Middle": 4,
          "Left": 2
        }
      },
      "ButtonEvent": {
        "name": "ButtonEvent",
        "storage": 1,
        "members": {
          "Up": 1,
          "Down": 2,
          "Click": 3,
          "DoubleClick": 4
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "set_button",
        "identifier": 128,
        "description": "Sets the up/down state of one or more buttons.\nA ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\nA ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).",
        "fields": [
          {
            "name": "buttons",
            "unit": "",
            "type": "Button",
            "storage": 2
          },
          {
            "name": "event",
            "unit": "",
            "type": "ButtonEvent",
            "storage": 1
          }
        ],
        "packFormat": "u16 u8"
      },
      {
        "kind": "command",
        "name": "move",
        "identifier": 129,
        "description": "Moves the mouse by the distance specified.\nIf the time is positive, it specifies how long to make the move.",
        "fields": [
          {
            "name": "dx",
            "unit": "#",
            "type": "i16",
            "storage": -2,
            "isSimpleType": true
          },
          {
            "name": "dy",
            "unit": "#",
            "type": "i16",
            "storage": -2,
            "isSimpleType": true
          },
          {
            "name": "time",
            "unit": "ms",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "i16 i16 u16"
      },
      {
        "kind": "command",
        "name": "wheel",
        "identifier": 130,
        "description": "Turns the wheel up or down. Positive if scrolling up.\nIf the time is positive, it specifies how long to make the move.",
        "fields": [
          {
            "name": "dy",
            "unit": "#",
            "type": "i16",
            "storage": -2,
            "isSimpleType": true
          },
          {
            "name": "time",
            "unit": "ms",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "packFormat": "i16 u16"
      }
    ],
    "source": "# Mouse\n\n    identifier: 0x1885dc1c\n    status: experimental\n\nControl a device that acts as a mouse.\n\n## Commands\n\n    flags Button : u16 {\n        Right = 0x01\n        Middle = 0x04\n        Left = 0x02\n    }\n    enum ButtonEvent : u8 {\n        Up = 0x01\n        Down = 0x02\n        Click = 0x03\n        DoubleClick = 0x04\n    }\n    command set_button @ 0x80 {\n        buttons: Button\n        event: ButtonEvent\n    }\n\nSets the up/down state of one or more buttons.\nA ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\nA ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).\n\n    command move @ 0x81 {\n      dx: i16 #\n      dy: i16 #\n      time: u16 ms\n    }\n\nMoves the mouse by the distance specified.\nIf the time is positive, it specifies how long to make the move.\n\n    command wheel @ 0x82 {\n        dy: i16 #\n        time: u16 ms\n    }\n\nTurns the wheel up or down. Positive if scrolling up.\nIf the time is positive, it specifies how long to make the move.\n"
  },
  {
    "name": "Multitouch",
    "status": "experimental",
    "shortId": "multitouch",
    "camelName": "multitouch",
    "shortName": "multitouch",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "A capacitive touch sensor with multiple inputs.",
      "events": "Most events include the channel number of the input."
    },
    "classIdentifier": 416636459,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "ro",
        "name": "capacity",
        "identifier": 257,
        "description": "Capacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\nno touch, wheres a value of around `100` or more indicates touch.\nIt's best to ignore this (unless debugging), and use events.",
        "fields": [
          {
            "name": "capacitance",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true,
            "startRepeats": true
          }
        ],
        "identifierName": "reading",
        "packFormat": "r: i32"
      },
      {
        "kind": "event",
        "name": "touch",
        "identifier": 1,
        "description": "Emitted when an input is touched.",
        "fields": [
          {
            "name": "channel",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "event",
        "name": "release",
        "identifier": 2,
        "description": "Emitted when an input is no longer touched.",
        "fields": [
          {
            "name": "channel",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "event",
        "name": "tap",
        "identifier": 3,
        "description": "Emitted when an input is briefly touched. TODO Not implemented.",
        "fields": [
          {
            "name": "channel",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "event",
        "name": "long_press",
        "identifier": 4,
        "description": "Emitted when an input is touched for longer than 500ms. TODO Not implemented.",
        "fields": [
          {
            "name": "channel",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "event",
        "name": "swipe_pos",
        "identifier": 16,
        "description": "Emitted when input channels are successively touched in order of increasing channel numbers.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "swipe_neg",
        "identifier": 17,
        "description": "Emitted when input channels are successively touched in order of decreasing channel numbers.",
        "fields": []
      }
    ],
    "source": "# Multitouch\n\n    identifier: 0x18d55e2b\n    extends: _sensor\n\nA capacitive touch sensor with multiple inputs.\n\n## Registers\n\n    ro capacity @ reading {\n    repeats:\n        capacitance: i32\n    }\n\nCapacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\nno touch, wheres a value of around `100` or more indicates touch.\nIt's best to ignore this (unless debugging), and use events.\n\n## Events\n\nMost events include the channel number of the input.\n\n    event touch @ 0x01 {\n        channel: u32\n    }\n\nEmitted when an input is touched.\n\n    event release @ 0x02 {\n        channel: u32\n    }\n\nEmitted when an input is no longer touched.\n\n    event tap @ 0x03 {\n        channel: u32\n    }\n\nEmitted when an input is briefly touched. TODO Not implemented.\n\n    event long_press @ 0x04 {\n        channel: u32\n    }\n\nEmitted when an input is touched for longer than 500ms. TODO Not implemented.\n\n    event swipe_pos @ 0x10\n\nEmitted when input channels are successively touched in order of increasing channel numbers.\n\n    event swipe_neg @ 0x11\n\nEmitted when input channels are successively touched in order of decreasing channel numbers.\n"
  },
  {
    "name": "Power",
    "status": "experimental",
    "shortId": "power",
    "camelName": "power",
    "shortName": "power",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "A power-provider service."
    },
    "classIdentifier": 530893146,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "enabled",
        "identifier": 1,
        "description": "Turn the power to the bus on/off.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1,
            "defaultValue": 1
          }
        ],
        "identifierName": "intensity",
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "max_power",
        "identifier": 7,
        "description": "Limit the power provided by the service. The actual maximum limit will depend on hardware.\nThis field may be read-only in some implementations - you should read it back after setting.",
        "fields": [
          {
            "name": "_",
            "unit": "mA",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "defaultValue": 500,
            "typicalMax": 500,
            "typicalMin": 0
          }
        ],
        "identifierName": "max_power",
        "packFormat": "u16"
      },
      {
        "kind": "ro",
        "name": "overload",
        "identifier": 385,
        "description": "Indicates whether the power has been shut down due to overdraw.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "ro",
        "name": "current_draw",
        "identifier": 257,
        "description": "Present current draw from the bus.",
        "fields": [
          {
            "name": "_",
            "unit": "mA",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "identifierName": "reading",
        "packFormat": "u16"
      },
      {
        "kind": "ro",
        "name": "battery_voltage",
        "identifier": 384,
        "description": "Voltage on input.",
        "fields": [
          {
            "name": "_",
            "unit": "mV",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "typicalMin": 4500,
            "typicalMax": 5500
          }
        ],
        "packFormat": "u16"
      },
      {
        "kind": "ro",
        "name": "battery_charge",
        "identifier": 386,
        "description": "Fraction of charge in the battery.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 16,
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "packFormat": "u16"
      },
      {
        "kind": "const",
        "name": "battery_capacity",
        "identifier": 387,
        "description": "Energy that can be delivered to the bus when battery is fully charged.\nThis excludes conversion overheads if any.",
        "fields": [
          {
            "name": "_",
            "unit": "mWh",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "packFormat": "u32"
      },
      {
        "kind": "rw",
        "name": "keep_on_pulse_duration",
        "identifier": 128,
        "description": "Many USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "defaultValue": 600
          }
        ],
        "packFormat": "u16"
      },
      {
        "kind": "rw",
        "name": "keep_on_pulse_period",
        "identifier": 129,
        "description": "Many USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true,
            "defaultValue": 20000
          }
        ],
        "packFormat": "u16"
      }
    ],
    "source": "# Power\n\n    identifier: 0x1fa4c95a\n\nA power-provider service.\n\n## Registers\n\n    rw enabled = 1: bool @ intensity\n\nTurn the power to the bus on/off.\n\n    rw max_power = 500: u16 mA {typical_max = 500} @ max_power\n\nLimit the power provided by the service. The actual maximum limit will depend on hardware.\nThis field may be read-only in some implementations - you should read it back after setting.\n\n    ro overload: bool @ 0x181\n\nIndicates whether the power has been shut down due to overdraw.\n\n    ro current_draw: u16 mA @ reading\n\nPresent current draw from the bus.\n\n    ro battery_voltage: u16 mV {typical_min = 4500, typical_max = 5500} @ 0x180\n\nVoltage on input.\n\n    ro battery_charge?: u16 / @ 0x182\n\nFraction of charge in the battery.\n\n    const battery_capacity?: u32 mWh @ 0x183\n\nEnergy that can be delivered to the bus when battery is fully charged.\nThis excludes conversion overheads if any.\n\n    rw keep_on_pulse_duration = 600: u16 ms @ 0x80\n    rw keep_on_pulse_period = 20000: u16 ms @ 0x81\n\nMany USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n"
  },
  {
    "name": "Protocol Test",
    "status": "experimental",
    "shortId": "prototest",
    "camelName": "protoTest",
    "shortName": "protoTest",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "This is test service to validate the protocol packet transmissions between the browser and a MCU.\nUse this page if you developing JACDAC HDK for a new platform.",
      "long": "### Test procedure\n\nFor each ``rw`` registers, set a random value ``x``\n  * read ``rw`` and check value is equal to ``x``\n  * read ``ro`` and check value is equal to ``x``\n  * listen to ``e`` event and check that data is equal to ``x``\n  * call ``c`` command with new random value ``y``\n  * read ``rw`` and check value is equal to ``y``\n  * do all the above steps with acks\n\nFor each ``rw`` registers, there shall also\nbe an ``event`` and a ``command``. The event\nshould get raised when the value changes;\nand the command should set the value.",
      "registers": "Every ``rw`` register has a corresponding ``ro`` regisrer\nand a corresponding ``set_...`` command to also set the value."
    },
    "classIdentifier": 382158442,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "rw_bool",
        "identifier": 129,
        "description": "A read write bool register.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "ro",
        "name": "ro_bool",
        "identifier": 385,
        "description": "A read only bool register. Mirrors rw_bool.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "rw",
        "name": "rw_u32",
        "identifier": 130,
        "description": "A read write u32 register.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "ro",
        "name": "ro_u32",
        "identifier": 386,
        "description": "A read only u32 register.. Mirrors rw_u32.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "rw",
        "name": "rw_i32",
        "identifier": 131,
        "description": "A read write i32 register.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i32"
      },
      {
        "kind": "ro",
        "name": "ro_i32",
        "identifier": 387,
        "description": "A read only i32 register.. Mirrors rw_i32.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i32"
      },
      {
        "kind": "rw",
        "name": "rw_string",
        "identifier": 132,
        "description": "A read write string register.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "ro",
        "name": "ro_string",
        "identifier": 388,
        "description": "A read only string register. Mirrors rw_string.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "rw",
        "name": "rw_bytes",
        "identifier": 133,
        "description": "A read write string register.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "packFormat": "b"
      },
      {
        "kind": "ro",
        "name": "ro_bytes",
        "identifier": 389,
        "description": "A read only string register. Mirrors ro_bytes.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "packFormat": "b"
      },
      {
        "kind": "rw",
        "name": "rw_i8_u8_u16_i32",
        "identifier": 134,
        "description": "A read write i8, u8, u16, i32 register.",
        "fields": [
          {
            "name": "i8",
            "unit": "",
            "type": "i8",
            "storage": -1,
            "isSimpleType": true
          },
          {
            "name": "u8",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "u16",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "i32",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i8 u8 u16 i32"
      },
      {
        "kind": "ro",
        "name": "ro_i8_u8_u16_i32",
        "identifier": 390,
        "description": "A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.",
        "fields": [
          {
            "name": "i8",
            "unit": "",
            "type": "i8",
            "storage": -1,
            "isSimpleType": true
          },
          {
            "name": "u8",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "u16",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "i32",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i8 u8 u16 i32"
      },
      {
        "kind": "event",
        "name": "e_bool",
        "identifier": 129,
        "description": "An event raised when rw_bool is modified",
        "fields": [
          {
            "name": "bool",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "event",
        "name": "e_u32",
        "identifier": 130,
        "description": "An event raised when rw_u32 is modified",
        "fields": [
          {
            "name": "u32",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "event",
        "name": "e_i32",
        "identifier": 131,
        "description": "An event raised when rw_i32 is modified",
        "fields": [
          {
            "name": "i32",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i32"
      },
      {
        "kind": "event",
        "name": "e_string",
        "identifier": 132,
        "description": "An event raised when rw_string is modified",
        "fields": [
          {
            "name": "string",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "event",
        "name": "e_bytes",
        "identifier": 133,
        "description": "An event raised when rw_bytes is modified",
        "fields": [
          {
            "name": "bytes",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "packFormat": "b"
      },
      {
        "kind": "event",
        "name": "e_i8_u8_u16_i32",
        "identifier": 134,
        "description": "An event raised when rw_i8_u8_u16_i32 is modified",
        "fields": [
          {
            "name": "i8",
            "unit": "",
            "type": "i8",
            "storage": -1,
            "isSimpleType": true
          },
          {
            "name": "u8",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "u16",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "i32",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i8 u8 u16 i32"
      },
      {
        "kind": "command",
        "name": "c_bool",
        "identifier": 129,
        "description": "A command to set rw_bool. Returns the value.",
        "fields": [
          {
            "name": "bool",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "command",
        "name": "c_u32",
        "identifier": 130,
        "description": "A command to set rw_u32. Returns the value.",
        "fields": [
          {
            "name": "u32",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "packFormat": "u32"
      },
      {
        "kind": "command",
        "name": "c_i32",
        "identifier": 131,
        "description": "A command to set rw_i32. Returns the value.",
        "fields": [
          {
            "name": "i32",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i32"
      },
      {
        "kind": "command",
        "name": "c_string",
        "identifier": 132,
        "description": "A command to set rw_string. Returns the value.",
        "fields": [
          {
            "name": "string",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "command",
        "name": "c_bytes",
        "identifier": 133,
        "description": "A command to set rw_string. Returns the value.",
        "fields": [
          {
            "name": "bytes",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "packFormat": "b"
      },
      {
        "kind": "command",
        "name": "c_i8_u8_u16_i32",
        "identifier": 134,
        "description": "A command to set rw_bytes. Returns the value.",
        "fields": [
          {
            "name": "i8",
            "unit": "",
            "type": "i8",
            "storage": -1,
            "isSimpleType": true
          },
          {
            "name": "u8",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          },
          {
            "name": "u16",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "i32",
            "unit": "",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "packFormat": "i8 u8 u16 i32"
      },
      {
        "kind": "command",
        "name": "c_report_pipe",
        "identifier": 135,
        "description": "A command to read the rw_bytes, byte per byte, as a pipe.",
        "fields": [
          {
            "name": "p_bytes",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "c_report_pipe",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "p_bytes",
        "identifier": 0,
        "description": "A command to read the rw_bytes, byte per byte, as a pipe.",
        "fields": [
          {
            "name": "bytes",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "pipeType": "c_report_pipe",
        "packFormat": "b"
      }
    ],
    "source": "# Protocol Test\n\n    identifier: 0x16c7466a\n    camel: protoTest\n\nThis is test service to validate the protocol packet transmissions between the browser and a MCU.\nUse this page if you developing JACDAC HDK for a new platform.\n\n### Test procedure\n\nFor each ``rw`` registers, set a random value ``x``\n  * read ``rw`` and check value is equal to ``x``\n  * read ``ro`` and check value is equal to ``x``\n  * listen to ``e`` event and check that data is equal to ``x``\n  * call ``c`` command with new random value ``y``\n  * read ``rw`` and check value is equal to ``y``\n  * do all the above steps with acks\n\nFor each ``rw`` registers, there shall also\nbe an ``event`` and a ``command``. The event\nshould get raised when the value changes;\nand the command should set the value.\n  \n## Registers\n\nEvery ``rw`` register has a corresponding ``ro`` regisrer\nand a corresponding ``set_...`` command to also set the value.\n\n    rw rw_bool : bool @ 0x081\n\nA read write bool register.\n\n    ro ro_bool : bool @ 0x181\n\nA read only bool register. Mirrors rw_bool.\n\n    rw rw_u32 : u32 @ 0x082\n\nA read write u32 register.\n\n    ro ro_u32 : u32 @ 0x182\n\nA read only u32 register.. Mirrors rw_u32.\n\n    rw rw_i32 : i32 @ 0x083\n\nA read write i32 register.\n\n    ro ro_i32 : i32 @ 0x183\n\nA read only i32 register.. Mirrors rw_i32.\n\n    rw rw_string : string @ 0x084\n\nA read write string register.\n\n    ro ro_string : string @ 0x184\n\nA read only string register. Mirrors rw_string.\n\n    rw rw_bytes : bytes @ 0x085\n\nA read write string register.\n\n    ro ro_bytes : bytes @ 0x185\n\nA read only string register. Mirrors ro_bytes.\n\n    rw rw_i8_u8_u16_i32 @ 0x86 {\n        i8: i8\n        u8: u8\n        u16: u16\n        i32: i32\n    }\n\nA read write i8, u8, u16, i32 register.\n\n    ro ro_i8_u8_u16_i32 @ 0x186 {\n        i8: i8\n        u8: u8\n        u16: u16\n        i32: i32\n    }\n\nA read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.\n\n## Events\n\n    event e_bool @ 0x81 { \n        bool: bool \n    }\n\nAn event raised when rw_bool is modified\n\n    event e_u32 @ 0x82 { \n        u32: u32 \n    }\n\nAn event raised when rw_u32 is modified\n\n    event e_i32 @ 0x83 { \n        i32: i32 \n    }\n\nAn event raised when rw_i32 is modified\n\n    event e_string @ 0x84 { \n        string: string \n    }\n\nAn event raised when rw_string is modified\n\n    event e_bytes @ 0x85 { \n        bytes: bytes \n    }\n\nAn event raised when rw_bytes is modified\n\n    event e_i8_u8_u16_i32 @ 0x86 { \n        i8: i8\n        u8: u8\n        u16: u16\n        i32: i32\n    }\n\nAn event raised when rw_i8_u8_u16_i32 is modified\n\n## Commands\n\n    command c_bool @ 0x81 {\n        bool: bool\n    }\n\nA command to set rw_bool. Returns the value.\n\n    command c_u32 @ 0x82 {\n        u32: u32\n    }\n\nA command to set rw_u32. Returns the value.\n\n    command c_i32 @ 0x83 {\n        i32: i32\n    }\n\nA command to set rw_i32. Returns the value.\n\n    command c_string @ 0x84 {\n        string: string\n    }\n\nA command to set rw_string. Returns the value.\n\n    command c_bytes @ 0x85 {\n        bytes: bytes\n    }\n\nA command to set rw_string. Returns the value.\n\n    command c_i8_u8_u16_i32 @ 0x86 {\n        i8: i8\n        u8: u8\n        u16: u16\n        i32: i32\n    }\n\nA command to set rw_bytes. Returns the value.\n\n    command c_report_pipe @ 0x87 {\n        p_bytes: pipe\n    }\n    pipe report p_bytes {\n        bytes: bytes\n    }\n\nA command to read the rw_bytes, byte per byte, as a pipe."
  },
  {
    "name": "Role Manager",
    "status": "experimental",
    "shortId": "rolemanager",
    "camelName": "roleManager",
    "shortName": "roleManager",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Assign roles to devices on the JACDAC bus."
    },
    "classIdentifier": 295451345,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "ro",
        "name": "all_roles_allocated",
        "identifier": 385,
        "description": "Indicates if all required roles have been allocated to devices.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "command",
        "name": "get_role",
        "identifier": 128,
        "description": "Get the role corresponding to given device identifer. Returns empty string if unset.",
        "fields": [
          {
            "name": "device_id",
            "unit": "",
            "type": "devid",
            "storage": 8
          }
        ],
        "hasReport": true,
        "packFormat": "b[8]"
      },
      {
        "kind": "report",
        "name": "get_role",
        "identifier": 128,
        "description": "Get the role corresponding to given device identifer. Returns empty string if unset.",
        "fields": [
          {
            "name": "device_id",
            "unit": "",
            "type": "devid",
            "storage": 8
          },
          {
            "name": "role",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "secondary": true,
        "packFormat": "b[8] s"
      },
      {
        "kind": "command",
        "name": "set_role",
        "identifier": 129,
        "description": "Set role. Can set to empty to remove role binding.",
        "fields": [
          {
            "name": "device_id",
            "unit": "",
            "type": "devid",
            "storage": 8
          },
          {
            "name": "role",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "b[8] s"
      },
      {
        "kind": "command",
        "name": "clear_all_roles",
        "identifier": 132,
        "description": "Remove all role bindings.",
        "fields": []
      },
      {
        "kind": "command",
        "name": "list_stored_roles",
        "identifier": 130,
        "description": "Return all roles stored internally.",
        "fields": [
          {
            "name": "stored_roles",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "list_stored_roles",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "stored_roles",
        "identifier": 0,
        "description": "Return all roles stored internally.",
        "fields": [
          {
            "name": "device_id",
            "unit": "",
            "type": "devid",
            "storage": 8
          },
          {
            "name": "role",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "pipeType": "list_stored_roles",
        "packFormat": "b[8] s"
      },
      {
        "kind": "command",
        "name": "list_required_roles",
        "identifier": 131,
        "description": "List all roles required by the current program. `device_id` is `0` if role is unbound.",
        "fields": [
          {
            "name": "required_roles",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "list_required_roles",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "required_roles",
        "identifier": 0,
        "description": "List all roles required by the current program. `device_id` is `0` if role is unbound.",
        "fields": [
          {
            "name": "device_id",
            "unit": "",
            "type": "devid",
            "storage": 8
          },
          {
            "name": "service_class",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "roles",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "pipeType": "list_required_roles",
        "packFormat": "b[8] u32 s"
      },
      {
        "kind": "event",
        "name": "change",
        "identifier": 2,
        "description": "Emit notifying that the internal state of the service changed.",
        "fields": [],
        "identifierName": "change"
      }
    ],
    "source": "# Role Manager\n\n    identifier: 0x119c3ad1\n\nAssign roles to devices on the JACDAC bus.\n\n## Registers\n\n    ro all_roles_allocated: bool @ 0x181\n\nIndicates if all required roles have been allocated to devices.\n\n## Commands\n\n    command get_role @ 0x80 {\n        device_id: devid\n    }\n    report {\n        device_id: devid\n        role: string\n    }\n\nGet the role corresponding to given device identifer. Returns empty string if unset.\n\n    command set_role @ 0x81 {\n        device_id: devid\n        role: string\n    }\n\nSet role. Can set to empty to remove role binding.\n\n    command clear_all_roles @ 0x84 {}\n\nRemove all role bindings.\n\n    command list_stored_roles @ 0x82 {\n        stored_roles: pipe\n    }\n    pipe report stored_roles {\n        device_id: devid\n        role: string\n    }\n\nReturn all roles stored internally.\n\n    command list_required_roles @ 0x83 {\n        required_roles: pipe\n    }\n    pipe report required_roles {\n        device_id: devid\n        service_class: u32\n        roles: string\n    }\n\nList all roles required by the current program. `device_id` is `0` if role is unbound.\n\n## Events\n\n    event change @ change { }\n\nEmit notifying that the internal state of the service changed."
  },
  {
    "name": "Rotary encoder",
    "status": "experimental",
    "shortId": "rotary-encoder",
    "camelName": "rotaryEncoder",
    "shortName": "rotaryEncoder",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "An incremental rotary encoder - converts angular motion of a shaft to digital signal."
    },
    "classIdentifier": 284830153,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "ro",
        "name": "position",
        "identifier": 257,
        "description": "Upon device reset starts at `0` (regardless of the shaft position).\nIncreases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.",
        "fields": [
          {
            "name": "_",
            "unit": "#",
            "type": "i32",
            "storage": -4,
            "isSimpleType": true
          }
        ],
        "identifierName": "reading",
        "packFormat": "i32"
      },
      {
        "kind": "const",
        "name": "clicks_per_turn",
        "identifier": 384,
        "description": "This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.",
        "fields": [
          {
            "name": "_",
            "unit": "#",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "packFormat": "u16"
      }
    ],
    "source": "# Rotary encoder\n\n    identifier: 0x10fa29c9\n    extends: _sensor\n\nAn incremental rotary encoder - converts angular motion of a shaft to digital signal.\n\n## Registers\n\n    ro position: i32 # @ reading\n\nUpon device reset starts at `0` (regardless of the shaft position).\nIncreases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.\n\n    const clicks_per_turn?: u16 # @ 0x180\n\nThis specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24."
  },
  {
    "name": "Servo",
    "status": "experimental",
    "shortId": "servo",
    "camelName": "servo",
    "shortName": "servo",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Servo is a small motor directed with a PWM signal.\nThis services fixes the servo period at 20ms, and the pulse can be regulated."
    },
    "classIdentifier": 318542083,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "pulse",
        "identifier": 2,
        "description": "Specifies length of the pulse in microseconds. The period is always 20ms.",
        "fields": [
          {
            "name": "_",
            "unit": "us",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "typicalMin": 500,
            "typicalMax": 2500
          }
        ],
        "identifierName": "value",
        "packFormat": "u32"
      },
      {
        "kind": "rw",
        "name": "enabled",
        "identifier": 1,
        "description": "Turn the power to the servo on/off.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "identifierName": "intensity",
        "packFormat": "u8"
      }
    ],
    "source": "# Servo\n\n    identifier: 0x12fc9103\n\nServo is a small motor directed with a PWM signal.\nThis services fixes the servo period at 20ms, and the pulse can be regulated.\n\n## Registers\n\n    rw pulse: u32 us {typical_min = 500, typical_max = 2500} @ value\n\nSpecifies length of the pulse in microseconds. The period is always 20ms.\n\n    rw enabled: bool @ intensity\n\nTurn the power to the servo on/off."
  },
  {
    "name": "Settings",
    "status": "experimental",
    "shortId": "settings",
    "camelName": "settings",
    "shortName": "settings",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Non-volatile key-value storage interface for storing settings.",
      "long": "## Secrets\n\nEntries with keys starting with `$` are considered secret.\nThey can be written normally, but they read as a single `0` byte,\nunless they are empty, in which case the value returned is also empty.\nThese are typically used by other services on the same device."
    },
    "classIdentifier": 285727818,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "get",
        "identifier": 128,
        "description": "Get the value of given setting. If no such entry exists, the value returned is empty.",
        "fields": [
          {
            "name": "key",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "hasReport": true,
        "packFormat": "s"
      },
      {
        "kind": "report",
        "name": "get",
        "identifier": 128,
        "description": "Get the value of given setting. If no such entry exists, the value returned is empty.",
        "fields": [
          {
            "name": "key",
            "unit": "",
            "type": "string0",
            "storage": 0
          },
          {
            "name": "value",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "secondary": true,
        "packFormat": "z b"
      },
      {
        "kind": "command",
        "name": "set",
        "identifier": 129,
        "description": "Set the value of a given setting.",
        "fields": [
          {
            "name": "key",
            "unit": "",
            "type": "string0",
            "storage": 0
          },
          {
            "name": "value",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "packFormat": "z b"
      },
      {
        "kind": "command",
        "name": "delete",
        "identifier": 132,
        "description": "Delete a given setting.",
        "fields": [
          {
            "name": "key",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "packFormat": "s"
      },
      {
        "kind": "command",
        "name": "list_keys",
        "identifier": 130,
        "description": "Return keys of all settings.",
        "fields": [
          {
            "name": "results",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "list_keys",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "listed_key",
        "identifier": 0,
        "description": "Return keys of all settings.",
        "fields": [
          {
            "name": "key",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "pipeType": "list_keys",
        "packFormat": "s"
      },
      {
        "kind": "command",
        "name": "list",
        "identifier": 131,
        "description": "Return keys and values of all settings.",
        "fields": [
          {
            "name": "results",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "list",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "listed_entry",
        "identifier": 0,
        "description": "Return keys and values of all settings.",
        "fields": [
          {
            "name": "key",
            "unit": "",
            "type": "string0",
            "storage": 0
          },
          {
            "name": "value",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "pipeType": "list",
        "packFormat": "z b"
      },
      {
        "kind": "command",
        "name": "clear",
        "identifier": 133,
        "description": "Clears all keys.",
        "fields": []
      }
    ],
    "source": "# Settings\n\n    identifier: 0x1107dc4a\n    camel: settings\n\nNon-volatile key-value storage interface for storing settings.\n\n## Secrets\n\nEntries with keys starting with `$` are considered secret.\nThey can be written normally, but they read as a single `0` byte,\nunless they are empty, in which case the value returned is also empty.\nThese are typically used by other services on the same device.\n\n## Commands\n\n    command get @ 0x80 {\n        key: string\n    }\n    report {\n        key: string0\n        value: bytes\n    }\n\nGet the value of given setting. If no such entry exists, the value returned is empty.\n\n    command set @ 0x81 {\n        key: string0\n        value: bytes\n    }\n\nSet the value of a given setting.\n\n    command delete @ 0x84 {\n        key: string\n    }\n\nDelete a given setting.\n\n    command list_keys @ 0x82 {\n        results: pipe\n    }\n    pipe report listed_key {\n        key: string\n    }\n\nReturn keys of all settings.\n\n    command list @ 0x83 {\n        results: pipe\n    }\n    pipe report listed_entry {\n        key: string0\n        value: bytes\n    }\n\nReturn keys and values of all settings.\n\n    command clear @ 0x85 { }\n\nClears all keys."
  },
  {
    "name": "Slider",
    "status": "experimental",
    "shortId": "slider",
    "camelName": "slider",
    "shortName": "slider",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "A slider potentiometer."
    },
    "classIdentifier": 522667846,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "ro",
        "name": "position",
        "identifier": 257,
        "description": "The relative position of the slider between `0x0000` and `0xffff`.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 16,
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "identifierName": "reading",
        "packFormat": "u16"
      }
    ],
    "source": "# Slider\n\n    identifier: 0x1f274746\n    extends: _sensor\n\nA slider potentiometer.\n\n## Registers\n\n    ro position: u16 / @ reading\n\nThe relative position of the slider between `0x0000` and `0xffff`.\n"
  },
  {
    "name": "TCP",
    "status": "experimental",
    "shortId": "tcp",
    "camelName": "tcp",
    "shortName": "tcp",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Data transfer over TCP/IP and TLS stream sockets.",
      "commands": "## Pipes"
    },
    "classIdentifier": 457422603,
    "enums": {
      "TcpError": {
        "name": "TcpError",
        "storage": -4,
        "members": {
          "InvalidCommand": 1,
          "InvalidCommandPayload": 2
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "open",
        "identifier": 128,
        "description": "Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.",
        "fields": [
          {
            "name": "inbound",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "open",
        "hasReport": true,
        "packFormat": "b[12]"
      },
      {
        "kind": "report",
        "name": "open",
        "identifier": 128,
        "description": "Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.",
        "fields": [
          {
            "name": "outbound_port",
            "unit": "",
            "type": "pipe_port",
            "storage": 2
          }
        ],
        "secondary": true,
        "pipeType": "open",
        "packFormat": "u16"
      },
      {
        "kind": "meta_pipe_command",
        "name": "open_ssl",
        "identifier": 1,
        "description": "Open an SSL connection to a given host:port pair. Can be issued only once on given pipe.\nAfter the connection is established, an empty data report is sent.\nConnection is closed by closing the pipe.",
        "fields": [
          {
            "name": "tcp_port",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "hostname",
            "unit": "",
            "type": "string",
            "storage": 0
          }
        ],
        "pipeType": "open",
        "packFormat": "u16 s"
      },
      {
        "kind": "pipe_command",
        "name": "outdata",
        "identifier": 0,
        "description": "Bytes to be sent directly over an established TCP or SSL connection.",
        "fields": [
          {
            "name": "data",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "pipeType": "open",
        "packFormat": "b"
      },
      {
        "kind": "pipe_report",
        "name": "indata",
        "identifier": 0,
        "description": "Bytes read directly from directly over an established TCP or SSL connection.",
        "fields": [
          {
            "name": "data",
            "unit": "",
            "type": "bytes",
            "storage": 0,
            "isSimpleType": true
          }
        ],
        "pipeType": "open",
        "packFormat": "b"
      },
      {
        "kind": "meta_pipe_report",
        "name": "error",
        "identifier": 0,
        "description": "Reported when an error is encountered. Negative error codes come directly from the SSL implementation.",
        "fields": [
          {
            "name": "error",
            "unit": "",
            "type": "TcpError",
            "storage": -4
          }
        ],
        "pipeType": "open",
        "packFormat": "i32"
      }
    ],
    "source": "# TCP\n\n    identifier: 0x1b43b70b\n    camel: tcp\n\nData transfer over TCP/IP and TLS stream sockets.\n\n## Commands\n\n    command open @ 0x80 {\n        inbound: pipe\n    }\n    report {\n        outbound_port: pipe_port\n    }\n\nOpen pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\n\n## Pipes\n\n    meta pipe command open_ssl @ 0x01 {\n        tcp_port: u16\n        hostname: string\n    }\n\nOpen an SSL connection to a given host:port pair. Can be issued only once on given pipe.\nAfter the connection is established, an empty data report is sent.\nConnection is closed by closing the pipe.\n\n    pipe command outdata {\n        data: bytes\n    }\n\nBytes to be sent directly over an established TCP or SSL connection.\n\n    pipe report indata {\n        data: bytes\n    }\n\nBytes read directly from directly over an established TCP or SSL connection.\n\n    enum TcpError : i32 {\n        InvalidCommand = 1\n        InvalidCommandPayload = 2\n    }\n    meta pipe report error @ 0x00 {\n        error: TcpError\n    }\n\nReported when an error is encountered. Negative error codes come directly from the SSL implementation.\n"
  },
  {
    "name": "Thermometer",
    "status": "experimental",
    "shortId": "thermometer",
    "camelName": "thermometer",
    "shortName": "thermometer",
    "extends": [
      "_base",
      "_sensor"
    ],
    "notes": {
      "short": "A thermometer measuring outside environment.",
      "registers": "Default streaming interval is 1s."
    },
    "classIdentifier": 337754823,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "streaming_samples",
        "identifier": 3,
        "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "identifierName": "streaming_samples",
        "packFormat": "u8",
        "derived": "_sensor"
      },
      {
        "kind": "rw",
        "name": "streaming_interval",
        "identifier": 4,
        "description": "Period between packets of data when streaming in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true,
            "defaultValue": 100,
            "typicalMin": 1,
            "typicalMax": 60000
          }
        ],
        "identifierName": "streaming_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "const",
        "name": "streaming_preferred_interval",
        "identifier": 258,
        "description": "Preferred default streaming interval for sensor in milliseconds.",
        "fields": [
          {
            "name": "_",
            "unit": "ms",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          }
        ],
        "internal": true,
        "optional": true,
        "identifierName": "streaming_preferred_interval",
        "packFormat": "u32",
        "derived": "_sensor"
      },
      {
        "kind": "ro",
        "name": "temperature",
        "identifier": 257,
        "description": "The temperature.",
        "fields": [
          {
            "name": "_",
            "unit": "C",
            "shift": 10,
            "type": "u22.10",
            "storage": 4
          }
        ],
        "identifierName": "reading",
        "packFormat": "u22.10"
      }
    ],
    "source": "# Thermometer\n\n    identifier: 0x1421bac7\n    extends: _sensor\n\nA thermometer measuring outside environment.\n\n## Registers\n\nDefault streaming interval is 1s.\n\n    ro temperature: u22.10 C @ reading\n\nThe temperature.\n"
  },
  {
    "name": "Vibration motor",
    "status": "experimental",
    "shortId": "vibration",
    "camelName": "vibrationMotor",
    "shortName": "vibrationMotor",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Control a vibration motor."
    },
    "classIdentifier": 406832290,
    "enums": {},
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "rw",
        "name": "speed",
        "identifier": 1,
        "description": "Rotation speed of the motor.\nIf only one rotation speed is supported, then `0` shell be off, and any other number on.",
        "fields": [
          {
            "name": "_",
            "unit": "/",
            "shift": 8,
            "type": "u8",
            "storage": 1,
            "isSimpleType": true
          }
        ],
        "identifierName": "intensity",
        "packFormat": "u8"
      }
    ],
    "source": "# Vibration motor\n\n    identifier: 0x183fc4a2\n\nControl a vibration motor.\n\n## Registers\n\n    rw speed: u8 / @ intensity\n\nRotation speed of the motor.\nIf only one rotation speed is supported, then `0` shell be off, and any other number on.\n"
  },
  {
    "name": "WIFI",
    "status": "experimental",
    "shortId": "wifi",
    "camelName": "wifi",
    "shortName": "wifi",
    "extends": [
      "_base"
    ],
    "notes": {
      "short": "Discovery and connection to WiFi networks. Separate TCP service is used for data transfer."
    },
    "classIdentifier": 413852154,
    "enums": {
      "APFlags": {
        "name": "APFlags",
        "storage": 4,
        "isFlags": true,
        "members": {
          "HasPassword": 1,
          "WPS": 2,
          "HasSecondaryChannelAbove": 4,
          "HasSecondaryChannelBelow": 8,
          "IEEE_802_11B": 256,
          "IEEE_802_11A": 512,
          "IEEE_802_11G": 1024,
          "IEEE_802_11N": 2048,
          "IEEE_802_11AC": 4096,
          "IEEE_802_11AX": 8192,
          "IEEE_802_LongRange": 32768
        }
      }
    },
    "packets": [
      {
        "kind": "ro",
        "name": "status_code",
        "identifier": 259,
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
        "fields": [
          {
            "name": "code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          },
          {
            "name": "vendor_code",
            "unit": "",
            "type": "u16",
            "storage": 2,
            "isSimpleType": true
          }
        ],
        "optional": true,
        "identifierName": "status_code",
        "packFormat": "u16 u16",
        "derived": "_base"
      },
      {
        "kind": "command",
        "name": "scan",
        "identifier": 128,
        "description": "Initiate search for WiFi networks. Results are returned via pipe, one entry per packet.",
        "fields": [
          {
            "name": "results",
            "unit": "",
            "type": "pipe",
            "storage": 12
          }
        ],
        "pipeType": "scan",
        "packFormat": "b[12]"
      },
      {
        "kind": "pipe_report",
        "name": "results",
        "identifier": 0,
        "description": "Initiate search for WiFi networks. Results are returned via pipe, one entry per packet.",
        "fields": [
          {
            "name": "flags",
            "unit": "",
            "type": "APFlags",
            "storage": 4
          },
          {
            "name": "reserved",
            "unit": "",
            "type": "u32",
            "storage": 4,
            "isSimpleType": true
          },
          {
            "name": "rssi",
            "unit": "",
            "type": "i8",
            "storage": -1,
            "isSimpleType": true,
            "typicalMin": -100,
            "typicalMax": -20
          },
          {
            "name": "channel",
            "unit": "",
            "type": "u8",
            "storage": 1,
            "isSimpleType": true,
            "typicalMin": 1,
            "typicalMax": 13
          },
          {
            "name": "bssid",
            "unit": "",
            "type": "u8[6]",
            "storage": 6
          },
          {
            "name": "ssid",
            "unit": "",
            "type": "string",
            "storage": 33,
            "maxBytes": 33
          }
        ],
        "pipeType": "scan",
        "packFormat": "u32 u32 i8 u8 b[6] s[33]"
      },
      {
        "kind": "command",
        "name": "connect",
        "identifier": 129,
        "description": "Connect to named network.",
        "fields": [
          {
            "name": "ssid",
            "unit": "",
            "type": "string0",
            "storage": 0
          },
          {
            "name": "password",
            "unit": "",
            "type": "string0",
            "storage": 0,
            "isOptional": true
          }
        ],
        "packFormat": "z z"
      },
      {
        "kind": "command",
        "name": "disconnect",
        "identifier": 130,
        "description": "Disconnect from current WiFi network if any.",
        "fields": []
      },
      {
        "kind": "ro",
        "name": "connected",
        "identifier": 384,
        "description": "Indicates whether or not we currently have an IP address assigned.",
        "fields": [
          {
            "name": "_",
            "unit": "",
            "type": "bool",
            "storage": 1
          }
        ],
        "packFormat": "u8"
      },
      {
        "kind": "event",
        "name": "got_ip",
        "identifier": 1,
        "description": "Emitted upon successful join and IP address assignment.",
        "fields": []
      },
      {
        "kind": "event",
        "name": "lost_ip",
        "identifier": 2,
        "description": "Emitted when disconnected from network.",
        "fields": []
      }
    ],
    "source": "# WIFI\n\n    identifier: 0x18aae1fa\n    camel: wifi\n\nDiscovery and connection to WiFi networks. Separate TCP service is used for data transfer.\n\n## Commands\n\n    flags APFlags : u32 {\n        HasPassword = 0x0001\n        WPS = 0x0002\n        HasSecondaryChannelAbove = 0x0004\n        HasSecondaryChannelBelow = 0x0008\n        IEEE_802_11B = 0x0100\n        IEEE_802_11A = 0x0200\n        IEEE_802_11G = 0x0400\n        IEEE_802_11N = 0x0800\n        IEEE_802_11AC = 0x1000\n        IEEE_802_11AX = 0x2000\n        IEEE_802_LongRange = 0x8000\n    }\n    command scan @ 0x80 {\n        results: pipe\n    }\n    pipe report results {\n        flags: APFlags\n        reserved: u32\n        rssi: i8 {typical_min = -100, typical_max = -20}\n        channel: u8 {typical_min = 1, typical_max = 13}\n        bssid: u8[6]\n        ssid: string {maxBytes = 33}\n    }\n\nInitiate search for WiFi networks. Results are returned via pipe, one entry per packet.\n\n    command connect @ 0x81 {\n        ssid: string0\n        password?: string0\n    }\n\nConnect to named network.\n\n    command disconnect @ 0x82 {}\n\nDisconnect from current WiFi network if any.\n\n## Registers\n\n    ro connected: bool @ 0x180\n\nIndicates whether or not we currently have an IP address assigned.\n\n## Events\n\n    event got_ip @ 0x01\n\nEmitted upon successful join and IP address assignment.\n\n    event lost_ip @ 0x02\n\nEmitted when disconnected from network.\n"
  }
]