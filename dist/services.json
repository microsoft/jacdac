[{"name":"Common registers and commands","status":"experimental","shortId":"_system","camelName":"system","shortName":"system","extends":[],"notes":{"short":"This file describes common register and command codes.\n\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).","commands":"Command codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.","registers":"Register codes are subdivided as follows:\n* Registers `0x001-0x07f` - r/w common to all services\n* Registers `0x080-0x0ff` - r/w defined per-service\n* Registers `0x100-0x17f` - r/o common to all services\n* Registers `0x180-0x1ff` - r/o defined per-service\n* Registers `0x200-0xeff` - custom, defined per-service\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.","events":"Events codes are 8-bit and are subdivided as follows:\n* Events `0x00-0x7f` - common to all services\n* Events `0x80-0xff` - defined per-service"},"classIdentifier":536870897,"enums":{"ReadingThreshold":{"name":"ReadingThreshold","storage":1,"members":{"Neutral":1,"Low":2,"High":3}},"StatusCodes":{"name":"StatusCodes","storage":2,"members":{"Ready":0,"Initializing":1,"Calibrating":2,"Sleeping":3,"WaitingForInput":4,"CalibrationNeeded":100}}},"packets":[{"kind":"command","name":"announce","identifier":0,"description":"Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.","fields":[],"hasReport":true},{"kind":"report","name":"announce","identifier":0,"description":"Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.","fields":[],"secondary":true},{"kind":"command","name":"get_register","identifier":4096,"description":"Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.","fields":[],"hasReport":true},{"kind":"report","name":"get_register","identifier":4096,"description":"Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.","fields":[],"secondary":true},{"kind":"command","name":"set_register","identifier":8192,"description":"Registers number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.","fields":[]},{"kind":"report","name":"event","identifier":1,"description":"Event from sensor or a broadcast service.","fields":[{"name":"event_id","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"event_argument","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32 u32"},{"kind":"command","name":"calibrate","identifier":2,"description":"Request to calibrate a sensor. The report indicates the calibration is done.","fields":[],"hasReport":true},{"kind":"report","name":"calibrate","identifier":2,"description":"Request to calibrate a sensor. The report indicates the calibration is done.","fields":[],"secondary":true},{"kind":"rw","name":"intensity","identifier":1,"description":"This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"rw","name":"value","identifier":2,"description":"The primary value of actuator (eg. servo pulse length, or motor duty cycle).","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"rw","name":"max_power","identifier":7,"description":"Limit the power drawn by the service, in mA.","fields":[{"name":"_","unit":"mA","type":"u16","storage":2,"isSimpleType":true,"defaultValue":500,"typicalMax":500,"typicalMin":0}],"packFormat":"u16"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100}],"packFormat":"u32"},{"kind":"ro","name":"reading","identifier":257,"description":"Read-only value of the sensor, also reported in streaming.","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"const","name":"min_reading","identifier":260,"description":"The lowest value that can be reported by the sensor.","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"const","name":"max_reading","identifier":261,"description":"The highest value that can be reported by the sensor.","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"ro","name":"reading_error","identifier":262,"description":"The real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\nsend a report in the same frame of the ``reading`` report.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"const","name":"reading_resolution","identifier":264,"description":"Smallest, yet distinguishable change in reading.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"rw","name":"low_threshold","identifier":5,"description":"Threshold when reading data gets low and triggers a ``low``.","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"rw","name":"high_threshold","identifier":6,"description":"Thresholds when reading data gets high and triggers a ``high`` event.","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"const","name":"variant","identifier":263,"description":"The hardware variant of the service.\nFor services which support this, there's an enum defining the meaning.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet.","fields":[{"name":"code","unit":"","type":"StatusCodes","storage":2},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"packFormat":"u16 u16"},{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"packFormat":"s"},{"kind":"event","name":"active","identifier":1,"description":"Notifies that the service has been activated (eg. button pressed, network connected, etc.)","fields":[]},{"kind":"event","name":"inactive","identifier":2,"description":"Notifies that the service has been dis-activated.","fields":[]},{"kind":"event","name":"change","identifier":3,"description":"Notifies that the some state of the service changed.","fields":[]},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"StatusCodes","storage":2},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16 u16"},{"kind":"event","name":"low","identifier":5,"description":"Notifies that the low threshold has been crossed","fields":[]},{"kind":"event","name":"high","identifier":6,"description":"Notifies that the high threshold has been crossed","fields":[]},{"kind":"event","name":"neutral","identifier":7,"description":"Notifies that the threshold is back between ``low`` and ``high``.","fields":[]}],"tags":[]},{"name":"Base service","status":"experimental","shortId":"_base","camelName":"base","shortName":"base","extends":[],"notes":{"short":"Base class for all services."},"classIdentifier":536870899,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16"}],"tags":[]},{"name":"Sensor","status":"experimental","shortId":"_sensor","camelName":"sensor","shortName":"sensor","extends":["_base"],"notes":{"short":"Base class for sensors."},"classIdentifier":536870898,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32"}],"tags":[]},{"name":"Accelerometer","status":"experimental","shortId":"accelerometer","camelName":"accelerometer","shortName":"accelerometer","extends":["_base","_sensor"],"notes":{"short":"A 3-axis accelerometer.","events":"All events are debounced."},"classIdentifier":521405449,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"forces","identifier":257,"description":"Indicates the current forces acting on accelerometer.","fields":[{"name":"x","unit":"g","shift":20,"type":"i12.20","storage":-4},{"name":"y","unit":"g","shift":20,"type":"i12.20","storage":-4},{"name":"z","unit":"g","shift":20,"type":"i12.20","storage":-4}],"identifierName":"reading","packFormat":"i12.20 i12.20 i12.20"},{"kind":"ro","name":"forces_error","identifier":262,"description":"Error on the reading value.","fields":[{"name":"_","unit":"g","shift":20,"type":"i12.20","storage":-4}],"optional":true,"identifierName":"reading_error","packFormat":"i12.20"},{"kind":"rw","name":"max_force","identifier":128,"description":"Configures the range forces detected.\nRead-back after setting to get current value.","fields":[{"name":"_","unit":"g","shift":20,"type":"i12.20","storage":-4}],"optional":true,"packFormat":"i12.20"},{"kind":"event","name":"tilt_up","identifier":129,"description":"Emitted when accelerometer is tilted in the given direction.","fields":[]},{"kind":"event","name":"tilt_down","identifier":130,"description":"Emitted when accelerometer is tilted in the given direction.","fields":[]},{"kind":"event","name":"tilt_left","identifier":131,"description":"Emitted when accelerometer is tilted in the given direction.","fields":[]},{"kind":"event","name":"tilt_right","identifier":132,"description":"Emitted when accelerometer is tilted in the given direction.","fields":[]},{"kind":"event","name":"face_up","identifier":133,"description":"Emitted when accelerometer is laying flat in the given direction.","fields":[]},{"kind":"event","name":"face_down","identifier":134,"description":"Emitted when accelerometer is laying flat in the given direction.","fields":[]},{"kind":"event","name":"freefall","identifier":135,"description":"Emitted when total force acting on accelerometer is much less than 1g.","fields":[]},{"kind":"event","name":"shake","identifier":139,"description":"Emitted when forces change violently a few times.","fields":[]},{"kind":"event","name":"force_2g","identifier":140,"description":"Emitted when force in any direction exceeds given threshold.","fields":[]},{"kind":"event","name":"force_3g","identifier":136,"description":"Emitted when force in any direction exceeds given threshold.","fields":[]},{"kind":"event","name":"force_6g","identifier":137,"description":"Emitted when force in any direction exceeds given threshold.","fields":[]},{"kind":"event","name":"force_8g","identifier":138,"description":"Emitted when force in any direction exceeds given threshold.","fields":[]}],"tags":["movement"]},{"name":"Analog Button","status":"experimental","shortId":"analogbutton","camelName":"analogButton","shortName":"analogButton","extends":["_base","_sensor"],"notes":{"short":"A capacitive or pressure sensitive push-button."},"classIdentifier":409316809,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Pressure":1,"Capacitive":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"pressure","identifier":257,"description":"Indicates the current pressure (``force``) on the button.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"reading","packFormat":"u0.16"},{"kind":"rw","name":"inactive_threshold","identifier":5,"description":"Indicates the lower threshold for ``inactive`` events.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"low_threshold","packFormat":"u0.16"},{"kind":"rw","name":"active_threshold","identifier":6,"description":"Indicates the threshold for ``active`` events.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"high_threshold","packFormat":"u0.16"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical button.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"event","name":"active","identifier":1,"description":"Emitted when button goes from inactive (pressure less than threshold) to active.","fields":[],"identifierName":"active"},{"kind":"event","name":"inactive","identifier":2,"description":"Emitted when button goes from active (pressure higher than threshold) to inactive.","fields":[],"identifierName":"inactive"}],"tags":["button"]},{"name":"Arcade Gamepad","status":"experimental","shortId":"arcadegamepad","camelName":"arcadeGamepad","shortName":"arcadeGamepad","extends":["_base","_sensor"],"notes":{"short":"A gamepad with direction and action buttons for one player.\nIf a device has multiple controllers, it should have multiple gamepad services, using consecutive service identifiers."},"classIdentifier":501915758,"enums":{"Button":{"name":"Button","storage":1,"members":{"Left":1,"Up":2,"Right":3,"Down":4,"A":5,"B":6,"Menu":7,"Select":8,"Reset":9,"Exit":10}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"buttons","identifier":257,"description":"Indicates which buttons are currently active (pressed).\n`pressure` should be `0xff` for digital buttons, and proportional for analog ones.","fields":[{"name":"button","unit":"","type":"Button","storage":1,"startRepeats":true},{"name":"pressure","unit":"/","shift":8,"type":"u0.8","storage":1}],"identifierName":"reading","packFormat":"r: u8 u0.8"},{"kind":"const","name":"available_buttons","identifier":384,"description":"Indicates number of players supported and which buttons are present on the controller.","fields":[{"name":"button","unit":"","type":"Button","storage":1,"startRepeats":true}],"packFormat":"r: u8"},{"kind":"event","name":"down","identifier":1,"description":"Emitted when button goes from inactive to active.","fields":[{"name":"button","unit":"","type":"Button","storage":1}],"identifierName":"active","packFormat":"u8"},{"kind":"event","name":"up","identifier":2,"description":"Emitted when button goes from active to inactive.","fields":[{"name":"button","unit":"","type":"Button","storage":1}],"identifierName":"inactive","packFormat":"u8"}],"tags":["button"]},{"name":"Arcade sound","status":"experimental","shortId":"arcadesound","camelName":"arcadeSound","shortName":"arcadeSound","extends":["_base"],"notes":{"short":"A sound playing device.\n\nThis is typically run over an SPI connection, not regular single-wire JACDAC."},"classIdentifier":533083654,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"play","identifier":128,"description":"Play samples, which are single channel, signed 16-bit little endian values.","fields":[{"name":"samples","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"},{"kind":"rw","name":"sample_rate","identifier":128,"description":"Get or set playback sample rate (in samples per second).\nIf you set it, read it back, as the value may be rounded up or down.","fields":[{"name":"_","unit":"Hz","shift":10,"type":"u22.10","storage":4,"defaultValue":44100}],"packFormat":"u22.10"},{"kind":"const","name":"buffer_size","identifier":384,"description":"The size of the internal audio buffer.","fields":[{"name":"_","unit":"B","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"ro","name":"buffer_pending","identifier":385,"description":"How much data is still left in the buffer to play.\nClients should not send more data than `buffer_size - buffer_pending`,\nbut can keep the `buffer_pending` as low as they want to ensure low latency\nof audio playback.","fields":[{"name":"_","unit":"B","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"}],"tags":[]},{"name":"Barcode reader","status":"experimental","shortId":"barcodereader","camelName":"barcodeReader","shortName":"barcodeReader","extends":["_base"],"notes":{"short":"A device that reads various barcodes, like QR codes. For the web, see [BarcodeDetector](https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector)."},"classIdentifier":477339244,"enums":{"Format":{"name":"Format","storage":1,"members":{"Aztec":1,"Code128":2,"Code39":3,"Code93":4,"Codabar":5,"DataMatrix":6,"Ean13":8,"Ean8":9,"ITF":10,"Pdf417":11,"QrCode":12,"UpcA":13,"UpcE":14}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"enabled","identifier":1,"description":"Turns on or off the detection of barcodes.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"const","name":"formats","identifier":384,"description":"Reports the list of supported barcode formats, as documented in https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API.","fields":[{"name":"format","unit":"","type":"Format","storage":1,"startRepeats":true}],"optional":true,"packFormat":"r: u8"},{"kind":"event","name":"detect","identifier":1,"description":"Raised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\nIn case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.","fields":[{"name":"format","unit":"","type":"Format","storage":1},{"name":"data","unit":"","type":"string","storage":0}],"identifierName":"active","packFormat":"u8 s"}],"tags":[]},{"name":"Barometer","status":"experimental","shortId":"barometer","camelName":"barometer","shortName":"barometer","extends":["_base","_sensor"],"notes":{"short":"A sensor measuring air pressure of outside environment.","registers":"Default streaming interval is 1s."},"classIdentifier":504462570,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"pressure","identifier":257,"description":"The air pressure.","fields":[{"name":"_","unit":"hPa","shift":10,"type":"u22.10","storage":4,"absoluteMin":300,"absoluteMax":1100,"typicalMin":940,"typicalMax":1040}],"identifierName":"reading","preferredInterval":60000,"packFormat":"u22.10"},{"kind":"ro","name":"pressure_error","identifier":262,"description":"The real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.","fields":[{"name":"_","unit":"hPa","shift":10,"type":"u22.10","storage":4}],"identifierName":"reading_error","packFormat":"u22.10"}],"tags":["environment"]},{"name":"bit:radio","status":"experimental","shortId":"bitradio","camelName":"bitRadio","shortName":"bitRadio","extends":["_base"],"notes":{"short":"Support for sending and receiving packets using the [Bit Radio protocol](https://github.com/microsoft/pxt-common-packages/blob/master/libs/radio/docs/reference/radio.md), typically used between micro:bit devices."},"classIdentifier":449414863,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"enabled","identifier":1,"description":"Turns on/off the radio antenna.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"rw","name":"group","identifier":128,"description":"Group used to filter packets","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"rw","name":"transmission_power","identifier":129,"description":"Antenna power to increase or decrease range.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true,"defaultValue":6,"absoluteMin":1,"absoluteMax":7}],"packFormat":"u8"},{"kind":"rw","name":"frequency_band","identifier":130,"description":"Change the transmission and reception band of the radio to the given channel.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true,"defaultValue":7,"absoluteMax":83,"absoluteMin":0}],"packFormat":"u8"},{"kind":"command","name":"send_string","identifier":128,"description":"Sends a string payload as a radio message, maximum 18 characters.","fields":[{"name":"message","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"command","name":"send_number","identifier":129,"description":"Sends a double precision number payload as a radio message","fields":[{"name":"value","unit":"","isFloat":true,"type":"f64","storage":8}],"packFormat":"f64"},{"kind":"command","name":"send_value","identifier":130,"description":"Sends a double precision number and a name payload as a radio message","fields":[{"name":"value","unit":"","isFloat":true,"type":"f64","storage":8},{"name":"name","unit":"","type":"string","storage":0}],"packFormat":"f64 s"},{"kind":"command","name":"send_buffer","identifier":131,"description":"Sends a payload of bytes as a radio message","fields":[{"name":"data","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"},{"kind":"event","name":"string_received","identifier":128,"description":"Raised when a string packet is received","fields":[{"name":"time","unit":"ms","type":"u32","storage":4,"isSimpleType":true},{"name":"device_serial_number","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"rssi","unit":"dB","type":"i8","storage":-1,"isSimpleType":true},{"name":"padding","unit":"","type":"u8[1]","storage":1},{"name":"message","unit":"","type":"string","storage":0}],"packFormat":"u32 u32 i8 b[1] s"},{"kind":"event","name":"number_received","identifier":129,"description":"Raised when a number packet is received","fields":[{"name":"time","unit":"ms","type":"u32","storage":4,"isSimpleType":true},{"name":"device_serial_number","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"rssi","unit":"dB","type":"i8","storage":-1,"isSimpleType":true},{"name":"padding","unit":"","type":"u8[3]","storage":3},{"name":"value","unit":"","isFloat":true,"type":"f64","storage":8},{"name":"name","unit":"","type":"string","storage":0}],"packFormat":"u32 u32 i8 b[3] f64 s"},{"kind":"event","name":"buffer_received","identifier":130,"description":"Raised when a buffer packet is received","fields":[{"name":"time","unit":"ms","type":"u32","storage":4,"isSimpleType":true},{"name":"device_serial_number","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"rssi","unit":"dB","type":"i8","storage":-1,"isSimpleType":true},{"name":"padding","unit":"","type":"u8[1]","storage":1},{"name":"data","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"u32 u32 i8 b[1] b"}],"tags":[]},{"name":"Bootloader","status":"experimental","shortId":"bootloader","camelName":"bootloader","shortName":"bootloader","extends":["_base"],"notes":{"short":"Allows flashing (reprogramming) devices over Jacdac."},"classIdentifier":536516936,"enums":{"Error":{"name":"Error","storage":4,"members":{"NoError":0,"PacketTooSmall":1,"OutOfFlashableRange":2,"InvalidPageOffset":3,"NotPageAligned":4}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"info","identifier":0,"description":"The `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.","fields":[],"identifierName":"announce","hasReport":true},{"kind":"report","name":"info","identifier":0,"description":"The `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.","fields":[{"name":"service_class","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"page_size","unit":"B","type":"u32","storage":4,"isSimpleType":true},{"name":"flashable_size","unit":"B","type":"u32","storage":4,"isSimpleType":true},{"name":"firmware_identifier","unit":"","type":"u32","storage":4,"isSimpleType":true}],"secondary":true,"packFormat":"u32 u32 u32 u32"},{"kind":"command","name":"set_session","identifier":129,"description":"The flashing host should generate a random id, and use this command to set it.","fields":[{"name":"session_id","unit":"","type":"u32","storage":4,"isSimpleType":true}],"hasReport":true,"packFormat":"u32"},{"kind":"report","name":"set_session","identifier":129,"description":"The flashing host should generate a random id, and use this command to set it.","fields":[{"name":"session_id","unit":"","type":"u32","storage":4,"isSimpleType":true}],"secondary":true,"packFormat":"u32"},{"kind":"command","name":"page_data","identifier":128,"description":"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.","fields":[{"name":"page_address","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"page_offset","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"chunk_no","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"chunk_max","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"session_id","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"reserved0","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"reserved1","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"reserved2","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"reserved3","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"page_data","unit":"","type":"bytes","storage":208,"isSimpleType":true,"maxBytes":208}],"hasReport":true,"packFormat":"u32 u16 u8 u8 u32 u32 u32 u32 u32 b[208]"},{"kind":"report","name":"page_data","identifier":128,"description":"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.","fields":[{"name":"session_id","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"page_error","unit":"","type":"Error","storage":4},{"name":"page_address","unit":"","type":"u32","storage":4,"isSimpleType":true}],"secondary":true,"packFormat":"u32 u32 u32"}],"tags":[]},{"name":"Button","status":"experimental","shortId":"button","camelName":"button","shortName":"button","extends":["_base","_sensor"],"notes":{"short":"A push-button, which returns to inactive position when not operated anymore."},"classIdentifier":343122531,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"pressed","identifier":257,"description":"Indicates whether the button is currently active (pressed).","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"reading","packFormat":"u8"},{"kind":"event","name":"down","identifier":1,"description":"Emitted when button goes from inactive (`pressed == 0`) to active.","fields":[],"identifierName":"active"},{"kind":"event","name":"up","identifier":2,"description":"Emitted when button goes from active (`pressed == 1`) to inactive.","fields":[],"identifierName":"inactive"},{"kind":"event","name":"click","identifier":128,"description":"Emitted together with `up` when the press time was not longer than 500ms.","fields":[]},{"kind":"event","name":"long_click","identifier":129,"description":"Emitted after button is held for 500ms. Long click events are followed by a separate up event.","fields":[]},{"kind":"event","name":"hold","identifier":130,"description":"Emitted after the button is held for 1500ms. Hold events are followed by a separate up event.","fields":[]}],"tags":["button"]},{"name":"Buzzer","status":"experimental","shortId":"buzzer","camelName":"buzzer","shortName":"buzzer","extends":["_base"],"notes":{"short":"A simple buzzer."},"classIdentifier":458731991,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"volume","identifier":1,"description":"The volume (duty cycle) of the buzzer.","fields":[{"name":"_","unit":"/","shift":8,"type":"u0.8","storage":1,"defaultValue":1}],"identifierName":"intensity","packFormat":"u0.8"},{"kind":"command","name":"play_tone","identifier":128,"description":"Play a PWM tone with given period and duty for given duration.\nThe duty is scaled down with `volume` register.\nTo play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\nto send `P = 1000000 / F` and `D = P * V / 2`.","fields":[{"name":"period","unit":"us","type":"u16","storage":2,"isSimpleType":true},{"name":"duty","unit":"us","type":"u16","storage":2,"isSimpleType":true},{"name":"duration","unit":"ms","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16 u16 u16"}],"tags":["sound"]},{"name":"Character Screen","status":"experimental","shortId":"characterscreen","camelName":"characterScreen","shortName":"characterScreen","extends":["_base"],"notes":{"short":"A screen that displays characters."},"classIdentifier":523748714,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"LCD":1,"OLED":2}},"TextDirection":{"name":"TextDirection","storage":1,"members":{"LeftToRight":1,"RightToLeft":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"message","identifier":2,"description":"Text to show. Use `\\n` to break lines.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"identifierName":"value","packFormat":"s"},{"kind":"rw","name":"brightness","identifier":1,"description":"Brightness of the screen. `0` means off.","fields":[{"name":"_","unit":"/","shift":8,"type":"u0.8","storage":1}],"identifierName":"intensity","packFormat":"u0.8"},{"kind":"const","name":"variant","identifier":263,"description":"Describes the type of character LED screen.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"rw","name":"text_direction","identifier":130,"description":"Specifies the RTL or LTR direction of the text.","fields":[{"name":"_","unit":"","type":"TextDirection","storage":1}],"optional":true,"packFormat":"u8"},{"kind":"const","name":"rows","identifier":384,"description":"Gets the number of rows.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"const","name":"columns","identifier":385,"description":"Gets the number of columns.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"}],"tags":["display"]},{"name":"Color","status":"experimental","shortId":"color","camelName":"color","shortName":"color","extends":["_base","_sensor"],"notes":{"short":"Senses RGB colors"},"classIdentifier":372299111,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"color","identifier":257,"description":"Detected color in the RGB color space.","fields":[{"name":"red","unit":"/","shift":16,"type":"u0.16","storage":2},{"name":"green","unit":"/","shift":16,"type":"u0.16","storage":2},{"name":"blue","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"reading","packFormat":"u0.16 u0.16 u0.16"}],"tags":["imaging"]},{"name":"Compass","status":"experimental","shortId":"compass","camelName":"compass","shortName":"compass","extends":["_base","_sensor"],"notes":{"short":"A sensor that measures the heading."},"classIdentifier":364362175,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"heading","identifier":257,"description":"The heading with respect to the magnetic north.","fields":[{"name":"_","unit":"","shift":16,"type":"u16.16","storage":4,"absoluteMin":0,"absoluteMax":359}],"identifierName":"reading","preferredInterval":1000,"packFormat":"u16.16"},{"kind":"rw","name":"enabled","identifier":1,"description":"Turn on or off the sensor. Turning on the sensor may start a calibration sequence.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"ro","name":"heading_error","identifier":262,"description":"Error on the heading reading","fields":[{"name":"_","unit":"°","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"reading_error","packFormat":"u16.16"},{"kind":"command","name":"calibrate","identifier":2,"description":"Starts a calibration sequence for the compass.","fields":[],"identifierName":"calibrate"}],"tags":[]},{"name":"Control","status":"experimental","shortId":"control","camelName":"control","shortName":"control","extends":["_base"],"notes":{"short":"Control service is always service index `0`.\nIt handles actions common to all services on a device."},"classIdentifier":0,"enums":{"AnnounceFlags":{"name":"AnnounceFlags","storage":1,"isFlags":true,"members":{"SupportsACK":1}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"services","identifier":0,"description":"The `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.","fields":[],"identifierName":"announce","hasReport":true},{"kind":"report","name":"services","identifier":0,"description":"The `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.","fields":[{"name":"restart_counter","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"flags","unit":"","type":"AnnounceFlags","storage":1},{"name":"packet_count","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"reserved","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"service_class","unit":"","type":"u32","storage":4,"isSimpleType":true,"startRepeats":true}],"secondary":true,"packFormat":"u8 u8 u8 u8 r: u32"},{"kind":"command","name":"noop","identifier":128,"description":"Do nothing. Always ignored. Can be used to test ACKs.","fields":[]},{"kind":"command","name":"identify","identifier":129,"description":"Blink an LED or otherwise draw user's attention.","fields":[],"optional":true},{"kind":"command","name":"reset","identifier":130,"description":"Reset device. ACK may or may not be sent.","fields":[],"optional":true},{"kind":"command","name":"flood_ping","identifier":131,"description":"The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.","fields":[{"name":"num_responses","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"start_counter","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"size","unit":"B","type":"u8","storage":1,"isSimpleType":true}],"optional":true,"hasReport":true,"packFormat":"u32 u32 u8"},{"kind":"report","name":"flood_ping","identifier":131,"description":"The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.","fields":[{"name":"counter","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"dummy_payload","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"secondary":true,"packFormat":"u32 b"},{"kind":"rw","name":"reset_in","identifier":128,"description":"When set to value other than `0`, it asks the device to reset after specified number of microseconds.\nThis is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\nsay 1.6s every 0.5s.","fields":[{"name":"_","unit":"us","type":"u32","storage":4,"isSimpleType":true}],"optional":true,"packFormat":"u32"},{"kind":"const","name":"device_description","identifier":384,"description":"Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"packFormat":"s"},{"kind":"const","name":"firmware_identifier","identifier":385,"description":"A numeric code for the string above; used to identify firmware images and devices.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true,"absoluteMin":805306368,"absoluteMax":1073741823}],"optional":true,"packFormat":"u32"},{"kind":"const","name":"bootloader_firmware_identifier","identifier":388,"description":"Typically the same as `firmware_identifier` unless device was flashed by hand; the bootloader will respond to that code.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true,"absoluteMin":805306368,"absoluteMax":1073741823}],"optional":true,"packFormat":"u32"},{"kind":"const","name":"firmware_version","identifier":389,"description":"A string describing firmware version; typically semver.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"packFormat":"s"},{"kind":"ro","name":"mcu_temperature","identifier":386,"description":"MCU temperature in degrees Celsius (approximate).","fields":[{"name":"_","unit":"°C","type":"i16","storage":-2,"isSimpleType":true,"typicalMin":-10,"typicalMax":150}],"optional":true,"preferredInterval":60000,"packFormat":"i16"},{"kind":"ro","name":"uptime","identifier":390,"description":"Number of microseconds since boot.","fields":[{"name":"_","unit":"us","type":"u64","storage":8,"isSimpleType":true}],"optional":true,"preferredInterval":60000,"packFormat":"u64"},{"kind":"const","name":"device_url","identifier":391,"description":"Request the information web site for this device","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"packFormat":"s"},{"kind":"const","name":"firmware_url","identifier":392,"description":"URL with machine-readable metadata information about updating device firmware","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"packFormat":"s"},{"kind":"rw","name":"status_light","identifier":129,"description":"Specifies a status light animation sequence on a colored or monochrome LED\nusing the [LED animation format](/spec/led-animation/).\nTypically, up to 8 steps (repeats) are supported.\n\nThe status light is also used by Jacdac software stack to indicate various status mode\nand this animation may be overridden when those modes are enabled.","fields":[{"name":"repetitions","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"hue","unit":"","type":"u8","storage":1,"isSimpleType":true,"startRepeats":true},{"name":"saturation","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"value","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"duration8","unit":"8ms","type":"u8","storage":1,"isSimpleType":true}],"optional":true,"packFormat":"u16 r: u8 u8 u8 u8"}],"tags":[]},{"name":"Distance","status":"experimental","shortId":"distance","camelName":"distance","shortName":"distance","extends":["_base","_sensor"],"notes":{"short":"A sensor that determines the distance of an object without any physical contact involved."},"classIdentifier":337275786,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Ultrasonic":1,"Infrared":2,"LiDAR":3,"Laser":4}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"distance","identifier":257,"description":"Current distance from the object","fields":[{"name":"_","unit":"m","shift":16,"type":"u16.16","storage":4,"typicalMin":0.02,"typicalMax":4}],"identifierName":"reading","packFormat":"u16.16"},{"kind":"const","name":"min_range","identifier":260,"description":"Minimum measurable distance","fields":[{"name":"_","unit":"m","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"min_reading","packFormat":"u16.16"},{"kind":"const","name":"max_range","identifier":261,"description":"Maximum measurable distance","fields":[{"name":"_","unit":"m","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"max_reading","packFormat":"u16.16"},{"kind":"const","name":"variant","identifier":263,"description":"Determines the type of sensor used.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":[]},{"name":"DMX","status":"experimental","shortId":"dmx","camelName":"dmx","shortName":"dmx","extends":["_base"],"notes":{"short":"A service that can send DMX512-A packets with limited size. This service is designed to allow tinkering with a few DMX devices, but only allows 235 channels. More about DMX at https://en.wikipedia.org/wiki/DMX512."},"classIdentifier":298814469,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"enabled","identifier":1,"description":"Determines if the DMX bridge is active","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"command","name":"send","identifier":128,"description":"Send a DMX packet, up to 236bytes long, including the start code.","fields":[{"name":"channels","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"}],"tags":[]},{"name":"Equivalent CO₂","status":"experimental","shortId":"eco2","camelName":"eCO2","shortName":"eCO2","extends":["_base","_sensor"],"notes":{"short":"Measures equivalent CO₂ levels."},"classIdentifier":379362758,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"VOC":1,"NDIR":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"e_CO2","identifier":257,"description":"Equivalent CO₂ (eCO₂) readings.","fields":[{"name":"_","unit":"ppm","shift":10,"type":"u22.10","storage":4,"typicalMin":400,"typicalMax":8192}],"identifierName":"reading","preferredInterval":1000,"packFormat":"u22.10"},{"kind":"ro","name":"e_CO2_error","identifier":262,"description":"Error on the reading value.","fields":[{"name":"_","unit":"ppm","shift":10,"type":"u22.10","storage":4}],"identifierName":"reading_error","packFormat":"u22.10"},{"kind":"const","name":"min_e_CO2","identifier":260,"description":"Minimum measurable value","fields":[{"name":"_","unit":"ppm","shift":10,"type":"u22.10","storage":4}],"optional":true,"identifierName":"min_reading","packFormat":"u22.10"},{"kind":"const","name":"max_e_CO2","identifier":261,"description":"Minimum measurable value","fields":[{"name":"_","unit":"ppm","shift":10,"type":"u22.10","storage":4}],"optional":true,"identifierName":"max_reading","packFormat":"u22.10"},{"kind":"const","name":"conditioning_period","identifier":384,"description":"Time required to achieve good sensor stability before measuring after long idle period.","fields":[{"name":"_","unit":"s","type":"u32","storage":4,"isSimpleType":true}],"optional":true,"packFormat":"u32"},{"kind":"const","name":"variant","identifier":263,"description":"Type of physical sensor and capabilities.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":["environment"]},{"name":"Gyroscope","status":"experimental","shortId":"gyroscope","camelName":"gyroscope","shortName":"gyroscope","extends":["_base","_sensor"],"notes":{"short":"A 3-axis gyroscope."},"classIdentifier":505087730,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"rotation_rates","identifier":257,"description":"Indicates the current forces acting on accelerometer.","fields":[{"name":"x","unit":"°/s","shift":20,"type":"i12.20","storage":-4},{"name":"y","unit":"°/s","shift":20,"type":"i12.20","storage":-4},{"name":"z","unit":"°/s","shift":20,"type":"i12.20","storage":-4}],"identifierName":"reading","packFormat":"i12.20 i12.20 i12.20"},{"kind":"ro","name":"rotation_rates_error","identifier":262,"description":"Error on the reading value.","fields":[{"name":"_","unit":"°/s","shift":20,"type":"i12.20","storage":-4}],"optional":true,"identifierName":"reading_error","packFormat":"i12.20"},{"kind":"rw","name":"max_rate","identifier":128,"description":"Configures the range of range of rotation rates.","fields":[{"name":"_","unit":"°/s","shift":20,"type":"i12.20","storage":-4}],"optional":true,"packFormat":"i12.20"}],"tags":["movement"]},{"name":"Heart Rate","status":"experimental","shortId":"heartrate","camelName":"heartRate","shortName":"heartRate","extends":["_base","_sensor"],"notes":{"short":"A sensor approximating the heart rate. \n\n\n**Jacdac is NOT suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**"},"classIdentifier":376204740,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Finger":1,"Chest":2,"Wrist":3,"Pump":4,"WebCam":5}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"heart_rate","identifier":257,"description":"The estimated heart rate.","fields":[{"name":"_","unit":"bpm","shift":16,"type":"u16.16","storage":4,"typicalMin":30,"typicalMax":200}],"identifierName":"reading","preferredInterval":1000,"packFormat":"u16.16"},{"kind":"ro","name":"heart_rate_error","identifier":262,"description":"The estimated error on the reported sensor data.","fields":[{"name":"_","unit":"bpm","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"reading_error","packFormat":"u16.16"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical sensor","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":["biometric"]},{"name":"HID Keyboard","status":"experimental","shortId":"hidkeyboard","camelName":"hidKeyboard","shortName":"hidKeyboard","extends":["_base"],"notes":{"short":"Control a HID keyboard. \n\nThis service cannot be simulated.\n\nThe codes for the key (selectors) is defined in the [HID Keyboard\nspecification](https://usb.org/sites/default/files/hut1_21.pdf), chapter 10 Keyboard/Keypad Page, page 81.\n\nThe device keeps tracks of the key state and is able to clear it all with the clear command."},"classIdentifier":414210922,"enums":{"Modifiers":{"name":"Modifiers","storage":1,"isFlags":true,"members":{"LeftControl":224,"LeftShift":225,"LeftAlt":226,"LeftGUID":227,"RightControl":228,"RightShift":229,"RightAlt":230,"RightGUID":231}},"Action":{"name":"Action","storage":1,"members":{"Press":0,"Up":1,"Down":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"key","identifier":128,"description":"Presses a key or a sequence of keys down.","fields":[{"name":"selector","unit":"","type":"u16","storage":2,"isSimpleType":true,"startRepeats":true},{"name":"modifiers","unit":"","type":"Modifiers","storage":1},{"name":"action","unit":"","type":"Action","storage":1}],"packFormat":"r: u16 u8 u8"},{"kind":"command","name":"clear","identifier":129,"description":"Clears all pressed keys.","fields":[]}],"tags":[]},{"name":"HID Mouse","status":"experimental","shortId":"hidmouse","camelName":"hidMouse","shortName":"hidMouse","extends":["_base"],"notes":{"short":"Controls a HID mouse. \n\nThis service cannot be simulated."},"classIdentifier":411425820,"enums":{"Button":{"name":"Button","storage":2,"isFlags":true,"members":{"Right":1,"Middle":4,"Left":2}},"ButtonEvent":{"name":"ButtonEvent","storage":1,"members":{"Up":1,"Down":2,"Click":3,"DoubleClick":4}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"set_button","identifier":128,"description":"Sets the up/down state of one or more buttons.\nA ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\nA ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).","fields":[{"name":"buttons","unit":"","type":"Button","storage":2},{"name":"event","unit":"","type":"ButtonEvent","storage":1}],"packFormat":"u16 u8"},{"kind":"command","name":"move","identifier":129,"description":"Moves the mouse by the distance specified.\nIf the time is positive, it specifies how long to make the move.","fields":[{"name":"dx","unit":"#","type":"i16","storage":-2,"isSimpleType":true},{"name":"dy","unit":"#","type":"i16","storage":-2,"isSimpleType":true},{"name":"time","unit":"ms","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"i16 i16 u16"},{"kind":"command","name":"wheel","identifier":130,"description":"Turns the wheel up or down. Positive if scrolling up.\nIf the time is positive, it specifies how long to make the move.","fields":[{"name":"dy","unit":"#","type":"i16","storage":-2,"isSimpleType":true},{"name":"time","unit":"ms","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"i16 u16"}],"tags":[]},{"name":"Humidity","status":"experimental","shortId":"humidity","camelName":"humidity","shortName":"humidity","extends":["_base","_sensor"],"notes":{"short":"A sensor measuring humidity of outside environment.","registers":"Default streaming interval is 1s."},"classIdentifier":382210232,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"humidity","identifier":257,"description":"The relative humidity in percentage of full water saturation.","fields":[{"name":"_","unit":"%RH","shift":10,"type":"u22.10","storage":4,"typicalMax":100,"typicalMin":0}],"identifierName":"reading","preferredInterval":5000,"packFormat":"u22.10"},{"kind":"ro","name":"humidity_error","identifier":262,"description":"The real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.","fields":[{"name":"_","unit":"%RH","shift":10,"type":"u22.10","storage":4}],"identifierName":"reading_error","packFormat":"u22.10"},{"kind":"const","name":"min_humidity","identifier":260,"description":"Lowest humidity that can be reported.","fields":[{"name":"_","unit":"°C","shift":10,"type":"u22.10","storage":4,"defaultValue":0}],"identifierName":"min_reading","packFormat":"u22.10"},{"kind":"const","name":"max_humidity","identifier":261,"description":"Highest humidity that can be reported.","fields":[{"name":"_","unit":"°C","shift":10,"type":"u22.10","storage":4,"defaultValue":100}],"identifierName":"max_reading","packFormat":"u22.10"}],"tags":["environment"]},{"name":"Illuminance","status":"experimental","shortId":"illuminance","camelName":"illuminance","shortName":"illuminance","extends":["_base","_sensor"],"notes":{"short":"Detects the amount of light falling onto a given surface area.\n\nNote that this is different from *luminance*, the amount of light that passes through, emits from, or reflects off an object."},"classIdentifier":510577394,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"light","identifier":257,"description":"The amount of illuminance, as lumens per square metre.","fields":[{"name":"_","unit":"lux","shift":10,"type":"u22.10","storage":4,"typicalMax":100000,"typicalMin":0}],"identifierName":"reading","packFormat":"u22.10"},{"kind":"ro","name":"light_error","identifier":262,"description":"Error on the reported sensor value.","fields":[{"name":"_","unit":"lux","shift":10,"type":"u22.10","storage":4}],"optional":true,"identifierName":"reading_error","packFormat":"u22.10"}],"tags":["imaging"]},{"name":"Indexed screen","status":"experimental","shortId":"indexedscreen","camelName":"indexedScreen","shortName":"indexedScreen","extends":["_base"],"notes":{"short":"A screen with indexed colors.\n\nThis is often run over an SPI connection, not regular single-wire JACDAC."},"classIdentifier":385496805,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"start_update","identifier":129,"description":"Sets the update window for subsequent `set_pixels` commands.","fields":[{"name":"x","unit":"px","type":"u16","storage":2,"isSimpleType":true},{"name":"y","unit":"px","type":"u16","storage":2,"isSimpleType":true},{"name":"width","unit":"px","type":"u16","storage":2,"isSimpleType":true},{"name":"height","unit":"px","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16 u16 u16 u16"},{"kind":"command","name":"set_pixels","identifier":131,"description":"Set pixels in current window, according to current palette.\nEach \"line\" of data is aligned to a byte.","fields":[{"name":"pixels","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"},{"kind":"rw","name":"brightness","identifier":1,"description":"Set backlight brightness.\nIf set to `0` the display may go to sleep.","fields":[{"name":"_","unit":"/","shift":8,"type":"u0.8","storage":1}],"identifierName":"intensity","packFormat":"u0.8"},{"kind":"rw","name":"palette","identifier":128,"description":"The current palette.\nThe color entry repeats `1 << bits_per_pixel` times.\nThis register may be write-only.","fields":[{"name":"blue","unit":"","type":"u8","storage":1,"isSimpleType":true,"startRepeats":true},{"name":"green","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"red","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"padding","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"r: u8 u8 u8 u8"},{"kind":"const","name":"bits_per_pixel","identifier":384,"description":"Determines the number of palette entries.\nTypical values are 1, 2, 4, or 8.","fields":[{"name":"_","unit":"bit","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"const","name":"width","identifier":385,"description":"Screen width in \"natural\" orientation.","fields":[{"name":"_","unit":"px","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16"},{"kind":"const","name":"height","identifier":386,"description":"Screen height in \"natural\" orientation.","fields":[{"name":"_","unit":"px","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16"},{"kind":"rw","name":"width_major","identifier":129,"description":"If true, consecutive pixels in the \"width\" direction are sent next to each other (this is typical for graphics cards).\nIf false, consecutive pixels in the \"height\" direction are sent next to each other.\nFor embedded screen controllers, this is typically true iff `width < height`\n(in other words, it's only true for portrait orientation screens).\nSome controllers may allow the user to change this (though the refresh order may not be optimal then).\nThis is independent of the `rotation` register.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"rw","name":"up_sampling","identifier":130,"description":"Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\nSome displays may allow changing this (which will also result in changes to `width` and `height`).\nTypical values are 1 and 2.","fields":[{"name":"_","unit":"px","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"rw","name":"rotation","identifier":131,"description":"Possible values are 0, 90, 180 and 270 only.\nWrite to this register do not affect `width` and `height` registers,\nand may be ignored by some screens.","fields":[{"name":"_","unit":"°","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16"}],"tags":[]},{"name":"Azure IoT Hub","status":"experimental","shortId":"iothub","camelName":"iotHub","shortName":"iotHub","extends":["_base"],"notes":{"short":"Send messages, receive commands, and work with device twins in Azure IoT Hub."},"classIdentifier":434976332,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"connect","identifier":128,"description":"Try connecting using currently set `connection_string`.\nThe service normally preiodically tries to connect automatically.","fields":[]},{"kind":"command","name":"disconnect","identifier":129,"description":"Disconnect from current Hub if any.\nThis disables auto-connect behavior, until a `connect` command is issued.","fields":[]},{"kind":"command","name":"send_string_msg","identifier":130,"description":"Sends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.","fields":[{"name":"msg","unit":"","type":"string0","storage":0},{"name":"property_name","unit":"","type":"string0","storage":0,"startRepeats":true},{"name":"property_value","unit":"","type":"string0","storage":0}],"hasReport":true,"packFormat":"z r: z z"},{"kind":"report","name":"send_string_msg","identifier":130,"description":"Sends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.","fields":[],"secondary":true},{"kind":"command","name":"send_msg_ext","identifier":131,"description":"Sends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.","fields":[],"hasReport":true},{"kind":"report","name":"send_msg_ext","identifier":131,"description":"Sends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.","fields":[{"name":"message","unit":"","type":"pipe_port","storage":2}],"secondary":true,"pipeType":"send_msg_ext","packFormat":"u16"},{"kind":"pipe_command","name":"message","identifier":0,"description":"Part of the body of the message.","fields":[{"name":"body","unit":"","type":"bytes","storage":0,"isSimpleType":true,"segmented":true}],"pipeType":"send_msg_ext","packFormat":"b"},{"kind":"meta_pipe_command","name":"properties","identifier":1,"description":"Set properties on the message. Can be repeated multiple times.","fields":[{"name":"property_name","unit":"","type":"string0","storage":0,"startRepeats":true},{"name":"property_value","unit":"","type":"string0","storage":0}],"pipeType":"send_msg_ext","packFormat":"r: z z"},{"kind":"command","name":"subscribe","identifier":132,"description":"Subscribes for cloud to device messages, which will be sent over the specified pipe.","fields":[{"name":"devicebound","unit":"","type":"pipe","storage":12}],"pipeType":"subscribe","packFormat":"b[12]"},{"kind":"meta_pipe_report","name":"devicebound_properties","identifier":1,"description":"If there are any properties, this meta-report is send one or more times.\nAll properties of a given message are always sent before the body.","fields":[{"name":"property_name","unit":"","type":"string0","storage":0,"startRepeats":true},{"name":"property_value","unit":"","type":"string0","storage":0}],"pipeType":"subscribe","packFormat":"r: z z"},{"kind":"pipe_report","name":"devicebound","identifier":0,"description":"For every message, the body is sent in one or more reports like this.","fields":[{"name":"body","unit":"","type":"bytes","storage":0,"isSimpleType":true,"multiSegmented":true,"segmented":true}],"pipeType":"subscribe","packFormat":"b"},{"kind":"command","name":"get_twin","identifier":133,"description":"Ask for current device digital twin.","fields":[{"name":"twin_result","unit":"","type":"pipe","storage":12}],"pipeType":"get_twin","packFormat":"b[12]"},{"kind":"pipe_report","name":"twin_json","identifier":0,"description":"The JSON-encoded twin. This is typically something like:\n`{ \"desired\": { \"foo\": 1, \"$version\": 12 }, \"reported\": { \"foo\": 1, \"bar\" 2, \"$version\": 123 } }`","fields":[{"name":"json","unit":"","type":"bytes","storage":0,"isSimpleType":true,"segmented":true}],"pipeType":"get_twin","packFormat":"b"},{"kind":"meta_pipe_report","name":"twin_error","identifier":1,"description":"This emitted if status is not 200.","fields":[{"name":"status_code","unit":"","type":"u32","storage":4,"isSimpleType":true}],"pipeType":"get_twin","packFormat":"u32"},{"kind":"command","name":"subscribe_twin","identifier":135,"description":"Subscribe to updates to our twin.","fields":[{"name":"twin_updates","unit":"","type":"pipe","storage":12}],"pipeType":"subscribe_twin","packFormat":"b[12]"},{"kind":"pipe_report","name":"twin_update_json","identifier":0,"description":"First, the current value of the twin is sent (this includes desired and reported properties).\nNext updates done by the back-end are streamed as they arrive (they only include the desired properties).","fields":[{"name":"json","unit":"","type":"bytes","storage":0,"isSimpleType":true,"multiSegmented":true,"segmented":true}],"pipeType":"subscribe_twin","packFormat":"b"},{"kind":"command","name":"patch_twin","identifier":134,"description":"Start twin update.","fields":[],"hasReport":true},{"kind":"report","name":"patch_twin","identifier":134,"description":"Start twin update.","fields":[{"name":"patch_port","unit":"","type":"pipe_port","storage":2}],"secondary":true,"pipeType":"patch_twin","packFormat":"u16"},{"kind":"pipe_command","name":"twin_patch_json","identifier":0,"description":"The JSON-encoded twin update. The pipe should be closed when the last packet is sent.\nYou just send updates for `reported` field, like this:\n`{ \"bar\": 3, \"baz\": null }` (skip `\"$version\"` and no `\"reported\": { ... }`).","fields":[{"name":"json","unit":"","type":"bytes","storage":0,"isSimpleType":true,"segmented":true}],"pipeType":"patch_twin","packFormat":"b"},{"kind":"command","name":"subscribe_method","identifier":136,"description":"Subscribe to direct method calls.","fields":[{"name":"method_call","unit":"","type":"pipe","storage":12}],"pipeType":"subscribe_method","packFormat":"b[12]"},{"kind":"pipe_report","name":"method_call_body","identifier":0,"description":"The method call body is sent using these packets.\nIf the body is empty, a single empty `method_call_body` is sent.","fields":[{"name":"json","unit":"","type":"bytes","storage":0,"isSimpleType":true,"multiSegmented":true,"segmented":true}],"pipeType":"subscribe_method","packFormat":"b"},{"kind":"meta_pipe_report","name":"method_call","identifier":1,"description":"This is sent after the last part of the `method_call_body`.","fields":[{"name":"method_name","unit":"","type":"string0","storage":0},{"name":"request_id","unit":"","type":"string0","storage":0}],"pipeType":"subscribe_method","packFormat":"z z"},{"kind":"command","name":"respond_to_method","identifier":137,"description":"Respond to a direct method call (`request_id` comes from `subscribe_method` pipe).","fields":[{"name":"status","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"request_id","unit":"","type":"string0","storage":0}],"hasReport":true,"packFormat":"u32 z"},{"kind":"report","name":"respond_to_method","identifier":137,"description":"Respond to a direct method call (`request_id` comes from `subscribe_method` pipe).","fields":[{"name":"response_body","unit":"","type":"pipe_port","storage":2}],"secondary":true,"pipeType":"respond_to_method","packFormat":"u16"},{"kind":"pipe_command","name":"method_response","identifier":0,"description":"The pipe should be closed when the last packet of response body is sent.","fields":[{"name":"json","unit":"","type":"bytes","storage":0,"isSimpleType":true,"segmented":true}],"pipeType":"respond_to_method","packFormat":"b"},{"kind":"ro","name":"connection_status","identifier":384,"description":"Returns `\"ok\"` when connected, and an error description otherwise.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"rw","name":"connection_string","identifier":128,"description":"Connection string typically looks something like \n`HostName=my-iot-hub.azure-devices.net;DeviceId=my-dev-007;SharedAccessKey=xyz+base64key`.\nYou can get it in `Shared access policies -> iothubowner -> Connection string-primary key` in the Azure Portal.\nThis register is write-only.\nYou can use `hub_name` and `device_id` to check if connection string is set, but you cannot get the shared access key.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"ro","name":"hub_name","identifier":385,"description":"Something like `my-iot-hub.azure-devices.net`; empty string when `connection_string` is not set.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"ro","name":"device_id","identifier":386,"description":"Something like `my-dev-007`; empty string when `connection_string` is not set.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"event","name":"connected","identifier":128,"description":"Emitted upon successful connection.","fields":[]},{"kind":"event","name":"connection_error","identifier":129,"description":"Emitted when connection was lost.","fields":[{"name":"reason","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"event","name":"devicebound_str","identifier":130,"description":"This event is emitted upon reception of a cloud to device message, that is a string\n(doesn't contain NUL bytes) and fits in a single event packet.\nFor reliable reception, use the `subscribe` command above.","fields":[{"name":"msg","unit":"","type":"string0","storage":0},{"name":"property_name","unit":"","type":"string0","storage":0,"startRepeats":true},{"name":"property_value","unit":"","type":"string0","storage":0}],"packFormat":"z r: z z"}],"tags":["iot"]},{"name":"Joystick","status":"experimental","shortId":"joystick","camelName":"joystick","shortName":"joystick","extends":["_base","_sensor"],"notes":{"short":"A two axis directional joystick"},"classIdentifier":449517712,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Thumb":1,"ArcadeBall":2,"ArcadeStick":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"direction","identifier":257,"description":"The direction of the joystick measure in two direction.\nIf joystick is digital, then each direction will read as either `-0x8000`, `0x0`, or `0x7fff`.","fields":[{"name":"x","unit":"/","shift":15,"type":"i1.15","storage":-2},{"name":"y","unit":"/","shift":15,"type":"i1.15","storage":-2}],"identifierName":"reading","packFormat":"i1.15 i1.15"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical joystick.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"const","name":"digital","identifier":384,"description":"Indicates if the joystick is digital, typically made of switches.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"optional":true,"packFormat":"u8"}],"tags":["button"]},{"name":"LED","status":"experimental","shortId":"led","camelName":"led","shortName":"led","extends":["_base"],"notes":{"short":"A controller for 1 or more monochrome or RGB LEDs connected in parallel."},"classIdentifier":506480888,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"ThroughHole":1,"SMD":2,"Power":3,"Bead":4}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"brightness","identifier":1,"description":"Set the luminosity of the strip. The value is used to scale `value` in `steps` register.\nAt `0` the power to the strip is completely shut down.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"intensity","packFormat":"u0.16"},{"kind":"rw","name":"animation","identifier":130,"description":"Animations are described using pairs of color description and duration, \nsimilarly to the `status_light` register in the control service.\n`repetition` as ``0`` is considered infinite.\nFor monochrome LEDs, the hue and saturation are ignored.\nA specification `(red, 80ms), (blue, 40ms), (blue, 0ms), (yellow, 80ms)`\nmeans to start with red, cross-fade to blue over 80ms, stay blue for 40ms,\nchange to yellow, and cross-fade back to red in 80ms.","fields":[{"name":"repetitions","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"hue","unit":"","type":"u8","storage":1,"isSimpleType":true,"startRepeats":true},{"name":"saturation","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"value","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"duration","unit":"8ms","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u16 r: u8 u8 u8 u8"},{"kind":"rw","name":"max_power","identifier":7,"description":"Limit the power drawn by the light-strip (and controller).","fields":[{"name":"_","unit":"mA","type":"u16","storage":2,"isSimpleType":true,"defaultValue":100}],"optional":true,"identifierName":"max_power","packFormat":"u16"},{"kind":"const","name":"led_count","identifier":384,"description":"If known, specifies the number of LEDs in parallel on this device.","fields":[{"name":"_","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"packFormat":"u16"},{"kind":"const","name":"wave_length","identifier":385,"description":"If monochrome LED, specifies the wave length of the LED.","fields":[{"name":"_","unit":"nm","type":"u16","storage":2,"isSimpleType":true,"typicalMin":365,"typicalMax":885}],"optional":true,"packFormat":"u16"},{"kind":"const","name":"luminous_intensity","identifier":386,"description":"The luminous intensity of the LED, at full value, in micro candella.","fields":[{"name":"_","unit":"mcd","type":"u16","storage":2,"isSimpleType":true,"typicalMin":10,"typicalMax":5000}],"optional":true,"packFormat":"u16"},{"kind":"const","name":"variant","identifier":263,"description":"The physical type of LED.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":["light"]},{"name":"LED Matrix","status":"experimental","shortId":"ledmatrix","camelName":"ledMatrix","shortName":"ledMatrix","extends":["_base"],"notes":{"short":"A rectangular monochrome LED matrix controller."},"classIdentifier":286070091,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"leds","identifier":2,"description":"The state of the screen where pixel on/off state is \nstored as a bit, column by column. The column should be byte aligned.","fields":[{"name":"_","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"identifierName":"value","packFormat":"b"},{"kind":"rw","name":"brightness","identifier":1,"description":"Reads the general brightness of the LEDs. ``0`` when the screen is off.","fields":[{"name":"_","unit":"/","shift":8,"type":"u0.8","storage":1}],"identifierName":"intensity","packFormat":"u0.8"},{"kind":"const","name":"rows","identifier":385,"description":"Number of rows on the screen","fields":[{"name":"_","unit":"#","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16"},{"kind":"const","name":"columns","identifier":386,"description":"Number of columns on the screen","fields":[{"name":"_","unit":"#","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16"}],"tags":["display"]},{"name":"LED Pixel","status":"experimental","shortId":"ledpixel","camelName":"ledPixel","shortName":"ledPixel","extends":["_base"],"notes":{"short":"A controller for strips of individually controlled RGB LEDs.","long":"## Light programs\n\nRealistically, with 1 mbit Jacdac, we can transmit under 2k of data per animation frame (at 20fps).\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\ninstallations and it would completely clog the network.\n\nThus, light service defines a domain-specific language for describing light animations\nand efficiently transmitting them over wire.\n\nLight commands are not Jacdac commands.\nLight commands are efficiently encoded as sequences of bytes and typically sent as payload\nof `run` command.\n\nDefinitions:\n* `P` - position in the strip\n* `R` - number of repetitions of the command\n* `N` - number of pixels affected by the command\n* `C` - single color designation\n* `C+` - sequence of color designations\n\nUpdate modes:\n* `0` - replace\n* `1` - add RGB\n* `2` - subtract RGB\n* `3` - multiply RGB (by c/128); each pixel value will change by at least 1\n\nProgram commands:\n* `0xD0: setall C+` - set all pixels in current range to given color pattern\n* `0xD1: fade C+` - set pixels in current range to colors between colors in sequence\n* `0xD2: fadehsv C+` - similar to `fade()`, but colors are specified and faded in HSV\n* `0xD3: rotfwd K` - rotate (shift) pixels by `K` positions away from the connector\n* `0xD4: rotback K` - same, but towards the connector\n* `0xD5: show M=50` - send buffer to strip and wait `M` milliseconds\n* `0xD6: range P=0 N=length W=1 S=0` - range from pixel `P`, `N` pixels long\n  (currently unsupported: every `W` pixels skip `S` pixels)\n* `0xD7: mode K=0` - set update mode\n* `0xD8: tmpmode K=0` - set update mode for next command only\n* `0xCF: setone P C` - set one pixel at `P` (in current range) to given color\n* `mult V` - macro to multiply current range by given value (float)\n\nA number `k` is encoded as follows:\n* `0 <= k < 128` -> `k`\n* `128 <= k < 16383` -> `0x80 | (k >> 8), k & 0xff`\n* bigger and negative numbers are not supported\n\nThus, bytes `0xC0-0xFF` are free to use for commands.\n\nFormats:\n* `0xC1, R, G, B` - single color parameter\n* `0xC2, R0, G0, B0, R1, G1, B1` - two color parameter\n* `0xC3, R0, G0, B0, R1, G1, B1, R2, G2, B2` - three color parameter\n* `0xC0, N, R0, G0, B0, ..., R(N-1), G(N-1), B(N-1)` - `N` color parameter\n* `0xCF, <number>, R, G, B` - `set1` special format\n\nCommands are encoded as command byte, followed by parameters in the order\nfrom the command definition.\n\nThe `setone()` command has irregular encoding to save space - it is byte `0xCF` followed by encoded\nnumber, and followed by 3 bytes of color."},"classIdentifier":309264608,"enums":{"LightType":{"name":"LightType","storage":1,"members":{"WS2812B_GRB":0,"APA102":16,"SK9822":17}},"Variant":{"name":"Variant","storage":1,"members":{"Strip":1,"Ring":2,"Stick":3,"Jewel":4,"Matrix":5}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"brightness","identifier":1,"description":"Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.","fields":[{"name":"_","unit":"/","shift":8,"type":"u0.8","storage":1,"defaultValue":0.05}],"identifierName":"intensity","packFormat":"u0.8"},{"kind":"ro","name":"actual_brightness","identifier":384,"description":"This is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.","fields":[{"name":"_","unit":"/","shift":8,"type":"u0.8","storage":1}],"packFormat":"u0.8"},{"kind":"rw","name":"light_type","identifier":128,"description":"Specifies the type of light strip connected to controller.\nControllers which are sold with lights should default to the correct type\nand could not allow change.","fields":[{"name":"_","unit":"","type":"LightType","storage":1}],"packFormat":"u8"},{"kind":"rw","name":"num_pixels","identifier":129,"description":"Specifies the number of pixels in the strip.\nControllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.","fields":[{"name":"_","unit":"","type":"u16","storage":2,"isSimpleType":true,"defaultValue":15}],"packFormat":"u16"},{"kind":"rw","name":"num_columns","identifier":131,"description":"If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.","fields":[{"name":"_","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"packFormat":"u16"},{"kind":"rw","name":"max_power","identifier":7,"description":"Limit the power drawn by the light-strip (and controller).","fields":[{"name":"_","unit":"mA","type":"u16","storage":2,"isSimpleType":true,"defaultValue":200}],"identifierName":"max_power","packFormat":"u16"},{"kind":"const","name":"max_pixels","identifier":385,"description":"The maximum supported number of pixels.\nAll writes to `num_pixels` are clamped to `max_pixels`.","fields":[{"name":"_","unit":"","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16"},{"kind":"rw","name":"num_repeats","identifier":130,"description":"How many times to repeat the program passed in `run` command.\nShould be set before the `run` command.\nSetting to `0` means to repeat forever.","fields":[{"name":"_","unit":"","type":"u16","storage":2,"isSimpleType":true,"defaultValue":1}],"packFormat":"u16"},{"kind":"const","name":"variant","identifier":263,"description":"Specifies the shape of the light strip.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"identifierName":"variant","packFormat":"u8"},{"kind":"command","name":"run","identifier":129,"description":"Run the given light \"program\". See service description for details.","fields":[{"name":"program","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"}],"tags":["light"]},{"name":"Light level","status":"experimental","shortId":"lightlevel","camelName":"lightLevel","shortName":"lightLevel","extends":["_base","_sensor"],"notes":{"short":"A sensor that measures luminosity level."},"classIdentifier":400333340,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"PhotoResistor":1,"LEDMatrix":2,"Ambient":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"light_level","identifier":257,"description":"Detect light level","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"reading","packFormat":"u0.16"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical sensor.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":["imaging"]},{"name":"Logger","status":"experimental","shortId":"logger","camelName":"logger","shortName":"logger","extends":["_base"],"notes":{"short":"A service which can report messages to the bus."},"classIdentifier":316415946,"enums":{"Priority":{"name":"Priority","storage":1,"members":{"Debug":0,"Log":1,"Warning":2,"Error":3,"Silent":4}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"min_priority","identifier":128,"description":"Messages with level lower than this won't be emitted. The default setting may vary.\nLoggers should revert this to their default setting if the register has not been\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\nThus, clients should write this register every 1000ms and ignore messages which are\ntoo verbose for them.","fields":[{"name":"_","unit":"","type":"Priority","storage":1,"defaultValue":1}],"packFormat":"u8"},{"kind":"report","name":"debug","identifier":128,"description":"Report a message.","fields":[{"name":"message","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"report","name":"log","identifier":129,"description":"Report a message.","fields":[{"name":"message","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"report","name":"warn","identifier":130,"description":"Report a message.","fields":[{"name":"message","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"report","name":"error","identifier":131,"description":"Report a message.","fields":[{"name":"message","unit":"","type":"string","storage":0}],"packFormat":"s"}],"tags":[]},{"name":"Magnetometer","status":"experimental","shortId":"magnetomer","camelName":"magnetometer","shortName":"magnetometer","extends":["_base","_sensor"],"notes":{"short":"A 3-axis magnetometer."},"classIdentifier":318935176,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"forces","identifier":257,"description":"Indicates the current magnetic field on magnetometer.\nFor reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).","fields":[{"name":"x","unit":"nT","type":"i32","storage":-4,"isSimpleType":true},{"name":"y","unit":"nT","type":"i32","storage":-4,"isSimpleType":true},{"name":"z","unit":"nT","type":"i32","storage":-4,"isSimpleType":true}],"identifierName":"reading","packFormat":"i32 i32 i32"},{"kind":"ro","name":"forces_error","identifier":262,"description":"Error on the readings.","fields":[{"name":"x","unit":"nT","type":"i32","storage":-4,"isSimpleType":true},{"name":"y","unit":"nT","type":"i32","storage":-4,"isSimpleType":true},{"name":"z","unit":"nT","type":"i32","storage":-4,"isSimpleType":true}],"optional":true,"identifierName":"reading_error","packFormat":"i32 i32 i32"},{"kind":"command","name":"calibrate","identifier":2,"description":"Forces a calibration sequence where the user/device\nmight have to rotate to be calibrated.","fields":[],"identifierName":"calibrate"}],"tags":[]},{"name":"Matrix Keypad","status":"experimental","shortId":"matrixkeypad","camelName":"matrixKeypad","shortName":"matrixKeypad","extends":["_base","_sensor"],"notes":{"short":"A matrix of buttons connected as a keypad"},"classIdentifier":319172040,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Membrane":1,"Keyboard":2,"Elastomer":3,"ElastomerLEDPixel":4}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"pressed","identifier":257,"description":"The coordinate of the button currently pressed. Keys are zero-indexed from left to right, top to bottom:\n``row = index / columns``, ``column = index % columns``.","fields":[{"name":"index","unit":"","type":"u8","storage":1,"isSimpleType":true,"startRepeats":true}],"identifierName":"reading","packFormat":"r: u8"},{"kind":"const","name":"rows","identifier":384,"description":"Number of rows in the matrix","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"const","name":"columns","identifier":385,"description":"Number of columns in the matrix","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"const","name":"labels","identifier":386,"description":"The characters printed on the keys if any, in indexing sequence.","fields":[{"name":"label","unit":"","type":"string0","storage":0,"startRepeats":true}],"optional":true,"packFormat":"r: z"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical keypad. If the variant is ``ElastomerLEDPixel``\nand the next service on the device is a ``LEDPixel`` service, it is considered\nas the service controlling the LED pixel on the keypad.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"event","name":"down","identifier":1,"description":"Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"identifierName":"active","packFormat":"u8"},{"kind":"event","name":"up","identifier":2,"description":"Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"identifierName":"inactive","packFormat":"u8"},{"kind":"event","name":"click","identifier":128,"description":"Emitted together with `up` when the press time was not longer than 500ms.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"event","name":"long_click","identifier":129,"description":"Emitted together with `up` when the press time was more than 500ms.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"}],"tags":["button"]},{"name":"Microphone","status":"experimental","shortId":"microphone","camelName":"microphone","shortName":"microphone","extends":["_base"],"notes":{"short":"A single-channel microphone."},"classIdentifier":289254534,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"sample","identifier":129,"description":"The samples will be streamed back over the `samples` pipe.\nIf `num_samples` is `0`, streaming will only stop when the pipe is closed.\nOtherwise the specified number of samples is streamed.\nSamples are sent as `i16`.","fields":[{"name":"samples","unit":"","type":"pipe","storage":12},{"name":"num_samples","unit":"","type":"u32","storage":4,"isSimpleType":true}],"pipeType":"sample","packFormat":"b[12] u32"},{"kind":"rw","name":"sampling_period","identifier":128,"description":"Get or set microphone sampling period.\nSampling rate is `1_000_000 / sampling_period Hz`.","fields":[{"name":"_","unit":"us","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"}],"tags":["sound"]},{"name":"MIDI output","status":"experimental","shortId":"midioutput","camelName":"midiOutput","shortName":"midiOutput","extends":["_base"],"notes":{"short":"A MIDI output device."},"classIdentifier":444894423,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"enabled","identifier":1,"description":"Opens or closes the port to the MIDI device","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"command","name":"clear","identifier":128,"description":"Clears any pending send data that has not yet been sent from the MIDIOutput's queue.","fields":[]},{"kind":"command","name":"send","identifier":129,"description":"Enqueues the message to be sent to the corresponding MIDI port","fields":[{"name":"data","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"}],"tags":["sound"]},{"name":"Model Runner","status":"experimental","shortId":"modelrunner","camelName":"modelRunner","shortName":"modelRunner","extends":["_base"],"notes":{"short":"Runs machine learning models.\n\nOnly models with a single input tensor and a single output tensor are supported at the moment.\nInput is provided by Sensor Aggregator service on the same device.\nMultiple instances of this service may be present, if more than one model format is supported by a device."},"classIdentifier":336566904,"enums":{"ModelFormat":{"name":"ModelFormat","storage":4,"members":{"TFLite":860636756,"ML4F":809963362,"EdgeImpulseCompiled":810961221}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"set_model","identifier":128,"description":"Open pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.","fields":[{"name":"model_size","unit":"B","type":"u32","storage":4,"isSimpleType":true}],"hasReport":true,"packFormat":"u32"},{"kind":"report","name":"set_model","identifier":128,"description":"Open pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.","fields":[{"name":"model_port","unit":"","type":"pipe_port","storage":2}],"secondary":true,"pipeType":"set_model","packFormat":"u16"},{"kind":"command","name":"predict","identifier":129,"description":"Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.","fields":[{"name":"outputs","unit":"","type":"pipe","storage":12}],"pipeType":"predict","hasReport":true,"packFormat":"b[12]"},{"kind":"report","name":"predict","identifier":129,"description":"Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.","fields":[{"name":"inputs","unit":"","type":"pipe_port","storage":2}],"secondary":true,"pipeType":"predict","packFormat":"u16"},{"kind":"rw","name":"auto_invoke_every","identifier":128,"description":"When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\nThe `outputs` register will stream its value after each run.\nThis register is not stored in flash.","fields":[{"name":"_","unit":"","type":"u16","storage":2,"isSimpleType":true}],"packFormat":"u16"},{"kind":"ro","name":"outputs","identifier":257,"description":"Results of last model invocation as `float32` array.","fields":[{"name":"output","unit":"","isFloat":true,"type":"f32","storage":4,"startRepeats":true}],"identifierName":"reading","packFormat":"r: f32"},{"kind":"ro","name":"input_shape","identifier":384,"description":"The shape of the input tensor.","fields":[{"name":"dimension","unit":"","type":"u16","storage":2,"isSimpleType":true,"startRepeats":true}],"packFormat":"r: u16"},{"kind":"ro","name":"output_shape","identifier":385,"description":"The shape of the output tensor.","fields":[{"name":"dimension","unit":"","type":"u16","storage":2,"isSimpleType":true,"startRepeats":true}],"packFormat":"r: u16"},{"kind":"ro","name":"last_run_time","identifier":386,"description":"The time consumed in last model execution.","fields":[{"name":"_","unit":"us","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"ro","name":"allocated_arena_size","identifier":387,"description":"Number of RAM bytes allocated for model execution.","fields":[{"name":"_","unit":"B","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"ro","name":"model_size","identifier":388,"description":"The size of the model in bytes.","fields":[{"name":"_","unit":"B","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"ro","name":"last_error","identifier":389,"description":"Textual description of last error when running or loading model (if any).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"const","name":"format","identifier":390,"description":"The type of ML models supported by this service.\n`TFLite` is flatbuffer `.tflite` file.\n`ML4F` is compiled machine code model for Cortex-M4F.\nThe format is typically present as first or second little endian word of model file.","fields":[{"name":"_","unit":"","type":"ModelFormat","storage":4}],"packFormat":"u32"},{"kind":"const","name":"format_version","identifier":391,"description":"A version number for the format.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"const","name":"parallel","identifier":392,"description":"If present and true this service can run models independently of other\ninstances of this service on the device.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"optional":true,"packFormat":"u8"}],"tags":[]},{"name":"Motion","status":"experimental","shortId":"motion","camelName":"motion","shortName":"motion","extends":["_base","_sensor"],"notes":{"short":"A sensor, typically PIR, that detects object motion within a certain range","events":"event movement @ active { }\n\nA movement was detected."},"classIdentifier":293185353,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"PIR":1}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"moving","identifier":257,"description":"Reports is movement is currently detected by the sensor.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"reading","preferredInterval":1000,"packFormat":"u8"},{"kind":"const","name":"max_distance","identifier":384,"description":"Maximum distance where objects can be detected.","fields":[{"name":"_","unit":"m","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"},{"kind":"const","name":"angle","identifier":385,"description":"Opening of the field of view","fields":[{"name":"_","unit":"°","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"packFormat":"u16"},{"kind":"const","name":"variant","identifier":263,"description":"Type of physical sensor","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":["movement"]},{"name":"Motor","status":"experimental","shortId":"motor","camelName":"motor","shortName":"motor","extends":["_base"],"notes":{"short":"A bi-directional DC motor."},"classIdentifier":385895640,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"duty","identifier":2,"description":"PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\nPositive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0`` \nwhile ``enabled`` acts as brake.","fields":[{"name":"_","unit":"/","shift":15,"type":"i1.15","storage":-2}],"identifierName":"value","packFormat":"i1.15"},{"kind":"rw","name":"enabled","identifier":1,"description":"Turn the power to the motor on/off.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"const","name":"load_torque","identifier":384,"description":"Torque required to produce the rated power of an electrical motor at load speed.","fields":[{"name":"_","unit":"kg/cm","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"},{"kind":"const","name":"load_speed","identifier":385,"description":"Revolutions per minute of the motor under full load.","fields":[{"name":"_","unit":"rpm","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"}],"tags":[]},{"name":"Multitouch","status":"experimental","shortId":"multitouch","camelName":"multitouch","shortName":"multitouch","extends":["_base","_sensor"],"notes":{"short":"A capacitive touch sensor with multiple inputs.","events":"Most events include the channel number of the input."},"classIdentifier":416636459,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"capacity","identifier":257,"description":"Capacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\nno touch, wheres a value of around `100` or more indicates touch.\nIt's best to ignore this (unless debugging), and use events.","fields":[{"name":"capacitance","unit":"","type":"i32","storage":-4,"isSimpleType":true,"startRepeats":true}],"identifierName":"reading","packFormat":"r: i32"},{"kind":"event","name":"touch","identifier":1,"description":"Emitted when an input is touched.","fields":[{"name":"channel","unit":"","type":"u32","storage":4,"isSimpleType":true}],"identifierName":"active","packFormat":"u32"},{"kind":"event","name":"release","identifier":2,"description":"Emitted when an input is no longer touched.","fields":[{"name":"channel","unit":"","type":"u32","storage":4,"isSimpleType":true}],"identifierName":"inactive","packFormat":"u32"},{"kind":"event","name":"tap","identifier":128,"description":"Emitted when an input is briefly touched. TODO Not implemented.","fields":[{"name":"channel","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"event","name":"long_press","identifier":129,"description":"Emitted when an input is touched for longer than 500ms. TODO Not implemented.","fields":[{"name":"channel","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"event","name":"swipe_pos","identifier":144,"description":"Emitted when input channels are successively touched in order of increasing channel numbers.","fields":[]},{"kind":"event","name":"swipe_neg","identifier":145,"description":"Emitted when input channels are successively touched in order of decreasing channel numbers.","fields":[]}],"tags":["button"]},{"name":"Potentiometer","status":"experimental","shortId":"potentiometer","camelName":"potentiometer","shortName":"potentiometer","extends":["_base","_sensor"],"notes":{"short":"A slider or rotary potentiometer."},"classIdentifier":522667846,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Slider":1,"Rotary":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"position","identifier":257,"description":"The relative position of the slider between `0` and `1`.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"reading","packFormat":"u0.16"},{"kind":"const","name":"variant","identifier":263,"description":"Specifies the physical layout of the potentiometer.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"identifierName":"variant","packFormat":"u8"}],"tags":["slider"]},{"name":"Power","status":"experimental","shortId":"power","camelName":"power","shortName":"power","extends":["_base"],"notes":{"short":"A power-provider service.","long":"## Power negotiation protocol\n\nThe purpose of the power negotiation is to ensure that there is no more than ~500mA\ndelivered to the power rail.\nThis is realized by limiting the number of enabled power provider services to one.\n\nNote, that it's also possible to have low-current power providers,\nwhich are limited to 100mA and do not run a power provider service.\nThese are **not** accounted for in the power negotiation protocol.\n\nThe protocol is based on `active` reports, which are always sent \nafter general device announce packets, in the same frame.\nThis makes it simpler for other power services to parse them.\n\nThe `active` reports contain device priority, which is formed from the maximum available current\nand remaining battery capacity.\n\nAfter queuing an announce with `active` report, the service enters a grace period\nuntil the report has been sent on the wire.\nDuring the grace period incoming `active` reports are ignored.\n\n* Upon reset, a power service enables itself, and then only after 0-300ms (random)\n  send the first device announce packet directly followed by `active` report\n* Every enabled power service emits power `active` reports with its announce packets,\n  which are sent every 400-600ms (random; first few announce packets can be even sent more often)\n* If an enabled power service sees a power `active` report from somebody else of higher or equal priority,\n  it disables itself (unless in grace period)\n* If a disabled power service sees no power `active` report for more than ~1200ms, it enables itself\n  (this is when the previous power source is unplugged or otherwise malfunctions)\n* Power services keep track of the current provider\n  (device ID from the most recent `active` report, either incoming or outgoing).\n  If the current provider has not changed for at least 50-60s (random),\n  and its last priority is lower or equal to the current service priority,\n  then just before the next announce period, the service enables itself\n  (thus also resetting the 50-60s timer).\n\n### Rationale for the grace period\n\nConsider the following scenario:\n* device A queues `active` report for sending\n* A receives external `active` packet from B (thus disabling A)\n* the A `active` report is sent from the queue (thus eventually disabling B)\nTo avoid that, we make sure that at the precise instant when `active` report is sent,\nthe device is enabled (and thus will stay enabled until another `active` report arrives).\nThis could be achieved by inspecting the enable bit, aftering acquiring the line\nand before starting UART transmission, however that would require breaking abstraction layers.\nSo instead, we never disable the service, while the `active` packet is queued.\nThis may lead to delays in disabling power services, but these should be limited due to the\nrandom nature of the announce packet spacing.\n\n### Rationale for timings\n\nThe initial 0-300ms delay is set to spread out the announce periods of power services,\nto minimize collisions.\nThe announce periods are randomized 400-600ms, instead of a fixed 500ms used for regular\nservices, for the same reason.\n\nThe 1200ms period is set so that droping two announce packets in a row\nfrom the current provider will not cause power switch, while missing 3 will.\n\nThe 50-60s power switch period is arbitrary, but chosen to limit amount of switching between supplies,\nwhile keeping it short enough for user to notice any problems such switching may cause."},"classIdentifier":530893146,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"enabled","identifier":1,"description":"Turn the power to the bus on/off.","fields":[{"name":"_","unit":"","type":"bool","storage":1,"defaultValue":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"rw","name":"max_power","identifier":7,"description":"Limit the power provided by the service. The actual maximum limit will depend on hardware.\nThis field may be read-only in some implementations - you should read it back after setting.","fields":[{"name":"_","unit":"mA","type":"u16","storage":2,"isSimpleType":true,"defaultValue":500,"typicalMax":500,"typicalMin":0}],"identifierName":"max_power","packFormat":"u16"},{"kind":"ro","name":"overload","identifier":385,"description":"Indicates whether the power has been shut down due to overdraw.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"ro","name":"current_draw","identifier":257,"description":"Present current draw from the bus.","fields":[{"name":"_","unit":"mA","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"reading","packFormat":"u16"},{"kind":"ro","name":"battery_voltage","identifier":384,"description":"Voltage on input.","fields":[{"name":"_","unit":"mV","type":"u16","storage":2,"isSimpleType":true,"typicalMin":4500,"typicalMax":5500}],"optional":true,"packFormat":"u16"},{"kind":"ro","name":"battery_charge","identifier":386,"description":"Fraction of charge in the battery.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"optional":true,"packFormat":"u0.16"},{"kind":"const","name":"battery_capacity","identifier":387,"description":"Energy that can be delivered to the bus when battery is fully charged.\nThis excludes conversion overheads if any.","fields":[{"name":"_","unit":"mWh","type":"u32","storage":4,"isSimpleType":true}],"optional":true,"packFormat":"u32"},{"kind":"rw","name":"keep_on_pulse_duration","identifier":128,"description":"Many USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.","fields":[{"name":"_","unit":"ms","type":"u16","storage":2,"isSimpleType":true,"defaultValue":600}],"packFormat":"u16"},{"kind":"rw","name":"keep_on_pulse_period","identifier":129,"description":"Many USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.","fields":[{"name":"_","unit":"ms","type":"u16","storage":2,"isSimpleType":true,"defaultValue":20000}],"packFormat":"u16"},{"kind":"rw","name":"priority_offset","identifier":130,"description":"This value is added to `priority` of `active` reports, thus modifying amount of load-sharing\nbetween different supplies.\nThe `priority` is clamped to `u32` range when included in `active` reports.","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"report","name":"active","identifier":128,"description":"Emitted with announce packets when the service is running.\nThe `priority` should be computed as\n`(((max_power >> 5) << 24) | remaining_capacity) + priority_offset`\nwhere the `remaining_capacity` is `(battery_charge * battery_capacity) >> 16`,\nor one of the special constants\n`0xe00000` when the remaining capacity is unknown,\nor `0xf00000` when the capacity is considered infinite (eg., wall charger).\nThe `priority` is clamped to `u32` range after computation.\nIn cases where battery capacity is unknown but the charge percentage can be estimated,\nit's recommended to assume a fixed (typical) battery capacity for priority purposes,\nrather than using `0xe00000`, as this will have a better load-sharing characteristic,\nespecially if several power providers of the same type are used.","fields":[{"name":"priority","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"}],"tags":[]},{"name":"Protocol Test","status":"experimental","shortId":"prototest","camelName":"protoTest","shortName":"protoTest","extends":["_base"],"notes":{"short":"This is test service to validate the protocol packet transmissions between the browser and a MCU.\nUse this page if you are porting Jacdac to a new platform.","long":"### Test procedure\n\nFor each ``rw`` registers, set a random value ``x``\n  * read ``rw`` and check value is equal to ``x``\n  * read ``ro`` and check value is equal to ``x``\n  * listen to ``e`` event and check that data is equal to ``x``\n  * call ``c`` command with new random value ``y``\n  * read ``rw`` and check value is equal to ``y``\n  * do all the above steps with acks\n\nFor each ``rw`` registers, there shall also\nbe an ``event`` and a ``command``. The event\nshould get raised when the value changes;\nand the command should set the value.","registers":"Every ``rw`` register has a corresponding ``ro`` regisrer\nand a corresponding ``set_...`` command to also set the value."},"classIdentifier":382158442,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"rw_bool","identifier":129,"description":"A read write bool register.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"ro","name":"ro_bool","identifier":385,"description":"A read only bool register. Mirrors rw_bool.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"rw","name":"rw_u32","identifier":130,"description":"A read write u32 register.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"ro","name":"ro_u32","identifier":386,"description":"A read only u32 register.. Mirrors rw_u32.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"rw","name":"rw_i32","identifier":131,"description":"A read write i32 register.","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"ro","name":"ro_i32","identifier":387,"description":"A read only i32 register.. Mirrors rw_i32.","fields":[{"name":"_","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"rw","name":"rw_string","identifier":132,"description":"A read write string register.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"ro","name":"ro_string","identifier":388,"description":"A read only string register. Mirrors rw_string.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"rw","name":"rw_bytes","identifier":133,"description":"A read write string register.","fields":[{"name":"_","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"},{"kind":"ro","name":"ro_bytes","identifier":389,"description":"A read only string register. Mirrors ro_bytes.","fields":[{"name":"_","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"},{"kind":"rw","name":"rw_i8_u8_u16_i32","identifier":134,"description":"A read write i8, u8, u16, i32 register.","fields":[{"name":"i8","unit":"","type":"i8","storage":-1,"isSimpleType":true},{"name":"u8","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"u16","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"i32","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i8 u8 u16 i32"},{"kind":"ro","name":"ro_i8_u8_u16_i32","identifier":390,"description":"A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.","fields":[{"name":"i8","unit":"","type":"i8","storage":-1,"isSimpleType":true},{"name":"u8","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"u16","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"i32","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i8 u8 u16 i32"},{"kind":"rw","name":"rw_u8_string","identifier":135,"description":"A read write u8, string register.","fields":[{"name":"u8","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"string","unit":"","type":"string","storage":0}],"packFormat":"u8 s"},{"kind":"ro","name":"ro_u8_string","identifier":391,"description":"A read only u8, string register.. Mirrors rw_u8_string.","fields":[{"name":"u8","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"string","unit":"","type":"string","storage":0}],"packFormat":"u8 s"},{"kind":"event","name":"e_bool","identifier":129,"description":"An event raised when rw_bool is modified","fields":[{"name":"bool","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"event","name":"e_u32","identifier":130,"description":"An event raised when rw_u32 is modified","fields":[{"name":"u32","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"event","name":"e_i32","identifier":131,"description":"An event raised when rw_i32 is modified","fields":[{"name":"i32","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"event","name":"e_string","identifier":132,"description":"An event raised when rw_string is modified","fields":[{"name":"string","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"event","name":"e_bytes","identifier":133,"description":"An event raised when rw_bytes is modified","fields":[{"name":"bytes","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"},{"kind":"event","name":"e_i8_u8_u16_i32","identifier":134,"description":"An event raised when rw_i8_u8_u16_i32 is modified","fields":[{"name":"i8","unit":"","type":"i8","storage":-1,"isSimpleType":true},{"name":"u8","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"u16","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"i32","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i8 u8 u16 i32"},{"kind":"event","name":"e_u8_string","identifier":135,"description":"An event raised when rw_u8_string is modified","fields":[{"name":"u8","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"string","unit":"","type":"string","storage":0}],"packFormat":"u8 s"},{"kind":"command","name":"c_bool","identifier":129,"description":"A command to set rw_bool.","fields":[{"name":"bool","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"command","name":"c_u32","identifier":130,"description":"A command to set rw_u32.","fields":[{"name":"u32","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"command","name":"c_i32","identifier":131,"description":"A command to set rw_i32.","fields":[{"name":"i32","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i32"},{"kind":"command","name":"c_string","identifier":132,"description":"A command to set rw_string.","fields":[{"name":"string","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"command","name":"c_bytes","identifier":133,"description":"A command to set rw_string.","fields":[{"name":"bytes","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"b"},{"kind":"command","name":"c_i8_u8_u16_i32","identifier":134,"description":"A command to set rw_bytes.","fields":[{"name":"i8","unit":"","type":"i8","storage":-1,"isSimpleType":true},{"name":"u8","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"u16","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"i32","unit":"","type":"i32","storage":-4,"isSimpleType":true}],"packFormat":"i8 u8 u16 i32"},{"kind":"command","name":"c_u8_string","identifier":135,"description":"A command to set rw_u8_string.","fields":[{"name":"u8","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"string","unit":"","type":"string","storage":0}],"packFormat":"u8 s"},{"kind":"command","name":"c_report_pipe","identifier":144,"description":"A command to read the content of rw_bytes, byte per byte, as a pipe.","fields":[{"name":"p_bytes","unit":"","type":"pipe","storage":12}],"pipeType":"c_report_pipe","packFormat":"b[12]"},{"kind":"pipe_report","name":"p_bytes","identifier":0,"description":"A command to read the content of rw_bytes, byte per byte, as a pipe.","fields":[{"name":"byte","unit":"","type":"u8","storage":1,"isSimpleType":true}],"pipeType":"c_report_pipe","packFormat":"u8"}],"tags":[]},{"name":"Pulse Oximeter","status":"experimental","shortId":"pulseoximeter","camelName":"pulseOximeter","shortName":"pulseOximeter","extends":["_base","_sensor"],"notes":{"short":"A sensor approximating the oxygen level. \n\n**Jacdac is not suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**"},"classIdentifier":280710838,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"oxygen","identifier":257,"description":"The estimated oxygen level in blood.","fields":[{"name":"_","unit":"%","shift":8,"type":"u8.8","storage":2,"typicalMin":80,"typicalMax":100}],"identifierName":"reading","packFormat":"u8.8"},{"kind":"ro","name":"oxygen_error","identifier":262,"description":"The estimated error on the reported sensor data.","fields":[{"name":"_","unit":"%","shift":8,"type":"u8.8","storage":2}],"optional":true,"identifierName":"reading_error","packFormat":"u8.8"}],"tags":["biometric"]},{"name":"Rain gauge","status":"experimental","shortId":"raingauge","camelName":"rainGauge","shortName":"rainGauge","extends":["_base","_sensor"],"notes":{"short":"Measures the amount of liquid precipitation over an area in a predefined period of time."},"classIdentifier":326323349,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"precipitation","identifier":257,"description":"Total precipitation recorded so far.","fields":[{"name":"_","unit":"mm","shift":16,"type":"u16.16","storage":4}],"identifierName":"reading","preferredInterval":60000,"packFormat":"u16.16"},{"kind":"const","name":"precipitation_precision","identifier":264,"description":"Typically the amount of rain needed for tipping the bucket.","fields":[{"name":"_","unit":"mm","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"reading_resolution","packFormat":"u16.16"}],"tags":["environment"]},{"name":"Real time clock","status":"experimental","shortId":"realtimeclock","camelName":"realTimeClock","shortName":"realTimeClock","extends":["_base","_sensor"],"notes":{"short":"Real time clock to support collecting data with precise time stamps."},"classIdentifier":445323816,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Computer":1,"Crystal":2,"Cuckoo":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"local_time","identifier":257,"description":"Current time in 24h representation. \n* ``day_of_month`` is day of the month, starting at ``1``\n* ``day_of_week`` is day of the week, starting at ``1`` as monday\nDefault streaming period is 1 second.","fields":[{"name":"year","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"month","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":1,"absoluteMax":12},{"name":"day_of_month","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":1,"absoluteMax":31},{"name":"day_of_week","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":1,"absoluteMax":7},{"name":"hour","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":0,"absoluteMax":23},{"name":"min","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":0,"absoluteMax":59},{"name":"sec","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":0,"absoluteMax":60}],"identifierName":"reading","preferredInterval":1000,"packFormat":"u16 u8 u8 u8 u8 u8 u8"},{"kind":"ro","name":"error","identifier":384,"description":"Time drift since the last call to the ``set_time`` command.","fields":[{"name":"_","unit":"s","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"},{"kind":"const","name":"precision","identifier":384,"description":"Error on the clock, in parts per million of seconds.","fields":[{"name":"_","unit":"ppm","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical clock used by the sensor.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"command","name":"set_time","identifier":128,"description":"Sets the current time and resets the error.","fields":[{"name":"year","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"month","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":1,"absoluteMax":12},{"name":"day_of_month","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":1,"absoluteMax":31},{"name":"day_of_week","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":1,"absoluteMax":7},{"name":"hour","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":0,"absoluteMax":23},{"name":"min","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":0,"absoluteMax":59},{"name":"sec","unit":"","type":"u8","storage":1,"isSimpleType":true,"absoluteMin":0,"absoluteMax":60}],"packFormat":"u16 u8 u8 u8 u8 u8 u8"}],"tags":[]},{"name":"Reflected light","status":"experimental","shortId":"reflectedlight","camelName":"reflectedLight","shortName":"reflectedLight","extends":["_base","_sensor"],"notes":{"short":"A sensor that detects light and dark surfaces, commonly used for line following robots."},"classIdentifier":309087410,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"InfraredDigital":1,"InfraredAnalog":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"brightness","identifier":257,"description":"Reports the reflected brightness. It may be a digital value or, for some sensor, analog value.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"reading","packFormat":"u0.16"},{"kind":"const","name":"variant","identifier":263,"description":"Type of physical sensor used","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"event","name":"dark","identifier":2,"description":"The sensor detected a transition from light to dark","fields":[],"identifierName":"inactive"},{"kind":"event","name":"light","identifier":1,"description":"The sensor detected a transition from dark to light","fields":[],"identifierName":"active"}],"tags":["imaging"]},{"name":"Relay","status":"experimental","shortId":"relay","camelName":"relay","shortName":"relay","extends":["_base"],"notes":{"short":"A switching relay."},"classIdentifier":406840918,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Electromechanical":1,"SolidState":2,"Reed":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"closed","identifier":1,"description":"Indicates whether the relay circuit is currently on (closed) or off (closed).","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"const","name":"variant","identifier":263,"description":"Describes the type of relay used.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"const","name":"max_switching_current","identifier":384,"description":"Maximum switching current for a resistive load.","fields":[{"name":"_","unit":"mA","type":"u32","storage":4,"isSimpleType":true}],"optional":true,"packFormat":"u32"},{"kind":"event","name":"on","identifier":1,"description":"Emitted when relay goes from ``off`` to ``on`` state.","fields":[],"identifierName":"active"},{"kind":"event","name":"off","identifier":2,"description":"Emitted when relay goes from ``on`` to ``off`` state.","fields":[],"identifierName":"inactive"}],"tags":[]},{"name":"Random Number Generator","status":"experimental","shortId":"rng","camelName":"rng","shortName":"rng","extends":["_base"],"notes":{"short":"Generates random numbers using entropy sourced from physical processes.\n\nThis typically uses a cryptographical pseudo-random number generator (for example [Fortuna](https://en.wikipedia.org/wiki/Fortuna_(PRNG))),\nwhich is periodically re-seeded with entropy coming from some hardware source."},"classIdentifier":394916002,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Quantum":1,"ADCNoise":2,"WebCrypto":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"ro","name":"random","identifier":257,"description":"A register that returns a 64 bytes random buffer on every request.\nThis never blocks for a long time. If you need additional random bytes, keep querying the register.","fields":[{"name":"_","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"identifierName":"reading","packFormat":"b"},{"kind":"const","name":"variant","identifier":263,"description":"The type of algorithm/technique used to generate the number.\n`Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\n`ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\n`WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":[]},{"name":"Role Manager","status":"experimental","shortId":"rolemanager","camelName":"roleManager","shortName":"roleManager","extends":["_base"],"notes":{"short":"Assign roles to services on the Jacdac bus.\n\nInternally, the role manager stores a mapping from from `(device_id, service_idx)` to role name.\nUsers refer to services by using role names (eg., they instantiate an accelerometer client with a given role name).\nEach client has a role, and roles are unique to clients\n(ie., one should not have both a gyro and accelerometer service with role `left_leg`).\n\nRole names can be hierarchical, using slash character as a separator.\nExamples: `left_leg/acc`, `left_leg/gyro`, `right_leg/acc`.\nIf two roles share the prefix before first slash, it should be used as a hint that the services\nshould be co-located on a single device\n(eg., here the `left_leg` \"location\" is expected to have both an accelerometer and a gyro service on a single device)."},"classIdentifier":508264038,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"auto_bind","identifier":128,"description":"Normally, if some roles are unfilled, and there are idle services that can fulfill them,\nthe brain device will assign roles (bind) automatically.\nSuch automatic assignment happens every second or so, and is trying to be smart about \nco-locating roles that share \"host\" (part before first slash),\nas well as reasonably stable assignments.\nOnce user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.","fields":[{"name":"_","unit":"","type":"bool","storage":1,"defaultValue":1}],"packFormat":"u8"},{"kind":"ro","name":"all_roles_allocated","identifier":385,"description":"Indicates if all required roles have been allocated to devices.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"command","name":"get_role","identifier":128,"description":"Get the role corresponding to given device identifer. Returns empty string if unset.","fields":[{"name":"device_id","unit":"","type":"devid","storage":8},{"name":"service_idx","unit":"","type":"u8","storage":1,"isSimpleType":true}],"hasReport":true,"packFormat":"b[8] u8"},{"kind":"report","name":"get_role","identifier":128,"description":"Get the role corresponding to given device identifer. Returns empty string if unset.","fields":[{"name":"device_id","unit":"","type":"devid","storage":8},{"name":"service_idx","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"role","unit":"","type":"string","storage":0}],"secondary":true,"packFormat":"b[8] u8 s"},{"kind":"command","name":"set_role","identifier":129,"description":"Set role. Can set to empty to remove role binding.","fields":[{"name":"device_id","unit":"","type":"devid","storage":8},{"name":"service_idx","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"role","unit":"","type":"string","storage":0}],"packFormat":"b[8] u8 s"},{"kind":"command","name":"clear_all_roles","identifier":132,"description":"Remove all role bindings.","fields":[]},{"kind":"command","name":"list_stored_roles","identifier":130,"description":"Return all roles stored internally.","fields":[{"name":"stored_roles","unit":"","type":"pipe","storage":12}],"pipeType":"list_stored_roles","packFormat":"b[12]"},{"kind":"pipe_report","name":"stored_roles","identifier":0,"description":"Return all roles stored internally.","fields":[{"name":"device_id","unit":"","type":"devid","storage":8},{"name":"service_idx","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"role","unit":"","type":"string","storage":0}],"pipeType":"list_stored_roles","packFormat":"b[8] u8 s"},{"kind":"command","name":"list_required_roles","identifier":131,"description":"List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.","fields":[{"name":"required_roles","unit":"","type":"pipe","storage":12}],"pipeType":"list_required_roles","packFormat":"b[12]"},{"kind":"pipe_report","name":"required_roles","identifier":0,"description":"List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.","fields":[{"name":"device_id","unit":"","type":"devid","storage":8},{"name":"service_class","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"service_idx","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"role","unit":"","type":"string","storage":0}],"pipeType":"list_required_roles","packFormat":"b[8] u32 u8 s"},{"kind":"event","name":"change","identifier":3,"description":"Emit notifying that the internal state of the service changed.","fields":[],"identifierName":"change"}],"tags":[]},{"name":"Rotary encoder","status":"experimental","shortId":"rotaryencoder","camelName":"rotaryEncoder","shortName":"rotaryEncoder","extends":["_base","_sensor"],"notes":{"short":"An incremental rotary encoder - converts angular motion of a shaft to digital signal."},"classIdentifier":284830153,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"position","identifier":257,"description":"Upon device reset starts at `0` (regardless of the shaft position).\nIncreases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.","fields":[{"name":"_","unit":"#","type":"i32","storage":-4,"isSimpleType":true}],"identifierName":"reading","packFormat":"i32"},{"kind":"const","name":"clicks_per_turn","identifier":384,"description":"This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.","fields":[{"name":"_","unit":"#","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"packFormat":"u16"}],"tags":["slider"]},{"name":"Sensor Aggregator","status":"experimental","shortId":"sensoraggregator","camelName":"sensorAggregator","shortName":"sensorAggregator","extends":["_base"],"notes":{"short":"Aggregate data from multiple sensors into a single stream\n(often used as input to machine learning models on the same device, see model runner service)."},"classIdentifier":496034245,"enums":{"SampleType":{"name":"SampleType","storage":1,"members":{"U8":8,"I8":136,"U16":16,"I16":144,"U32":32,"I32":160}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"inputs","identifier":128,"description":"Set automatic input collection.\nThese settings are stored in flash.","fields":[{"name":"sampling_interval","unit":"ms","type":"u16","storage":2,"isSimpleType":true},{"name":"samples_in_window","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"reserved","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"device_id","unit":"","type":"devid","storage":8,"startRepeats":true},{"name":"service_class","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"service_num","unit":"","type":"u8","storage":1,"isSimpleType":true},{"name":"sample_size","unit":"B","type":"u8","storage":1,"isSimpleType":true},{"name":"sample_type","unit":"","type":"SampleType","storage":1},{"name":"sample_shift","unit":"","type":"i8","storage":-1,"isSimpleType":true}],"packFormat":"u16 u16 u32 r: b[8] u32 u8 u8 u8 i8"},{"kind":"ro","name":"num_samples","identifier":384,"description":"Number of input samples collected so far.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"ro","name":"sample_size","identifier":385,"description":"Size of a single sample.","fields":[{"name":"_","unit":"B","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"rw","name":"streaming_samples","identifier":129,"description":"When set to `N`, will stream `N` samples as `current_sample` reading.","fields":[{"name":"_","unit":"","type":"u32","storage":4,"isSimpleType":true}],"packFormat":"u32"},{"kind":"ro","name":"current_sample","identifier":257,"description":"Last collected sample.","fields":[{"name":"_","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"identifierName":"reading","packFormat":"b"}],"tags":[]},{"name":"Servo","status":"experimental","shortId":"servo","camelName":"servo","shortName":"servo","extends":["_base"],"notes":{"short":"Servo is a small motor with arm that can be pointing at a specific direction.\n\nThe `min/max_angle/pulse` may be read-only if the servo is permanently affixed to its Jacdac controller."},"classIdentifier":318542083,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"angle","identifier":2,"description":"Specifies the angle of the arm.","fields":[{"name":"_","unit":"°","shift":16,"type":"i16.16","storage":-4,"typicalMin":-90,"typicalMax":90}],"identifierName":"value","packFormat":"i16.16"},{"kind":"rw","name":"enabled","identifier":1,"description":"Turn the power to the servo on/off.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"rw","name":"offset","identifier":129,"description":"Correction applied to the angle to account for the servo arm drift.","fields":[{"name":"_","unit":"°","shift":16,"type":"i16.16","storage":-4}],"packFormat":"i16.16"},{"kind":"rw","name":"min_angle","identifier":130,"description":"Lowest angle that can be set.","fields":[{"name":"_","unit":"°","shift":16,"type":"i16.16","storage":-4,"defaultValue":-90}],"packFormat":"i16.16"},{"kind":"rw","name":"min_pulse","identifier":131,"description":"The length of pulse corresponding to lowest angle.","fields":[{"name":"_","unit":"us","type":"u16","storage":2,"isSimpleType":true,"defaultValue":500}],"packFormat":"u16"},{"kind":"rw","name":"max_angle","identifier":132,"description":"Highest angle that can be set.","fields":[{"name":"_","unit":"°","shift":16,"type":"i16.16","storage":-4,"defaultValue":90}],"packFormat":"i16.16"},{"kind":"rw","name":"max_pulse","identifier":133,"description":"The length of pulse corresponding to highest angle.","fields":[{"name":"_","unit":"us","type":"u16","storage":2,"isSimpleType":true,"defaultValue":2500}],"packFormat":"u16"},{"kind":"const","name":"stall_torque","identifier":384,"description":"The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.","fields":[{"name":"_","unit":"kg/cm","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"},{"kind":"const","name":"response_speed","identifier":385,"description":"Time to move 60°.","fields":[{"name":"_","unit":"s/60°","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"}],"tags":[]},{"name":"Settings","status":"experimental","shortId":"settings","camelName":"settings","shortName":"settings","extends":["_base"],"notes":{"short":"Non-volatile key-value storage interface for storing settings.","long":"## Secrets\n\nEntries with keys starting with `$` are considered secret.\nThey can be written normally, but they read as a single `0` byte,\nunless they are empty, in which case the value returned is also empty.\nThese are typically used by other services on the same device."},"classIdentifier":285727818,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"get","identifier":128,"description":"Get the value of given setting. If no such entry exists, the value returned is empty.","fields":[{"name":"key","unit":"","type":"string","storage":0}],"hasReport":true,"packFormat":"s"},{"kind":"report","name":"get","identifier":128,"description":"Get the value of given setting. If no such entry exists, the value returned is empty.","fields":[{"name":"key","unit":"","type":"string0","storage":0},{"name":"value","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"secondary":true,"packFormat":"z b"},{"kind":"command","name":"set","identifier":129,"description":"Set the value of a given setting.","fields":[{"name":"key","unit":"","type":"string0","storage":0},{"name":"value","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"packFormat":"z b"},{"kind":"command","name":"delete","identifier":132,"description":"Delete a given setting.","fields":[{"name":"key","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"command","name":"list_keys","identifier":130,"description":"Return keys of all settings.","fields":[{"name":"results","unit":"","type":"pipe","storage":12}],"pipeType":"list_keys","packFormat":"b[12]"},{"kind":"pipe_report","name":"listed_key","identifier":0,"description":"Return keys of all settings.","fields":[{"name":"key","unit":"","type":"string","storage":0}],"pipeType":"list_keys","packFormat":"s"},{"kind":"command","name":"list","identifier":131,"description":"Return keys and values of all settings.","fields":[{"name":"results","unit":"","type":"pipe","storage":12}],"pipeType":"list","packFormat":"b[12]"},{"kind":"pipe_report","name":"listed_entry","identifier":0,"description":"Return keys and values of all settings.","fields":[{"name":"key","unit":"","type":"string0","storage":0},{"name":"value","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"pipeType":"list","packFormat":"z b"},{"kind":"command","name":"clear","identifier":133,"description":"Clears all keys.","fields":[]},{"kind":"event","name":"change","identifier":3,"description":"Notifies that some setting have been modified.","fields":[],"identifierName":"change"}],"tags":[]},{"name":"7-segment display","status":"experimental","shortId":"sevensegmentdisplay","camelName":"sevenSegmentDisplay","shortName":"sevenSegmentDisplay","extends":["_base"],"notes":{"short":"A 7-segment numeric display, with one or more digits."},"classIdentifier":425810167,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"digits","identifier":2,"description":"Each byte encodes the display status of a digit using, \nwhere bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\nIf incoming ``digits`` data is smaller than `digit_count`, the remaining digits will be cleared.\nThus, sending an empty ``digits`` payload clears the screen.\n\n```text\n - A -\n G   B\n |   |\n - F -\n |   |   -\n E   C  |DP|\n - D -   -\n```","fields":[{"name":"_","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"identifierName":"value","packFormat":"b"},{"kind":"rw","name":"brightness","identifier":1,"description":"Controls the brightness of the LEDs. ``0`` means off.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"intensity","packFormat":"u0.16"},{"kind":"rw","name":"double_dots","identifier":128,"description":"Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\nIf the column LEDs is not supported, the value remains false.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"optional":true,"packFormat":"u8"},{"kind":"const","name":"digit_count","identifier":384,"description":"The number of digits available on the display.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"packFormat":"u8"},{"kind":"const","name":"decimal_point","identifier":385,"description":"True if decimal points are available (on all digits).","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"}],"tags":["display"]},{"name":"Soil moisture","status":"experimental","shortId":"soilmoisture","camelName":"soilMoisture","shortName":"soilMoisture","extends":["_base","_sensor"],"notes":{"short":"A soil moisture sensor."},"classIdentifier":491430835,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Resistive":1,"Capacitive":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"moisture","identifier":257,"description":"Indicates the wetness of the soil, from ``dry`` to ``wet``.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"reading","preferredInterval":1000,"packFormat":"u0.16"},{"kind":"const","name":"variant","identifier":263,"description":"Describe the type of physical sensor.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":["environment"]},{"name":"Solenoid","status":"experimental","shortId":"solenoid","camelName":"solenoid","shortName":"solenoid","extends":["_base"],"notes":{"short":"A push-pull solenoid is a type of relay that pulls a coil when activated."},"classIdentifier":387392458,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"PushPull":1,"Valve":2,"Latch":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"pulled","identifier":1,"description":"Indicates whether the solenoid is energized and pulled (on) or pushed (off).","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"const","name":"variant","identifier":263,"description":"Describes the type of solenoid used.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":[]},{"name":"Sound level","status":"experimental","shortId":"soundlevel","camelName":"soundLevel","shortName":"soundLevel","extends":["_base","_sensor"],"notes":{"short":"A sound level detector sensor, gives a relative indication of the sound level."},"classIdentifier":346888797,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"sound_level","identifier":257,"description":"The sound level detected by the microphone","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"reading","packFormat":"u0.16"},{"kind":"rw","name":"enabled","identifier":1,"description":"Turn on or off the microphone.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"rw","name":"min_decibels","identifier":129,"description":"The minimum power value considered by the sensor.\nIf both ``min_decibels`` and ``max_decibels`` are supported,\nthe volume in deciment can be linearly interpolated between\n``[min_decibels, max_decibels]``.","fields":[{"name":"_","unit":"dB","type":"i16","storage":-2,"isSimpleType":true}],"optional":true,"packFormat":"i16"},{"kind":"rw","name":"max_decibels","identifier":130,"description":"The maximum power value considered by the sensor.\nIf both ``min_decibels`` and ``max_decibels`` are supported,\nthe volume in deciment can be linearly interpolated between\n``[min_decibels, max_decibels]``.","fields":[{"name":"_","unit":"dB","type":"i16","storage":-2,"isSimpleType":true}],"optional":true,"packFormat":"i16"},{"kind":"rw","name":"loud_threshold","identifier":5,"description":"The sound level to trigger a loud event.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"low_threshold","packFormat":"u0.16"},{"kind":"rw","name":"quiet_threshold","identifier":6,"description":"The sound level to trigger a quite event.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"high_threshold","packFormat":"u0.16"},{"kind":"event","name":"loud","identifier":6,"description":"Raised when a loud sound is detected","fields":[],"identifierName":"high"},{"kind":"event","name":"quiet","identifier":5,"description":"Raised when a period of quietness is detected","fields":[],"identifierName":"low"}],"tags":["sound"]},{"name":"Sound player","status":"experimental","shortId":"soundplayer","camelName":"soundPlayer","shortName":"soundPlayer","extends":["_base"],"notes":{"short":"A device that can play various sounds stored locally. This service is typically paired with a ``storage`` service for storing sounds."},"classIdentifier":335795000,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"volume","identifier":1,"description":"Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"intensity","packFormat":"u0.16"},{"kind":"command","name":"play","identifier":128,"description":"Starts playing a sounds with a specific volume.","fields":[{"name":"volume","unit":"/","shift":16,"type":"u0.16","storage":2},{"name":"name","unit":"","type":"string","storage":0}],"packFormat":"u0.16 s"},{"kind":"command","name":"list_sounds","identifier":129,"description":"Returns the list of sounds available to play.","fields":[{"name":"sounds_port","unit":"","type":"pipe","storage":12}],"pipeType":"list_sounds","packFormat":"b[12]"},{"kind":"pipe_report","name":"list_sounds_pipe","identifier":0,"description":"Returns the list of sounds available to play.","fields":[{"name":"duration","unit":"ms","type":"u32","storage":4,"isSimpleType":true},{"name":"name","unit":"","type":"string","storage":0}],"pipeType":"list_sounds","packFormat":"u32 s"}],"tags":["sound"]},{"name":"Sound Spectrum","status":"experimental","shortId":"soundspectrum","camelName":"soundSpectrum","shortName":"soundSpectrum","extends":["_base","_sensor"],"notes":{"short":"A microphone that analyzes the sound specturm"},"classIdentifier":360365086,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"frequency_bins","identifier":257,"description":"The computed frequency data.","fields":[{"name":"_","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"identifierName":"reading","packFormat":"b"},{"kind":"rw","name":"enabled","identifier":1,"description":"Turns on/off the micropohone.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"rw","name":"fft_pow2_size","identifier":128,"description":"The power of 2 used as the size of the FFT to be used to determine the frequency domain.","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true,"defaultValue":5,"absoluteMin":2,"absoluteMax":7}],"packFormat":"u8"},{"kind":"rw","name":"min_decibels","identifier":129,"description":"The minimum power value in the scaling range for the FFT analysis data","fields":[{"name":"_","unit":"dB","type":"i16","storage":-2,"isSimpleType":true}],"packFormat":"i16"},{"kind":"rw","name":"max_decibels","identifier":130,"description":"The maximum power value in the scaling range for the FFT analysis data","fields":[{"name":"_","unit":"dB","type":"i16","storage":-2,"isSimpleType":true}],"packFormat":"i16"},{"kind":"rw","name":"smoothing_time_constant","identifier":131,"description":"The averaging constant with the last analysis frame. \nIf ``0`` is set, there is no averaging done, whereas a value of ``1`` means \"overlap the previous and current buffer quite a lot while computing the value\".","fields":[{"name":"_","unit":"/","shift":8,"type":"u0.8","storage":1,"defaultValue":0.8}],"packFormat":"u0.8"}],"tags":["sound"]},{"name":"Speech synthesis","status":"experimental","shortId":"speechsynthesis","camelName":"speechSynthesis","shortName":"speechSynthesis","extends":["_base"],"notes":{"short":"A speech synthesizer"},"classIdentifier":302307733,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"enabled","identifier":1,"description":"Determines if the speech engine is in a non-paused state.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"rw","name":"lang","identifier":128,"description":"Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"packFormat":"s"},{"kind":"rw","name":"volume","identifier":129,"description":"Volume for utterances.","fields":[{"name":"_","unit":"/","shift":8,"type":"u0.8","storage":1,"defaultValue":1}],"optional":true,"packFormat":"u0.8"},{"kind":"rw","name":"pitch","identifier":130,"description":"Pitch for utterances","fields":[{"name":"_","unit":"","shift":16,"type":"u16.16","storage":4,"defaultValue":1,"absoluteMax":2,"absoluteMin":0}],"optional":true,"packFormat":"u16.16"},{"kind":"rw","name":"rate","identifier":131,"description":"Rate for utterances","fields":[{"name":"_","unit":"","shift":16,"type":"u16.16","storage":4,"defaultValue":1,"absoluteMin":0.1,"absoluteMax":10}],"optional":true,"packFormat":"u16.16"},{"kind":"command","name":"speak","identifier":128,"description":"Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.","fields":[{"name":"text","unit":"","type":"string","storage":0}],"packFormat":"s"},{"kind":"command","name":"cancel","identifier":129,"description":"Cancels current utterance and all utterances from the utterance queue.","fields":[]}],"tags":[]},{"name":"Switch","status":"experimental","shortId":"switch","camelName":"switch","shortName":"switch","extends":["_base","_sensor"],"notes":{"short":"A switch, which keeps its position."},"classIdentifier":450008066,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Slide":1,"Tilt":2,"PushButton":3,"Tactile":4,"Toggle":5,"Proximity":6,"Magnetic":7,"FootPedal":8}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"active","identifier":257,"description":"Indicates whether the switch is currently active (on).","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"reading","packFormat":"u8"},{"kind":"const","name":"variant","identifier":263,"description":"Describes the type of switch used.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"const","name":"auto_off_delay","identifier":384,"description":"Specifies the delay without activity to automatically turn off after turning on.\nFor example, some light switches in staircases have such a capability.","fields":[{"name":"_","unit":"s","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"},{"kind":"event","name":"on","identifier":1,"description":"Emitted when switch goes from ``off`` to ``on``.","fields":[],"identifierName":"active"},{"kind":"event","name":"off","identifier":2,"description":"Emitted when switch goes from ``on`` to ``off``.","fields":[],"identifierName":"inactive"}],"tags":["button"]},{"name":"TCP","status":"experimental","shortId":"tcp","camelName":"tcp","shortName":"tcp","extends":["_base"],"notes":{"short":"Data transfer over TCP/IP and TLS stream sockets.","commands":"## Pipes"},"classIdentifier":457422603,"enums":{"TcpError":{"name":"TcpError","storage":-4,"members":{"InvalidCommand":1,"InvalidCommandPayload":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"open","identifier":128,"description":"Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.","fields":[{"name":"inbound","unit":"","type":"pipe","storage":12}],"pipeType":"open","hasReport":true,"packFormat":"b[12]"},{"kind":"report","name":"open","identifier":128,"description":"Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.","fields":[{"name":"outbound_port","unit":"","type":"pipe_port","storage":2}],"secondary":true,"pipeType":"open","packFormat":"u16"},{"kind":"meta_pipe_command","name":"open_ssl","identifier":1,"description":"Open an SSL connection to a given host:port pair. Can be issued only once on given pipe.\nAfter the connection is established, an empty data report is sent.\nConnection is closed by closing the pipe.","fields":[{"name":"tcp_port","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"hostname","unit":"","type":"string","storage":0}],"pipeType":"open","packFormat":"u16 s"},{"kind":"pipe_command","name":"outdata","identifier":0,"description":"Bytes to be sent directly over an established TCP or SSL connection.","fields":[{"name":"data","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"pipeType":"open","packFormat":"b"},{"kind":"pipe_report","name":"indata","identifier":0,"description":"Bytes read directly from directly over an established TCP or SSL connection.","fields":[{"name":"data","unit":"","type":"bytes","storage":0,"isSimpleType":true}],"pipeType":"open","packFormat":"b"},{"kind":"meta_pipe_report","name":"error","identifier":0,"description":"Reported when an error is encountered. Negative error codes come directly from the SSL implementation.","fields":[{"name":"error","unit":"","type":"TcpError","storage":-4}],"pipeType":"open","packFormat":"i32"}],"tags":[]},{"name":"Thermocouple","status":"experimental","shortId":"thermocouple","camelName":"thermocouple","shortName":"thermocouple","extends":["_base","_sensor"],"notes":{"short":"A thermocouple using a heat probe to gather temperatures."},"classIdentifier":339394657,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"TypeK":1,"TypeJ":2,"TypeT":3,"TypeE":4,"TypeN":5,"TypeS":6,"TypeR":7,"TypeB":8}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"temperature","identifier":257,"description":"The temperature.","fields":[{"name":"_","unit":"°C","shift":10,"type":"i22.10","storage":-4}],"identifierName":"reading","preferredInterval":1000,"packFormat":"i22.10"},{"kind":"const","name":"min_temperature","identifier":260,"description":"Lowest temperature that can be reported.","fields":[{"name":"_","unit":"°C","shift":10,"type":"i22.10","storage":-4}],"identifierName":"min_reading","packFormat":"i22.10"},{"kind":"const","name":"max_temperature","identifier":261,"description":"Highest temperature that can be reported.","fields":[{"name":"_","unit":"°C","shift":10,"type":"i22.10","storage":-4}],"identifierName":"max_reading","packFormat":"i22.10"},{"kind":"ro","name":"temperature_error","identifier":262,"description":"The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.","fields":[{"name":"_","unit":"°C","shift":10,"type":"u22.10","storage":4}],"identifierName":"reading_error","packFormat":"u22.10"},{"kind":"const","name":"variant","identifier":263,"description":"Specifies the type of thermometer.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"identifierName":"variant","packFormat":"u8"}],"tags":["environment"]},{"name":"Thermometer","status":"experimental","shortId":"thermometer","camelName":"thermometer","shortName":"thermometer","extends":["_base","_sensor"],"notes":{"short":"A thermometer measuring outside or inside environment."},"classIdentifier":337754823,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Outdoor":1,"Indoor":2,"Body":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"temperature","identifier":257,"description":"The temperature.","fields":[{"name":"_","unit":"°C","shift":10,"type":"i22.10","storage":-4}],"identifierName":"reading","preferredInterval":1000,"packFormat":"i22.10"},{"kind":"const","name":"min_temperature","identifier":260,"description":"Lowest temperature that can be reported.","fields":[{"name":"_","unit":"°C","shift":10,"type":"i22.10","storage":-4}],"identifierName":"min_reading","packFormat":"i22.10"},{"kind":"const","name":"max_temperature","identifier":261,"description":"Highest temperature that can be reported.","fields":[{"name":"_","unit":"°C","shift":10,"type":"i22.10","storage":-4}],"identifierName":"max_reading","packFormat":"i22.10"},{"kind":"ro","name":"temperature_error","identifier":262,"description":"The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.","fields":[{"name":"_","unit":"°C","shift":10,"type":"u22.10","storage":4}],"identifierName":"reading_error","packFormat":"u22.10"},{"kind":"const","name":"variant","identifier":263,"description":"Specifies the type of thermometer.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"identifierName":"variant","packFormat":"u8"}],"tags":["environment"]},{"name":"Traffic Light","status":"experimental","shortId":"trafficlight","camelName":"trafficLight","shortName":"trafficLight","extends":["_base"],"notes":{"short":"Controls a mini traffic with a red, orange and green LED."},"classIdentifier":365137307,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"red","identifier":128,"description":"The on/off state of the red light.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"rw","name":"orange","identifier":129,"description":"The on/off state of the red light.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"rw","name":"green","identifier":130,"description":"The on/off state of the red light.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"}],"tags":[]},{"name":"Total Volatile organic compound","status":"experimental","shortId":"tvoc","camelName":"tvoc","shortName":"tvoc","extends":["_base","_sensor"],"notes":{"short":"Measures equivalent Total Volatile Organic Compound levels."},"classIdentifier":312849815,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"TVOC","identifier":257,"description":"Total volatile organic compound readings in parts per billion.","fields":[{"name":"_","unit":"ppb","shift":10,"type":"u22.10","storage":4,"absoluteMin":0,"typicalMax":1187,"typicalMin":0}],"identifierName":"reading","packFormat":"u22.10"},{"kind":"ro","name":"TVOC_error","identifier":262,"description":"Error on the reading data","fields":[{"name":"_","unit":"ppb","shift":10,"type":"u22.10","storage":4}],"optional":true,"identifierName":"reading_error","packFormat":"u22.10"},{"kind":"const","name":"min_TVOC","identifier":260,"description":"Minimum measurable value","fields":[{"name":"_","unit":"ppb","shift":10,"type":"u22.10","storage":4}],"optional":true,"identifierName":"min_reading","packFormat":"u22.10"},{"kind":"const","name":"max_TVOC","identifier":261,"description":"Minimum measurable value","fields":[{"name":"_","unit":"ppb","shift":10,"type":"u22.10","storage":4}],"optional":true,"identifierName":"max_reading","packFormat":"u22.10"},{"kind":"const","name":"conditioning_period","identifier":384,"description":"Time required to achieve good sensor stability before measuring after long idle period.","fields":[{"name":"_","unit":"s","type":"u32","storage":4,"isSimpleType":true}],"optional":true,"packFormat":"u32"}],"tags":["environment"]},{"name":"UV index","status":"experimental","shortId":"uvindex","camelName":"uvIndex","shortName":"uvIndex","extends":["_base","_sensor"],"notes":{"short":"The UV Index is a measure of the intensity of ultraviolet (UV) rays from the Sun."},"classIdentifier":527306128,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"UVA_UVB":1,"Visible_IR":2}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"uv_index","identifier":257,"description":"Ultraviolet index, typically refreshed every second.","fields":[{"name":"_","unit":"uv","shift":16,"type":"u16.16","storage":4,"typicalMax":11,"typicalMin":0}],"identifierName":"reading","packFormat":"u16.16"},{"kind":"ro","name":"uv_index_error","identifier":262,"description":"Error on the UV measure.","fields":[{"name":"_","unit":"uv","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"reading_error","packFormat":"u16.16"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical sensor and capabilities.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":["environment"]},{"name":"Vibration motor","status":"experimental","shortId":"vibration","camelName":"vibrationMotor","shortName":"vibrationMotor","extends":["_base"],"notes":{"short":"A vibration motor."},"classIdentifier":406832290,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"enabled","identifier":1,"description":"Determines if the vibration motor responds to vibrate commands.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"identifierName":"intensity","packFormat":"u8"},{"kind":"command","name":"vibrate","identifier":128,"description":"Starts a sequence of vibration and pauses. To stop any existing vibration, send an empty payload.","fields":[{"name":"duration","unit":"8ms","type":"u8","storage":1,"isSimpleType":true,"startRepeats":true},{"name":"speed","unit":"/","shift":8,"type":"u0.8","storage":1}],"packFormat":"r: u8 u0.8"}],"tags":[]},{"name":"Water level","status":"experimental","shortId":"waterlevel","camelName":"waterLevel","shortName":"waterLevel","extends":["_base","_sensor"],"notes":{"short":"A sensor that measures liquid/water level."},"classIdentifier":343630573,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Resistive":1,"ContactPhotoElectric":2,"NonContactPhotoElectric":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"level","identifier":257,"description":"The reported water level.","fields":[{"name":"_","unit":"/","shift":16,"type":"u0.16","storage":2}],"identifierName":"reading","packFormat":"u0.16"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical sensor.","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"}],"tags":[]},{"name":"Weight Scale","status":"experimental","shortId":"weightscale","camelName":"weightScale","shortName":"weightScale","extends":["_base","_sensor"],"notes":{"short":"A weight measuring sensor."},"classIdentifier":525160512,"enums":{"Variant":{"name":"Variant","storage":1,"members":{"Body":1,"Food":2,"Jewelry":3}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"weight","identifier":257,"description":"The reported weight.","fields":[{"name":"_","unit":"kg","shift":16,"type":"u16.16","storage":4}],"identifierName":"reading","packFormat":"u16.16"},{"kind":"ro","name":"weight_error","identifier":262,"description":"The estimate error on the reported reading.","fields":[{"name":"_","unit":"kg","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"reading_error","packFormat":"u16.16"},{"kind":"rw","name":"zero_offset","identifier":128,"description":"Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\nYou do not need to subtract that from the reading, it has already been done.","fields":[{"name":"_","unit":"kg","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"},{"kind":"rw","name":"gain","identifier":129,"description":"Calibrated gain on the weight scale error.","fields":[{"name":"_","unit":"","shift":16,"type":"u16.16","storage":4}],"optional":true,"packFormat":"u16.16"},{"kind":"const","name":"max_weight","identifier":261,"description":"Maximum supported weight on the scale.","fields":[{"name":"_","unit":"kg","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"max_reading","packFormat":"u16.16"},{"kind":"const","name":"min_weight","identifier":260,"description":"Minimum recommend weight on the scale.","fields":[{"name":"_","unit":"kg","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"min_reading","packFormat":"u16.16"},{"kind":"const","name":"weight_resolution","identifier":264,"description":"Smallest, yet distinguishable change in reading.","fields":[{"name":"_","unit":"kg","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"reading_resolution","packFormat":"u16.16"},{"kind":"const","name":"variant","identifier":263,"description":"The type of physical scale","fields":[{"name":"_","unit":"","type":"Variant","storage":1}],"optional":true,"identifierName":"variant","packFormat":"u8"},{"kind":"command","name":"calibrate_zero_offset","identifier":128,"description":"Call this command when there is nothing on the scale. If supported, the module should save the calibration data.","fields":[]},{"kind":"command","name":"calibrate_gain","identifier":129,"description":"Call this command with the weight of the thing on the scale.","fields":[{"name":"weight","unit":"g","shift":10,"type":"u22.10","storage":4}],"packFormat":"u22.10"}],"tags":[]},{"name":"WIFI","status":"experimental","shortId":"wifi","camelName":"wifi","shortName":"wifi","extends":["_base"],"notes":{"short":"Discovery and connection to WiFi networks. Separate TCP service is used for data transfer."},"classIdentifier":413852154,"enums":{"APFlags":{"name":"APFlags","storage":4,"isFlags":true,"members":{"HasPassword":1,"WPS":2,"HasSecondaryChannelAbove":4,"HasSecondaryChannelBelow":8,"IEEE_802_11B":256,"IEEE_802_11A":512,"IEEE_802_11G":1024,"IEEE_802_11N":2048,"IEEE_802_11AC":4096,"IEEE_802_11AX":8192,"IEEE_802_LongRange":32768}}},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"command","name":"scan","identifier":128,"description":"Initiate search for WiFi networks. Results are returned via pipe, one entry per packet.","fields":[{"name":"results","unit":"","type":"pipe","storage":12}],"pipeType":"scan","packFormat":"b[12]"},{"kind":"pipe_report","name":"results","identifier":0,"description":"Initiate search for WiFi networks. Results are returned via pipe, one entry per packet.","fields":[{"name":"flags","unit":"","type":"APFlags","storage":4},{"name":"reserved","unit":"","type":"u32","storage":4,"isSimpleType":true},{"name":"rssi","unit":"dB","type":"i8","storage":-1,"isSimpleType":true,"typicalMin":-100,"typicalMax":-20},{"name":"channel","unit":"","type":"u8","storage":1,"isSimpleType":true,"typicalMin":1,"typicalMax":13},{"name":"bssid","unit":"","type":"u8[6]","storage":6},{"name":"ssid","unit":"","type":"string","storage":33,"maxBytes":33}],"pipeType":"scan","packFormat":"u32 u32 i8 u8 b[6] s[33]"},{"kind":"command","name":"connect","identifier":129,"description":"Connect to named network.","fields":[{"name":"ssid","unit":"","type":"string0","storage":0},{"name":"password","unit":"","type":"string0","storage":0,"isOptional":true}],"packFormat":"z z"},{"kind":"command","name":"disconnect","identifier":130,"description":"Disconnect from current WiFi network if any.","fields":[]},{"kind":"ro","name":"connected","identifier":384,"description":"Indicates whether or not we currently have an IP address assigned.","fields":[{"name":"_","unit":"","type":"bool","storage":1}],"packFormat":"u8"},{"kind":"event","name":"got_ip","identifier":1,"description":"Emitted upon successful join and IP address assignment.","fields":[],"identifierName":"active"},{"kind":"event","name":"lost_ip","identifier":2,"description":"Emitted when disconnected from network.","fields":[],"identifierName":"inactive"}],"tags":["iot"]},{"name":"Wind direction","status":"experimental","shortId":"winddirection","camelName":"windDirection","shortName":"windDirection","extends":["_base","_sensor"],"notes":{"short":"A sensor that measures wind direction."},"classIdentifier":409725227,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"wind_direction","identifier":257,"description":"The direction of the wind.","fields":[{"name":"_","unit":"","type":"u16","storage":2,"isSimpleType":true,"absoluteMin":0,"absoluteMax":359}],"identifierName":"reading","preferredInterval":1000,"packFormat":"u16"},{"kind":"ro","name":"wind_direction_error","identifier":262,"description":"Error on the wind direction reading","fields":[{"name":"_","unit":"°","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"reading_error","packFormat":"u16"},{"kind":"ro","name":"wind_direction_offset","identifier":384,"description":"Offset added to direction to account for sensor calibration.","fields":[{"name":"_","unit":"°","type":"i16","storage":-2,"isSimpleType":true}],"optional":true,"packFormat":"i16"}],"tags":[]},{"name":"Wind speed","status":"experimental","shortId":"windspeed","camelName":"windSpeed","shortName":"windSpeed","extends":["_base","_sensor"],"notes":{"short":"A sensor that measures wind speed."},"classIdentifier":458824639,"enums":{},"packets":[{"kind":"const","name":"instance_name","identifier":265,"description":"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).","fields":[{"name":"_","unit":"","type":"string","storage":0}],"optional":true,"identifierName":"instance_name","packFormat":"s","derived":"_base"},{"kind":"ro","name":"status_code","identifier":259,"description":"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code","packFormat":"u16 u16","derived":"_base"},{"kind":"event","name":"status_code_changed","identifier":4,"description":"Notifies that the status code of the service changed.","fields":[{"name":"code","unit":"","type":"u16","storage":2,"isSimpleType":true},{"name":"vendor_code","unit":"","type":"u16","storage":2,"isSimpleType":true}],"optional":true,"identifierName":"status_code_changed","packFormat":"u16 u16","derived":"_base"},{"kind":"rw","name":"streaming_samples","identifier":3,"description":"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).","fields":[{"name":"_","unit":"","type":"u8","storage":1,"isSimpleType":true}],"internal":true,"identifierName":"streaming_samples","packFormat":"u8","derived":"_sensor"},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true,"defaultValue":100,"typicalMin":1,"typicalMax":60000}],"identifierName":"streaming_interval","packFormat":"u32","derived":"_sensor"},{"kind":"const","name":"streaming_preferred_interval","identifier":258,"description":"Preferred default streaming interval for sensor in milliseconds.","fields":[{"name":"_","unit":"ms","type":"u32","storage":4,"isSimpleType":true}],"internal":true,"optional":true,"identifierName":"streaming_preferred_interval","packFormat":"u32","derived":"_sensor"},{"kind":"ro","name":"wind_speed","identifier":257,"description":"The velocity of the wind.","fields":[{"name":"_","unit":"m/s","shift":16,"type":"u16.16","storage":4}],"identifierName":"reading","preferredInterval":60000,"packFormat":"u16.16"},{"kind":"ro","name":"wind_speed_error","identifier":262,"description":"Error on the reading","fields":[{"name":"_","unit":"m/s","shift":16,"type":"u16.16","storage":4}],"identifierName":"reading_error","packFormat":"u16.16"},{"kind":"const","name":"max_wind_speed","identifier":261,"description":"Maximum speed that can be measured by the sensor.","fields":[{"name":"_","unit":"m/s","shift":16,"type":"u16.16","storage":4}],"optional":true,"identifierName":"max_reading","packFormat":"u16.16"}],"tags":[]}]